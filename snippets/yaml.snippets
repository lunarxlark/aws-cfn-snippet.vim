# Cfn Resources {{{
snippet AWS::ElasticBeanstalk::ConfigurationTemplate
Type AWS::ElasticBeanstalk::ConfigurationTemplate
Properties:
	ApplicationName : ${1:String(R)}
	Description : ${2:String(O)}
	EnvironmentId : ${3:String(O)}
	OptionSettings : [${4:AWS::ElasticBeanstalk::ConfigurationTemplate.ConfigurationOptionSetting(O)}]
	PlatformArn : ${5:String(O)}
	SolutionStackName : ${6:String(O)}
	SourceConfiguration: ${7:AWS::ElasticBeanstalk::ConfigurationTemplate.SourceConfiguration(O)}
endsnippet

snippet AWS::AmazonMQ::Broker
Type AWS::AmazonMQ::Broker
Properties:
	SecurityGroups : [${1:String(O)}]
	EngineVersion : ${2:String(R)}
	Configuration: ${3:AWS::AmazonMQ::Broker.ConfigurationId(O)}
	MaintenanceWindowStartTime: ${4:AWS::AmazonMQ::Broker.MaintenanceWindow(O)}
	HostInstanceType : ${5:String(R)}
	AutoMinorVersionUpgrade : ${6:Boolean(R)}
	Users : [${7:AWS::AmazonMQ::Broker.User(R)}]
	Logs: ${8:AWS::AmazonMQ::Broker.LogList(O)}
	SubnetIds : [${9:String(O)}]
	BrokerName : ${10:String(R)}
	DeploymentMode : ${11:String(R)}
	EngineType : ${12:String(R)}
	PubliclyAccessible : ${13:Boolean(R)}
	Tags : [${14:AWS::AmazonMQ::Broker.TagsEntry(O)}]
endsnippet

snippet AWS::AppSync::DataSource
Type AWS::AppSync::DataSource
Properties:
	Type : ${1:String(R)}
	Description : ${2:String(O)}
	ServiceRoleArn : ${3:String(O)}
	HttpConfig: ${4:AWS::AppSync::DataSource.HttpConfig(O)}
	RelationalDatabaseConfig: ${5:AWS::AppSync::DataSource.RelationalDatabaseConfig(O)}
	LambdaConfig: ${6:AWS::AppSync::DataSource.LambdaConfig(O)}
	ApiId : ${7:String(R)}
	Name : ${8:String(R)}
	DynamoDBConfig: ${9:AWS::AppSync::DataSource.DynamoDBConfig(O)}
	ElasticsearchConfig: ${10:AWS::AppSync::DataSource.ElasticsearchConfig(O)}
endsnippet

snippet AWS::EC2::RouteTable
Type AWS::EC2::RouteTable
Properties:
	Tags : [${1:AWS::EC2::RouteTable.Tag(O)}]
	VpcId : ${2:String(R)}
endsnippet

snippet AWS::ServiceCatalog::PortfolioShare
Type AWS::ServiceCatalog::PortfolioShare
Properties:
	AccountId : ${1:String(R)}
	AcceptLanguage : ${2:String(O)}
	PortfolioId : ${3:String(R)}
endsnippet

snippet AWS::Cognito::IdentityPoolRoleAttachment
Type AWS::Cognito::IdentityPoolRoleAttachment
Properties:
	RoleMappings : ${1:Json(O)}
	IdentityPoolId : ${2:String(R)}
	Roles : ${3:Json(O)}
endsnippet

snippet AWS::Greengrass::Group
Type AWS::Greengrass::Group
Properties:
	InitialVersion: ${1:AWS::Greengrass::Group.GroupVersion(O)}
	RoleArn : ${2:String(O)}
	Name : ${3:String(R)}
endsnippet

snippet AWS::Events::Rule
Type AWS::Events::Rule
Properties:
	Description : ${1:String(O)}
	EventPattern : ${2:Json(O)}
	Name : ${3:String(O)}
	RoleArn : ${4:String(O)}
	ScheduleExpression : ${5:String(O)}
	State : ${6:String(O)}
	Targets : [${7:AWS::Events::Rule.Target(O)}]
endsnippet

snippet AWS::WAF::IPSet
Type AWS::WAF::IPSet
Properties:
	IPSetDescriptors : [${1:AWS::WAF::IPSet.IPSetDescriptor(O)}]
	Name : ${2:String(R)}
endsnippet

snippet AWS::IAM::Group
Type AWS::IAM::Group
Properties:
	GroupName : ${1:String(O)}
	ManagedPolicyArns : [${2:String(O)}]
	Path : ${3:String(O)}
	Policies : [${4:AWS::IAM::Group.Policy(O)}]
endsnippet

snippet AWS::CodePipeline::CustomActionType
Type AWS::CodePipeline::CustomActionType
Properties:
	Category : ${1:String(R)}
	ConfigurationProperties : [${2:AWS::CodePipeline::CustomActionType.ConfigurationProperties(O)}]
	InputArtifactDetails: ${3:AWS::CodePipeline::CustomActionType.ArtifactDetails(R)}
	OutputArtifactDetails: ${4:AWS::CodePipeline::CustomActionType.ArtifactDetails(R)}
	Provider : ${5:String(R)}
	Settings: ${6:AWS::CodePipeline::CustomActionType.Settings(O)}
	Version : ${7:String(O)}
endsnippet

snippet AWS::Greengrass::ConnectorDefinition
Type AWS::Greengrass::ConnectorDefinition
Properties:
	InitialVersion: ${1:AWS::Greengrass::ConnectorDefinition.ConnectorDefinitionVersion(O)}
	Name : ${2:String(R)}
endsnippet

snippet AWS::EC2::PlacementGroup
Type AWS::EC2::PlacementGroup
Properties:
	Strategy : ${1:String(O)}
endsnippet

snippet AWS::EC2::VPCPeeringConnection
Type AWS::EC2::VPCPeeringConnection
Properties:
	PeerOwnerId : ${1:String(O)}
	PeerRegion : ${2:String(O)}
	PeerRoleArn : ${3:String(O)}
	PeerVpcId : ${4:String(R)}
	Tags : [${5:AWS::EC2::VPCPeeringConnection.Tag(O)}]
	VpcId : ${6:String(R)}
endsnippet

snippet AWS::Elasticsearch::Domain
Type AWS::Elasticsearch::Domain
Properties:
	AccessPolicies : ${1:Json(O)}
	AdvancedOptions : [${2:String(O)}]
	DomainName : ${3:String(O)}
	EBSOptions: ${4:AWS::Elasticsearch::Domain.EBSOptions(O)}
	ElasticsearchClusterConfig: ${5:AWS::Elasticsearch::Domain.ElasticsearchClusterConfig(O)}
	ElasticsearchVersion : ${6:String(O)}
	EncryptionAtRestOptions: ${7:AWS::Elasticsearch::Domain.EncryptionAtRestOptions(O)}
	NodeToNodeEncryptionOptions: ${8:AWS::Elasticsearch::Domain.NodeToNodeEncryptionOptions(O)}
	SnapshotOptions: ${9:AWS::Elasticsearch::Domain.SnapshotOptions(O)}
	Tags : [${10:AWS::Elasticsearch::Domain.Tag(O)}]
	VPCOptions: ${11:AWS::Elasticsearch::Domain.VPCOptions(O)}
endsnippet

snippet AWS::WAFRegional::SizeConstraintSet
Type AWS::WAFRegional::SizeConstraintSet
Properties:
	SizeConstraints : [${1:AWS::WAFRegional::SizeConstraintSet.SizeConstraint(O)}]
	Name : ${2:String(R)}
endsnippet

snippet AWS::ApiGateway::RequestValidator
Type AWS::ApiGateway::RequestValidator
Properties:
	Name : ${1:String(O)}
	RestApiId : ${2:String(R)}
	ValidateRequestBody : ${3:Boolean(O)}
	ValidateRequestParameters : ${4:Boolean(O)}
endsnippet

snippet AWS::EMR::InstanceFleetConfig
Type AWS::EMR::InstanceFleetConfig
Properties:
	ClusterId : ${1:String(R)}
	InstanceFleetType : ${2:String(R)}
	InstanceTypeConfigs : [${3:AWS::EMR::InstanceFleetConfig.InstanceTypeConfig(O)}]
	LaunchSpecifications: ${4:AWS::EMR::InstanceFleetConfig.InstanceFleetProvisioningSpecifications(O)}
	Name : ${5:String(O)}
	TargetOnDemandCapacity : ${6:Integer(O)}
	TargetSpotCapacity : ${7:Integer(O)}
endsnippet

snippet AWS::WorkSpaces::Workspace
Type AWS::WorkSpaces::Workspace
Properties:
	BundleId : ${1:String(R)}
	DirectoryId : ${2:String(R)}
	RootVolumeEncryptionEnabled : ${3:Boolean(O)}
	Tags : [${4:AWS::WorkSpaces::Workspace.Tag(O)}]
	UserName : ${5:String(R)}
	UserVolumeEncryptionEnabled : ${6:Boolean(O)}
	VolumeEncryptionKey : ${7:String(O)}
	WorkspaceProperties: ${8:AWS::WorkSpaces::Workspace.WorkspaceProperties(O)}
endsnippet

snippet AWS::RDS::DBSecurityGroupIngress
Type AWS::RDS::DBSecurityGroupIngress
Properties:
	CIDRIP : ${1:String(O)}
	DBSecurityGroupName : ${2:String(R)}
	EC2SecurityGroupId : ${3:String(O)}
	EC2SecurityGroupName : ${4:String(O)}
	EC2SecurityGroupOwnerId : ${5:String(O)}
endsnippet

snippet AWS::WAFRegional::SqlInjectionMatchSet
Type AWS::WAFRegional::SqlInjectionMatchSet
Properties:
	SqlInjectionMatchTuples : [${1:AWS::WAFRegional::SqlInjectionMatchSet.SqlInjectionMatchTuple(O)}]
	Name : ${2:String(R)}
endsnippet

snippet AWS::ApiGatewayV2::Route
Type AWS::ApiGatewayV2::Route
Properties:
	Target : ${1:String(O)}
	RouteResponseSelectionExpression : ${2:String(O)}
	AuthorizerId : ${3:String(O)}
	RequestModels : ${4:Json(O)}
	OperationName : ${5:String(O)}
	AuthorizationScopes : [${6:String(O)}]
	ApiKeyRequired : ${7:Boolean(O)}
	RouteKey : ${8:String(R)}
	AuthorizationType : ${9:String(O)}
	ModelSelectionExpression : ${10:String(O)}
	ApiId : ${11:String(R)}
	RequestParameters : ${12:Json(O)}
endsnippet

snippet AWS::CodePipeline::Webhook
Type AWS::CodePipeline::Webhook
Properties:
	AuthenticationConfiguration: ${1:AWS::CodePipeline::Webhook.WebhookAuthConfiguration(R)}
	Filters : [${2:AWS::CodePipeline::Webhook.WebhookFilterRule(R)}]
	Authentication : ${3:String(R)}
	TargetPipeline : ${4:String(R)}
	TargetAction : ${5:String(R)}
	Name : ${6:String(O)}
	TargetPipelineVersion : ${7:Integer(R)}
	RegisterWithThirdParty : ${8:Boolean(O)}
endsnippet

snippet AWS::Logs::LogGroup
Type AWS::Logs::LogGroup
Properties:
	LogGroupName : ${1:String(O)}
	RetentionInDays : ${2:Integer(O)}
endsnippet

snippet AWS::RAM::ResourceShare
Type AWS::RAM::ResourceShare
Properties:
	Principals : [${1:String(O)}]
	AllowExternalPrincipals : ${2:Boolean(O)}
	ResourceArns : [${3:String(O)}]
	Tags : [${4:AWS::RAM::ResourceShare.Tag(O)}]
	Name : ${5:String(R)}
endsnippet

snippet AWS::Kinesis::Stream
Type AWS::Kinesis::Stream
Properties:
	Name : ${1:String(O)}
	RetentionPeriodHours : ${2:Integer(O)}
	ShardCount : ${3:Integer(R)}
	StreamEncryption: ${4:AWS::Kinesis::Stream.StreamEncryption(O)}
	Tags : [${5:AWS::Kinesis::Stream.Tag(O)}]
endsnippet

snippet AWS::AutoScaling::LaunchConfiguration
Type AWS::AutoScaling::LaunchConfiguration
Properties:
	AssociatePublicIpAddress : ${1:Boolean(O)}
	BlockDeviceMappings : [${2:AWS::AutoScaling::LaunchConfiguration.BlockDeviceMapping(O)}]
	ClassicLinkVPCId : ${3:String(O)}
	ClassicLinkVPCSecurityGroups : [${4:String(O)}]
	EbsOptimized : ${5:Boolean(O)}
	IamInstanceProfile : ${6:String(O)}
	ImageId : ${7:String(R)}
	InstanceId : ${8:String(O)}
	InstanceMonitoring : ${9:Boolean(O)}
	InstanceType : ${10:String(R)}
	KernelId : ${11:String(O)}
	KeyName : ${12:String(O)}
	LaunchConfigurationName : ${13:String(O)}
	PlacementTenancy : ${14:String(O)}
	RamDiskId : ${15:String(O)}
	SecurityGroups : [${16:String(O)}]
	SpotPrice : ${17:String(O)}
	UserData : ${18:String(O)}
endsnippet

snippet AWS::EC2::TransitGateway
Type AWS::EC2::TransitGateway
Properties:
	DefaultRouteTablePropagation : ${1:String(O)}
	Description : ${2:String(O)}
	AutoAcceptSharedAttachments : ${3:String(O)}
	DefaultRouteTableAssociation : ${4:String(O)}
	VpnEcmpSupport : ${5:String(O)}
	DnsSupport : ${6:String(O)}
	AmazonSideAsn : ${7:Integer(O)}
	Tags : [${8:AWS::EC2::TransitGateway.Tag(O)}]
endsnippet

snippet AWS::SQS::Queue
Type AWS::SQS::Queue
Properties:
	ContentBasedDeduplication : ${1:Boolean(O)}
	DelaySeconds : ${2:Integer(O)}
	FifoQueue : ${3:Boolean(O)}
	KmsDataKeyReusePeriodSeconds : ${4:Integer(O)}
	KmsMasterKeyId : ${5:String(O)}
	MaximumMessageSize : ${6:Integer(O)}
	MessageRetentionPeriod : ${7:Integer(O)}
	QueueName : ${8:String(O)}
	ReceiveMessageWaitTimeSeconds : ${9:Integer(O)}
	RedrivePolicy : ${10:Json(O)}
	Tags : [${11:AWS::SQS::Queue.Tag(O)}]
	VisibilityTimeout : ${12:Integer(O)}
endsnippet

snippet AWS::AppSync::Resolver
Type AWS::AppSync::Resolver
Properties:
	ResponseMappingTemplateS3Location : ${1:String(O)}
	TypeName : ${2:String(R)}
	PipelineConfig: ${3:AWS::AppSync::Resolver.PipelineConfig(O)}
	DataSourceName : ${4:String(O)}
	RequestMappingTemplate : ${5:String(O)}
	ResponseMappingTemplate : ${6:String(O)}
	Kind : ${7:String(O)}
	RequestMappingTemplateS3Location : ${8:String(O)}
	ApiId : ${9:String(R)}
	FieldName : ${10:String(R)}
endsnippet

snippet AWS::AutoScalingPlans::ScalingPlan
Type AWS::AutoScalingPlans::ScalingPlan
Properties:
	ApplicationSource: ${1:AWS::AutoScalingPlans::ScalingPlan.ApplicationSource(R)}
	ScalingInstructions : [${2:AWS::AutoScalingPlans::ScalingPlan.ScalingInstruction(R)}]
endsnippet

snippet AWS::AppStream::ImageBuilder
Type AWS::AppStream::ImageBuilder
Properties:
	ImageName : ${1:String(O)}
	Description : ${2:String(O)}
	VpcConfig: ${3:AWS::AppStream::ImageBuilder.VpcConfig(O)}
	EnableDefaultInternetAccess : ${4:Boolean(O)}
	DisplayName : ${5:String(O)}
	DomainJoinInfo: ${6:AWS::AppStream::ImageBuilder.DomainJoinInfo(O)}
	AppstreamAgentVersion : ${7:String(O)}
	InstanceType : ${8:String(R)}
	Tags : [${9:AWS::AppStream::ImageBuilder.Tag(O)}]
	Name : ${10:String(O)}
	ImageArn : ${11:String(O)}
endsnippet

snippet AWS::EC2::VPCEndpointServicePermissions
Type AWS::EC2::VPCEndpointServicePermissions
Properties:
	AllowedPrincipals : [${1:String(O)}]
	ServiceId : ${2:String(R)}
endsnippet

snippet AWS::Route53::RecordSet
Type AWS::Route53::RecordSet
Properties:
	AliasTarget: ${1:AWS::Route53::RecordSet.AliasTarget(O)}
	Comment : ${2:String(O)}
	Failover : ${3:String(O)}
	GeoLocation: ${4:AWS::Route53::RecordSet.GeoLocation(O)}
	HealthCheckId : ${5:String(O)}
	HostedZoneId : ${6:String(O)}
	HostedZoneName : ${7:String(O)}
	MultiValueAnswer : ${8:Boolean(O)}
	Name : ${9:String(R)}
	Region : ${10:String(O)}
	ResourceRecords : [${11:String(O)}]
	SetIdentifier : ${12:String(O)}
	TTL : ${13:String(O)}
	Type : ${14:String(R)}
	Weight : ${15:Integer(O)}
endsnippet

snippet AWS::WAFRegional::XssMatchSet
Type AWS::WAFRegional::XssMatchSet
Properties:
	XssMatchTuples : [${1:AWS::WAFRegional::XssMatchSet.XssMatchTuple(O)}]
	Name : ${2:String(R)}
endsnippet

snippet AWS::WAF::SizeConstraintSet
Type AWS::WAF::SizeConstraintSet
Properties:
	Name : ${1:String(R)}
	SizeConstraints : [${2:AWS::WAF::SizeConstraintSet.SizeConstraint(R)}]
endsnippet

snippet AWS::EC2::NetworkAclEntry
Type AWS::EC2::NetworkAclEntry
Properties:
	CidrBlock : ${1:String(R)}
	Egress : ${2:Boolean(O)}
	Icmp: ${3:AWS::EC2::NetworkAclEntry.Icmp(O)}
	Ipv6CidrBlock : ${4:String(O)}
	NetworkAclId : ${5:String(R)}
	PortRange: ${6:AWS::EC2::NetworkAclEntry.PortRange(O)}
	Protocol : ${7:Integer(R)}
	RuleAction : ${8:String(R)}
	RuleNumber : ${9:Integer(R)}
endsnippet

snippet AWS::CloudWatch::Dashboard
Type AWS::CloudWatch::Dashboard
Properties:
	DashboardName : ${1:String(O)}
	DashboardBody : ${2:String(R)}
endsnippet

snippet AWS::IAM::Policy
Type AWS::IAM::Policy
Properties:
	Groups : [${1:String(O)}]
	PolicyDocument : ${2:Json(R)}
	PolicyName : ${3:String(R)}
	Roles : [${4:String(O)}]
	Users : [${5:String(O)}]
endsnippet

snippet AWS::EC2::InternetGateway
Type AWS::EC2::InternetGateway
Properties:
	Tags : [${1:AWS::EC2::InternetGateway.Tag(O)}]
endsnippet

snippet AWS::ECS::Cluster
Type AWS::ECS::Cluster
Properties:
	ClusterName : ${1:String(O)}
endsnippet

snippet AWS::ElasticLoadBalancingV2::ListenerCertificate
Type AWS::ElasticLoadBalancingV2::ListenerCertificate
Properties:
	Certificates : [${1:AWS::ElasticLoadBalancingV2::ListenerCertificate.Certificate(R)}]
	ListenerArn : ${2:String(R)}
endsnippet

snippet AWS::IAM::Role
Type AWS::IAM::Role
Properties:
	AssumeRolePolicyDocument : ${1:Json(R)}
	ManagedPolicyArns : [${2:String(O)}]
	MaxSessionDuration : ${3:Integer(O)}
	Path : ${4:String(O)}
	PermissionsBoundary : ${5:String(O)}
	Policies : [${6:AWS::IAM::Role.Policy(O)}]
	RoleName : ${7:String(O)}
endsnippet

snippet AWS::StepFunctions::Activity
Type AWS::StepFunctions::Activity
Properties:
	Tags : [${1:AWS::StepFunctions::Activity.TagsEntry(O)}]
	Name : ${2:String(R)}
endsnippet

snippet AWS::EC2::LaunchTemplate
Type AWS::EC2::LaunchTemplate
Properties:
	LaunchTemplateName : ${1:String(O)}
	LaunchTemplateData: ${2:AWS::EC2::LaunchTemplate.LaunchTemplateData(O)}
endsnippet

snippet AWS::OpsWorks::Volume
Type AWS::OpsWorks::Volume
Properties:
	Ec2VolumeId : ${1:String(R)}
	MountPoint : ${2:String(O)}
	Name : ${3:String(O)}
	StackId : ${4:String(R)}
endsnippet

snippet AWS::ServiceCatalog::TagOptionAssociation
Type AWS::ServiceCatalog::TagOptionAssociation
Properties:
	TagOptionId : ${1:String(R)}
	ResourceId : ${2:String(R)}
endsnippet

snippet AWS::AppStream::Stack
Type AWS::AppStream::Stack
Properties:
	ApplicationSettings: ${1:AWS::AppStream::Stack.ApplicationSettings(O)}
	Description : ${2:String(O)}
	StorageConnectors : [${3:AWS::AppStream::Stack.StorageConnector(O)}]
	DeleteStorageConnectors : ${4:Boolean(O)}
	UserSettings : [${5:AWS::AppStream::Stack.UserSetting(O)}]
	AttributesToDelete : [${6:String(O)}]
	DisplayName : ${7:String(O)}
	RedirectURL : ${8:String(O)}
	Tags : [${9:AWS::AppStream::Stack.Tag(O)}]
	Name : ${10:String(O)}
	FeedbackURL : ${11:String(O)}
endsnippet

snippet AWS::EC2::Volume
Type AWS::EC2::Volume
Properties:
	AutoEnableIO : ${1:Boolean(O)}
	AvailabilityZone : ${2:String(R)}
	Encrypted : ${3:Boolean(O)}
	Iops : ${4:Integer(O)}
	KmsKeyId : ${5:String(O)}
	Size : ${6:Integer(O)}
	SnapshotId : ${7:String(O)}
	Tags : [${8:AWS::EC2::Volume.Tag(O)}]
	VolumeType : ${9:String(O)}
endsnippet

snippet AWS::AppSync::GraphQLSchema
Type AWS::AppSync::GraphQLSchema
Properties:
	Definition : ${1:String(O)}
	DefinitionS3Location : ${2:String(O)}
	ApiId : ${3:String(R)}
endsnippet

snippet AWS::EC2::TransitGatewayRouteTableAssociation
Type AWS::EC2::TransitGatewayRouteTableAssociation
Properties:
	TransitGatewayRouteTableId : ${1:String(R)}
	TransitGatewayAttachmentId : ${2:String(R)}
endsnippet

snippet AWS::IAM::ServiceLinkedRole
Type AWS::IAM::ServiceLinkedRole
Properties:
	CustomSuffix : ${1:String(O)}
	Description : ${2:String(O)}
	AWSServiceName : ${3:String(R)}
endsnippet

snippet AWS::ServiceCatalog::LaunchTemplateConstraint
Type AWS::ServiceCatalog::LaunchTemplateConstraint
Properties:
	Description : ${1:String(O)}
	AcceptLanguage : ${2:String(O)}
	PortfolioId : ${3:String(R)}
	ProductId : ${4:String(R)}
	Rules : ${5:String(R)}
endsnippet

snippet AWS::Greengrass::ConnectorDefinitionVersion
Type AWS::Greengrass::ConnectorDefinitionVersion
Properties:
	Connectors : [${1:AWS::Greengrass::ConnectorDefinitionVersion.Connector(R)}]
	ConnectorDefinitionId : ${2:String(R)}
endsnippet

snippet AWS::EMR::Cluster
Type AWS::EMR::Cluster
Properties:
	AdditionalInfo : ${1:Json(O)}
	Applications : [${2:AWS::EMR::Cluster.Application(O)}]
	AutoScalingRole : ${3:String(O)}
	BootstrapActions : [${4:AWS::EMR::Cluster.BootstrapActionConfig(O)}]
	Configurations : [${5:AWS::EMR::Cluster.Configuration(O)}]
	CustomAmiId : ${6:String(O)}
	EbsRootVolumeSize : ${7:Integer(O)}
	Instances: ${8:AWS::EMR::Cluster.JobFlowInstancesConfig(R)}
	JobFlowRole : ${9:String(R)}
	KerberosAttributes: ${10:AWS::EMR::Cluster.KerberosAttributes(O)}
	LogUri : ${11:String(O)}
	Name : ${12:String(R)}
	ReleaseLabel : ${13:String(O)}
	ScaleDownBehavior : ${14:String(O)}
	SecurityConfiguration : ${15:String(O)}
	ServiceRole : ${16:String(R)}
	Steps : [${17:AWS::EMR::Cluster.StepConfig(O)}]
	Tags : [${18:AWS::EMR::Cluster.Tag(O)}]
	VisibleToAllUsers : ${19:Boolean(O)}
endsnippet

snippet AWS::EC2::SpotFleet
Type AWS::EC2::SpotFleet
Properties:
	SpotFleetRequestConfigData: ${1:AWS::EC2::SpotFleet.SpotFleetRequestConfigData(R)}
endsnippet

snippet AWS::CloudFront::StreamingDistribution
Type AWS::CloudFront::StreamingDistribution
Properties:
	StreamingDistributionConfig: ${1:AWS::CloudFront::StreamingDistribution.StreamingDistributionConfig(R)}
	Tags : [${2:AWS::CloudFront::StreamingDistribution.Tag(R)}]
endsnippet

snippet AWS::AppSync::GraphQLApi
Type AWS::AppSync::GraphQLApi
Properties:
	OpenIDConnectConfig: ${1:AWS::AppSync::GraphQLApi.OpenIDConnectConfig(O)}
	UserPoolConfig: ${2:AWS::AppSync::GraphQLApi.UserPoolConfig(O)}
	Name : ${3:String(R)}
	AuthenticationType : ${4:String(R)}
	LogConfig: ${5:AWS::AppSync::GraphQLApi.LogConfig(O)}
endsnippet

snippet AWS::GameLift::Alias
Type AWS::GameLift::Alias
Properties:
	Description : ${1:String(O)}
	Name : ${2:String(R)}
	RoutingStrategy: ${3:AWS::GameLift::Alias.RoutingStrategy(R)}
endsnippet

snippet AWS::GuardDuty::Filter
Type AWS::GuardDuty::Filter
Properties:
	Action : ${1:String(R)}
	Description : ${2:String(R)}
	DetectorId : ${3:String(R)}
	FindingCriteria: ${4:AWS::GuardDuty::Filter.FindingCriteria(R)}
	Rank : ${5:Integer(R)}
	Name : ${6:String(O)}
endsnippet

snippet AWS::EC2::VPNConnectionRoute
Type AWS::EC2::VPNConnectionRoute
Properties:
	DestinationCidrBlock : ${1:String(R)}
	VpnConnectionId : ${2:String(R)}
endsnippet

snippet AWS::WAF::Rule
Type AWS::WAF::Rule
Properties:
	MetricName : ${1:String(R)}
	Name : ${2:String(R)}
	Predicates : [${3:AWS::WAF::Rule.Predicate(O)}]
endsnippet

snippet AWS::DirectoryService::MicrosoftAD
Type AWS::DirectoryService::MicrosoftAD
Properties:
	CreateAlias : ${1:Boolean(O)}
	Edition : ${2:String(O)}
	EnableSso : ${3:Boolean(O)}
	Name : ${4:String(R)}
	Password : ${5:String(R)}
	ShortName : ${6:String(O)}
	VpcSettings: ${7:AWS::DirectoryService::MicrosoftAD.VpcSettings(R)}
endsnippet

snippet AWS::SNS::Subscription
Type AWS::SNS::Subscription
Properties:
	DeliveryPolicy : ${1:Json(O)}
	Endpoint : ${2:String(O)}
	FilterPolicy : ${3:Json(O)}
	Protocol : ${4:String(R)}
	RawMessageDelivery : ${5:Boolean(O)}
	Region : ${6:String(O)}
	TopicArn : ${7:String(R)}
endsnippet

snippet AWS::EFS::MountTarget
Type AWS::EFS::MountTarget
Properties:
	FileSystemId : ${1:String(R)}
	IpAddress : ${2:String(O)}
	SecurityGroups : [${3:String(R)}]
	SubnetId : ${4:String(R)}
endsnippet

snippet AWS::Greengrass::FunctionDefinition
Type AWS::Greengrass::FunctionDefinition
Properties:
	InitialVersion: ${1:AWS::Greengrass::FunctionDefinition.FunctionDefinitionVersion(O)}
	Name : ${2:String(R)}
endsnippet

snippet AWS::SSM::Document
Type AWS::SSM::Document
Properties:
	Content : ${1:Json(R)}
	DocumentType : ${2:String(O)}
	Tags : [${3:AWS::SSM::Document.Tag(O)}]
endsnippet

snippet AWS::Config::DeliveryChannel
Type AWS::Config::DeliveryChannel
Properties:
	ConfigSnapshotDeliveryProperties: ${1:AWS::Config::DeliveryChannel.ConfigSnapshotDeliveryProperties(O)}
	Name : ${2:String(O)}
	S3BucketName : ${3:String(R)}
	S3KeyPrefix : ${4:String(O)}
	SnsTopicARN : ${5:String(O)}
endsnippet

snippet AWS::SNS::Topic
Type AWS::SNS::Topic
Properties:
	DisplayName : ${1:String(O)}
	KmsMasterKeyId : ${2:String(O)}
	Subscription : [${3:AWS::SNS::Topic.Subscription(O)}]
	TopicName : ${4:String(O)}
endsnippet

snippet AWS::EC2::NetworkInterfacePermission
Type AWS::EC2::NetworkInterfacePermission
Properties:
	AwsAccountId : ${1:String(R)}
	NetworkInterfaceId : ${2:String(R)}
	Permission : ${3:String(R)}
endsnippet

snippet AWS::SageMaker::Model
Type AWS::SageMaker::Model
Properties:
	ExecutionRoleArn : ${1:String(R)}
	PrimaryContainer: ${2:AWS::SageMaker::Model.ContainerDefinition(O)}
	ModelName : ${3:String(O)}
	VpcConfig: ${4:AWS::SageMaker::Model.VpcConfig(O)}
	Containers : [${5:AWS::SageMaker::Model.ContainerDefinition(O)}]
	Tags : [${6:AWS::SageMaker::Model.Tag(O)}]
endsnippet

snippet AWS::GameLift::Build
Type AWS::GameLift::Build
Properties:
	Name : ${1:String(O)}
	StorageLocation: ${2:AWS::GameLift::Build.S3Location(O)}
	Version : ${3:String(O)}
endsnippet

snippet AWS::ServiceCatalog::TagOption
Type AWS::ServiceCatalog::TagOption
Properties:
	Active : ${1:Boolean(O)}
	Value : ${2:String(R)}
	Key : ${3:String(R)}
endsnippet

snippet AWS::SageMaker::NotebookInstanceLifecycleConfig
Type AWS::SageMaker::NotebookInstanceLifecycleConfig
Properties:
	OnStart : [${1:AWS::SageMaker::NotebookInstanceLifecycleConfig.NotebookInstanceLifecycleHook(O)}]
	NotebookInstanceLifecycleConfigName : ${2:String(O)}
	OnCreate : [${3:AWS::SageMaker::NotebookInstanceLifecycleConfig.NotebookInstanceLifecycleHook(O)}]
endsnippet

snippet AWS::Cognito::UserPoolGroup
Type AWS::Cognito::UserPoolGroup
Properties:
	GroupName : ${1:String(O)}
	Description : ${2:String(O)}
	UserPoolId : ${3:String(R)}
	Precedence : ${4:Double(O)}
	RoleArn : ${5:String(O)}
endsnippet

snippet AWS::ApiGateway::Deployment
Type AWS::ApiGateway::Deployment
Properties:
	DeploymentCanarySettings: ${1:AWS::ApiGateway::Deployment.DeploymentCanarySettings(O)}
	Description : ${2:String(O)}
	RestApiId : ${3:String(R)}
	StageDescription: ${4:AWS::ApiGateway::Deployment.StageDescription(O)}
	StageName : ${5:String(O)}
endsnippet

snippet AWS::ApiGatewayV2::Integration
Type AWS::ApiGatewayV2::Integration
Properties:
	Description : ${1:String(O)}
	TemplateSelectionExpression : ${2:String(O)}
	ConnectionType : ${3:String(O)}
	IntegrationMethod : ${4:String(O)}
	PassthroughBehavior : ${5:String(O)}
	RequestParameters : ${6:Json(O)}
	IntegrationUri : ${7:String(O)}
	CredentialsArn : ${8:String(O)}
	RequestTemplates : ${9:Json(O)}
	TimeoutInMillis : ${10:Integer(O)}
	ContentHandlingStrategy : ${11:String(O)}
	ApiId : ${12:String(R)}
	IntegrationType : ${13:String(R)}
endsnippet

snippet AWS::KMS::Key
Type AWS::KMS::Key
Properties:
	Description : ${1:String(O)}
	EnableKeyRotation : ${2:Boolean(O)}
	Enabled : ${3:Boolean(O)}
	KeyPolicy : ${4:Json(R)}
	KeyUsage : ${5:String(O)}
	PendingWindowInDays : ${6:Integer(O)}
	Tags : [${7:AWS::KMS::Key.Tag(O)}]
endsnippet

snippet AWS::CloudWatch::Alarm
Type AWS::CloudWatch::Alarm
Properties:
	ActionsEnabled : ${1:Boolean(O)}
	AlarmActions : [${2:String(O)}]
	AlarmDescription : ${3:String(O)}
	AlarmName : ${4:String(O)}
	ComparisonOperator : ${5:String(R)}
	DatapointsToAlarm : ${6:Integer(O)}
	Dimensions : [${7:AWS::CloudWatch::Alarm.Dimension(O)}]
	EvaluateLowSampleCountPercentile : ${8:String(O)}
	EvaluationPeriods : ${9:Integer(R)}
	ExtendedStatistic : ${10:String(O)}
	InsufficientDataActions : [${11:String(O)}]
	MetricName : ${12:String(O)}
	Metrics : [${13:AWS::CloudWatch::Alarm.MetricDataQuery(O)}]
	Namespace : ${14:String(O)}
	OKActions : [${15:String(O)}]
	Period : ${16:Integer(O)}
	Statistic : ${17:String(O)}
	Threshold : ${18:Double(R)}
	TreatMissingData : ${19:String(O)}
	Unit : ${20:String(O)}
endsnippet

snippet AWS::Redshift::Cluster
Type AWS::Redshift::Cluster
Properties:
	AllowVersionUpgrade : ${1:Boolean(O)}
	AutomatedSnapshotRetentionPeriod : ${2:Integer(O)}
	AvailabilityZone : ${3:String(O)}
	ClusterIdentifier : ${4:String(O)}
	ClusterParameterGroupName : ${5:String(O)}
	ClusterSecurityGroups : [${6:String(O)}]
	ClusterSubnetGroupName : ${7:String(O)}
	ClusterType : ${8:String(R)}
	ClusterVersion : ${9:String(O)}
	DBName : ${10:String(R)}
	ElasticIp : ${11:String(O)}
	Encrypted : ${12:Boolean(O)}
	HsmClientCertificateIdentifier : ${13:String(O)}
	HsmConfigurationIdentifier : ${14:String(O)}
	IamRoles : [${15:String(O)}]
	KmsKeyId : ${16:String(O)}
	LoggingProperties: ${17:AWS::Redshift::Cluster.LoggingProperties(O)}
	MasterUserPassword : ${18:String(R)}
	MasterUsername : ${19:String(R)}
	NodeType : ${20:String(R)}
	NumberOfNodes : ${21:Integer(O)}
	OwnerAccount : ${22:String(O)}
	Port : ${23:Integer(O)}
	PreferredMaintenanceWindow : ${24:String(O)}
	PubliclyAccessible : ${25:Boolean(O)}
	SnapshotClusterIdentifier : ${26:String(O)}
	SnapshotIdentifier : ${27:String(O)}
	Tags : [${28:AWS::Redshift::Cluster.Tag(O)}]
	VpcSecurityGroupIds : [${29:String(O)}]
endsnippet

snippet AWS::OpsWorks::App
Type AWS::OpsWorks::App
Properties:
	AppSource: ${1:AWS::OpsWorks::App.Source(O)}
	Attributes : [${2:String(O)}]
	DataSources : [${3:AWS::OpsWorks::App.DataSource(O)}]
	Description : ${4:String(O)}
	Domains : [${5:String(O)}]
	EnableSsl : ${6:Boolean(O)}
	Environment : [${7:AWS::OpsWorks::App.EnvironmentVariable(O)}]
	Name : ${8:String(R)}
	Shortname : ${9:String(O)}
	SslConfiguration: ${10:AWS::OpsWorks::App.SslConfiguration(O)}
	StackId : ${11:String(R)}
	Type : ${12:String(R)}
endsnippet

snippet AWS::Lambda::EventSourceMapping
Type AWS::Lambda::EventSourceMapping
Properties:
	BatchSize : ${1:Integer(O)}
	Enabled : ${2:Boolean(O)}
	EventSourceArn : ${3:String(R)}
	FunctionName : ${4:String(R)}
	StartingPosition : ${5:String(O)}
endsnippet

snippet AWS::CertificateManager::Certificate
Type AWS::CertificateManager::Certificate
Properties:
	DomainName : ${1:String(R)}
	DomainValidationOptions : [${2:AWS::CertificateManager::Certificate.DomainValidationOption(O)}]
	SubjectAlternativeNames : [${3:String(O)}]
	Tags : [${4:AWS::CertificateManager::Certificate.Tag(O)}]
	ValidationMethod : ${5:String(O)}
endsnippet

snippet AWS::Greengrass::SubscriptionDefinitionVersion
Type AWS::Greengrass::SubscriptionDefinitionVersion
Properties:
	SubscriptionDefinitionId : ${1:String(R)}
	Subscriptions : [${2:AWS::Greengrass::SubscriptionDefinitionVersion.Subscription(R)}]
endsnippet

snippet AWS::Greengrass::CoreDefinitionVersion
Type AWS::Greengrass::CoreDefinitionVersion
Properties:
	Cores : [${1:AWS::Greengrass::CoreDefinitionVersion.Core(R)}]
	CoreDefinitionId : ${2:String(R)}
endsnippet

snippet AWS::ApiGateway::Authorizer
Type AWS::ApiGateway::Authorizer
Properties:
	AuthType : ${1:String(O)}
	AuthorizerCredentials : ${2:String(O)}
	AuthorizerResultTtlInSeconds : ${3:Integer(O)}
	AuthorizerUri : ${4:String(O)}
	IdentitySource : ${5:String(O)}
	IdentityValidationExpression : ${6:String(O)}
	Name : ${7:String(O)}
	ProviderARNs : [${8:String(O)}]
	RestApiId : ${9:String(R)}
	Type : ${10:String(R)}
endsnippet

snippet AWS::EC2::EIP
Type AWS::EC2::EIP
Properties:
	Domain : ${1:String(O)}
	InstanceId : ${2:String(O)}
	PublicIpv4Pool : ${3:String(O)}
endsnippet

snippet AWS::Inspector::ResourceGroup
Type AWS::Inspector::ResourceGroup
Properties:
	ResourceGroupTags : [${1:AWS::Inspector::ResourceGroup.Tag(R)}]
endsnippet

snippet AWS::IoT1Click::Project
Type AWS::IoT1Click::Project
Properties:
	Description : ${1:String(O)}
	PlacementTemplate: ${2:AWS::IoT1Click::Project.PlacementTemplate(R)}
	ProjectName : ${3:String(O)}
endsnippet

snippet AWS::IoTAnalytics::Dataset
Type AWS::IoTAnalytics::Dataset
Properties:
	Actions : [${1:AWS::IoTAnalytics::Dataset.Action(R)}]
	DatasetName : ${2:String(O)}
	Triggers : [${3:AWS::IoTAnalytics::Dataset.Trigger(O)}]
	RetentionPeriod: ${4:AWS::IoTAnalytics::Dataset.RetentionPeriod(O)}
	Tags : [${5:AWS::IoTAnalytics::Dataset.Tag(O)}]
endsnippet

snippet AWS::ApiGateway::DomainName
Type AWS::ApiGateway::DomainName
Properties:
	CertificateArn : ${1:String(O)}
	DomainName : ${2:String(R)}
	EndpointConfiguration: ${3:AWS::ApiGateway::DomainName.EndpointConfiguration(O)}
	RegionalCertificateArn : ${4:String(O)}
endsnippet

snippet AWS::Batch::JobDefinition
Type AWS::Batch::JobDefinition
Properties:
	Type : ${1:String(R)}
	Parameters : ${2:Json(O)}
	NodeProperties: ${3:AWS::Batch::JobDefinition.NodeProperties(O)}
	Timeout: ${4:AWS::Batch::JobDefinition.Timeout(O)}
	ContainerProperties: ${5:AWS::Batch::JobDefinition.ContainerProperties(O)}
	JobDefinitionName : ${6:String(O)}
	RetryStrategy: ${7:AWS::Batch::JobDefinition.RetryStrategy(O)}
endsnippet

snippet AWS::ServiceCatalog::PortfolioPrincipalAssociation
Type AWS::ServiceCatalog::PortfolioPrincipalAssociation
Properties:
	PrincipalARN : ${1:String(R)}
	AcceptLanguage : ${2:String(O)}
	PortfolioId : ${3:String(R)}
	PrincipalType : ${4:String(R)}
endsnippet

snippet AWS::GameLift::Fleet
Type AWS::GameLift::Fleet
Properties:
	BuildId : ${1:String(R)}
	Description : ${2:String(O)}
	DesiredEC2Instances : ${3:Integer(R)}
	EC2InboundPermissions : [${4:AWS::GameLift::Fleet.IpPermission(O)}]
	EC2InstanceType : ${5:String(R)}
	LogPaths : [${6:String(O)}]
	MaxSize : ${7:Integer(O)}
	MinSize : ${8:Integer(O)}
	Name : ${9:String(R)}
	ServerLaunchParameters : ${10:String(O)}
	ServerLaunchPath : ${11:String(R)}
endsnippet

snippet AWS::EC2::SecurityGroupIngress
Type AWS::EC2::SecurityGroupIngress
Properties:
	CidrIp : ${1:String(O)}
	CidrIpv6 : ${2:String(O)}
	Description : ${3:String(O)}
	FromPort : ${4:Integer(O)}
	GroupId : ${5:String(O)}
	GroupName : ${6:String(O)}
	IpProtocol : ${7:String(R)}
	SourcePrefixListId : ${8:String(O)}
	SourceSecurityGroupId : ${9:String(O)}
	SourceSecurityGroupName : ${10:String(O)}
	SourceSecurityGroupOwnerId : ${11:String(O)}
	ToPort : ${12:Integer(O)}
endsnippet

snippet AWS::Lambda::LayerVersion
Type AWS::Lambda::LayerVersion
Properties:
	CompatibleRuntimes : [${1:String(O)}]
	LicenseInfo : ${2:String(O)}
	Description : ${3:String(O)}
	LayerName : ${4:String(O)}
	Content: ${5:AWS::Lambda::LayerVersion.Content(R)}
endsnippet

snippet AWS::ApiGateway::DocumentationPart
Type AWS::ApiGateway::DocumentationPart
Properties:
	Location: ${1:AWS::ApiGateway::DocumentationPart.Location(R)}
	Properties : ${2:String(R)}
	RestApiId : ${3:String(R)}
endsnippet

snippet AWS::RDS::DBCluster
Type AWS::RDS::DBCluster
Properties:
	AvailabilityZones : [${1:String(O)}]
	BacktrackWindow : ${2:Long(O)}
	BackupRetentionPeriod : ${3:Integer(O)}
	DBClusterIdentifier : ${4:String(O)}
	DBClusterParameterGroupName : ${5:String(O)}
	DBSubnetGroupName : ${6:String(O)}
	DatabaseName : ${7:String(O)}
	DeletionProtection : ${8:Boolean(O)}
	EnableCloudwatchLogsExports : [${9:String(O)}]
	EnableIAMDatabaseAuthentication : ${10:Boolean(O)}
	Engine : ${11:String(R)}
	EngineMode : ${12:String(O)}
	EngineVersion : ${13:String(O)}
	KmsKeyId : ${14:String(O)}
	MasterUserPassword : ${15:String(O)}
	MasterUsername : ${16:String(O)}
	Port : ${17:Integer(O)}
	PreferredBackupWindow : ${18:String(O)}
	PreferredMaintenanceWindow : ${19:String(O)}
	ReplicationSourceIdentifier : ${20:String(O)}
	ScalingConfiguration: ${21:AWS::RDS::DBCluster.ScalingConfiguration(O)}
	SnapshotIdentifier : ${22:String(O)}
	SourceRegion : ${23:String(O)}
	StorageEncrypted : ${24:Boolean(O)}
	Tags : [${25:AWS::RDS::DBCluster.Tag(O)}]
	VpcSecurityGroupIds : [${26:String(O)}]
endsnippet

snippet AWS::ECS::Service
Type AWS::ECS::Service
Properties:
	Cluster : ${1:String(O)}
	DeploymentConfiguration: ${2:AWS::ECS::Service.DeploymentConfiguration(O)}
	DesiredCount : ${3:Integer(O)}
	HealthCheckGracePeriodSeconds : ${4:Integer(O)}
	LaunchType : ${5:String(O)}
	LoadBalancers : [${6:AWS::ECS::Service.LoadBalancer(O)}]
	NetworkConfiguration: ${7:AWS::ECS::Service.NetworkConfiguration(O)}
	PlacementConstraints : [${8:AWS::ECS::Service.PlacementConstraint(O)}]
	PlacementStrategies : [${9:AWS::ECS::Service.PlacementStrategy(O)}]
	PlatformVersion : ${10:String(O)}
	Role : ${11:String(O)}
	SchedulingStrategy : ${12:String(O)}
	ServiceName : ${13:String(O)}
	ServiceRegistries : [${14:AWS::ECS::Service.ServiceRegistry(O)}]
	TaskDefinition : ${15:String(R)}
endsnippet

snippet AWS::IAM::UserToGroupAddition
Type AWS::IAM::UserToGroupAddition
Properties:
	GroupName : ${1:String(R)}
	Users : [${2:String(R)}]
endsnippet

snippet AWS::RDS::DBSubnetGroup
Type AWS::RDS::DBSubnetGroup
Properties:
	DBSubnetGroupDescription : ${1:String(R)}
	DBSubnetGroupName : ${2:String(O)}
	SubnetIds : [${3:String(R)}]
	Tags : [${4:AWS::RDS::DBSubnetGroup.Tag(O)}]
endsnippet

snippet AWS::OpsWorksCM::Server
Type AWS::OpsWorksCM::Server
Properties:
	KeyPair : ${1:String(O)}
	EngineVersion : ${2:String(O)}
	ServiceRoleArn : ${3:String(R)}
	DisableAutomatedBackup : ${4:Boolean(O)}
	BackupId : ${5:String(O)}
	EngineModel : ${6:String(O)}
	PreferredMaintenanceWindow : ${7:String(O)}
	AssociatePublicIpAddress : ${8:Boolean(O)}
	InstanceProfileArn : ${9:String(R)}
	PreferredBackupWindow : ${10:String(O)}
	SecurityGroupIds : [${11:String(O)}]
	SubnetIds : [${12:String(O)}]
	ServerName : ${13:String(O)}
	EngineAttributes : [${14:AWS::OpsWorksCM::Server.EngineAttribute(O)}]
	BackupRetentionCount : ${15:Integer(O)}
	InstanceType : ${16:String(R)}
	Engine : ${17:String(O)}
endsnippet

snippet AWS::Batch::JobQueue
Type AWS::Batch::JobQueue
Properties:
	ComputeEnvironmentOrder : [${1:AWS::Batch::JobQueue.ComputeEnvironmentOrder(R)}]
	Priority : ${2:Integer(R)}
	State : ${3:String(O)}
	JobQueueName : ${4:String(O)}
endsnippet

snippet AWS::ElasticLoadBalancing::LoadBalancer
Type AWS::ElasticLoadBalancing::LoadBalancer
Properties:
	AccessLoggingPolicy: ${1:AWS::ElasticLoadBalancing::LoadBalancer.AccessLoggingPolicy(O)}
	AppCookieStickinessPolicy : [${2:AWS::ElasticLoadBalancing::LoadBalancer.AppCookieStickinessPolicy(O)}]
	AvailabilityZones : [${3:String(O)}]
	ConnectionDrainingPolicy: ${4:AWS::ElasticLoadBalancing::LoadBalancer.ConnectionDrainingPolicy(O)}
	ConnectionSettings: ${5:AWS::ElasticLoadBalancing::LoadBalancer.ConnectionSettings(O)}
	CrossZone : ${6:Boolean(O)}
	HealthCheck: ${7:AWS::ElasticLoadBalancing::LoadBalancer.HealthCheck(O)}
	Instances : [${8:String(O)}]
	LBCookieStickinessPolicy : [${9:AWS::ElasticLoadBalancing::LoadBalancer.LBCookieStickinessPolicy(O)}]
	Listeners : [${10:AWS::ElasticLoadBalancing::LoadBalancer.Listeners(R)}]
	LoadBalancerName : ${11:String(O)}
	Policies : [${12:AWS::ElasticLoadBalancing::LoadBalancer.Policies(O)}]
	Scheme : ${13:String(O)}
	SecurityGroups : [${14:String(O)}]
	Subnets : [${15:String(O)}]
	Tags : [${16:AWS::ElasticLoadBalancing::LoadBalancer.Tag(O)}]
endsnippet

snippet AWS::IoT::Thing
Type AWS::IoT::Thing
Properties:
	AttributePayload: ${1:AWS::IoT::Thing.AttributePayload(O)}
	ThingName : ${2:String(O)}
endsnippet

snippet AWS::OpsWorks::Layer
Type AWS::OpsWorks::Layer
Properties:
	Attributes : [${1:String(O)}]
	AutoAssignElasticIps : ${2:Boolean(R)}
	AutoAssignPublicIps : ${3:Boolean(R)}
	CustomInstanceProfileArn : ${4:String(O)}
	CustomJson : ${5:Json(O)}
	CustomRecipes: ${6:AWS::OpsWorks::Layer.Recipes(O)}
	CustomSecurityGroupIds : [${7:String(O)}]
	EnableAutoHealing : ${8:Boolean(R)}
	InstallUpdatesOnBoot : ${9:Boolean(O)}
	LifecycleEventConfiguration: ${10:AWS::OpsWorks::Layer.LifecycleEventConfiguration(O)}
	LoadBasedAutoScaling: ${11:AWS::OpsWorks::Layer.LoadBasedAutoScaling(O)}
	Name : ${12:String(R)}
	Packages : [${13:String(O)}]
	Shortname : ${14:String(R)}
	StackId : ${15:String(R)}
	Tags : [${16:AWS::OpsWorks::Layer.Tag(O)}]
	Type : ${17:String(R)}
	UseEbsOptimizedInstances : ${18:Boolean(O)}
	VolumeConfigurations : [${19:AWS::OpsWorks::Layer.VolumeConfiguration(O)}]
endsnippet

snippet AWS::DMS::Certificate
Type AWS::DMS::Certificate
Properties:
	CertificateIdentifier : ${1:String(O)}
	CertificatePem : ${2:String(O)}
	CertificateWallet : ${3:String(O)}
endsnippet

snippet AWS::ApiGateway::ApiKey
Type AWS::ApiGateway::ApiKey
Properties:
	CustomerId : ${1:String(O)}
	Description : ${2:String(O)}
	Enabled : ${3:Boolean(O)}
	GenerateDistinctId : ${4:Boolean(O)}
	Name : ${5:String(O)}
	StageKeys : [${6:AWS::ApiGateway::ApiKey.StageKey(O)}]
	Value : ${7:String(O)}
endsnippet

snippet AWS::Glue::Table
Type AWS::Glue::Table
Properties:
	TableInput: ${1:AWS::Glue::Table.TableInput(R)}
	DatabaseName : ${2:String(R)}
	CatalogId : ${3:String(R)}
endsnippet

snippet AWS::EC2::SubnetRouteTableAssociation
Type AWS::EC2::SubnetRouteTableAssociation
Properties:
	RouteTableId : ${1:String(R)}
	SubnetId : ${2:String(R)}
endsnippet

snippet AWS::IoT::Policy
Type AWS::IoT::Policy
Properties:
	PolicyDocument : ${1:Json(R)}
	PolicyName : ${2:String(O)}
endsnippet

snippet AWS::ApiGatewayV2::Stage
Type AWS::ApiGatewayV2::Stage
Properties:
	ClientCertificateId : ${1:String(O)}
	DeploymentId : ${2:String(R)}
	Description : ${3:String(O)}
	AccessLogSettings: ${4:AWS::ApiGatewayV2::Stage.AccessLogSettings(O)}
	RouteSettings : ${5:Json(O)}
	StageName : ${6:String(R)}
	StageVariables : ${7:Json(O)}
	ApiId : ${8:String(R)}
	DefaultRouteSettings: ${9:AWS::ApiGatewayV2::Stage.RouteSettings(O)}
endsnippet

snippet AWS::ElastiCache::SecurityGroup
Type AWS::ElastiCache::SecurityGroup
Properties:
	Description : ${1:String(R)}
endsnippet

snippet AWS::IAM::InstanceProfile
Type AWS::IAM::InstanceProfile
Properties:
	InstanceProfileName : ${1:String(O)}
	Path : ${2:String(O)}
	Roles : [${3:String(R)}]
endsnippet

snippet AWS::CodeDeploy::DeploymentGroup
Type AWS::CodeDeploy::DeploymentGroup
Properties:
	AlarmConfiguration: ${1:AWS::CodeDeploy::DeploymentGroup.AlarmConfiguration(O)}
	ApplicationName : ${2:String(R)}
	AutoRollbackConfiguration: ${3:AWS::CodeDeploy::DeploymentGroup.AutoRollbackConfiguration(O)}
	AutoScalingGroups : [${4:String(O)}]
	Deployment: ${5:AWS::CodeDeploy::DeploymentGroup.Deployment(O)}
	DeploymentConfigName : ${6:String(O)}
	DeploymentGroupName : ${7:String(O)}
	DeploymentStyle: ${8:AWS::CodeDeploy::DeploymentGroup.DeploymentStyle(O)}
	Ec2TagFilters : [${9:AWS::CodeDeploy::DeploymentGroup.EC2TagFilter(O)}]
	Ec2TagSet: ${10:AWS::CodeDeploy::DeploymentGroup.EC2TagSet(O)}
	LoadBalancerInfo: ${11:AWS::CodeDeploy::DeploymentGroup.LoadBalancerInfo(O)}
	OnPremisesInstanceTagFilters : [${12:AWS::CodeDeploy::DeploymentGroup.TagFilter(O)}]
	OnPremisesTagSet: ${13:AWS::CodeDeploy::DeploymentGroup.OnPremisesTagSet(O)}
	ServiceRoleArn : ${14:String(R)}
	TriggerConfigurations : [${15:AWS::CodeDeploy::DeploymentGroup.TriggerConfig(O)}]
endsnippet

snippet AWS::Batch::ComputeEnvironment
Type AWS::Batch::ComputeEnvironment
Properties:
	Type : ${1:String(R)}
	ServiceRole : ${2:String(R)}
	ComputeEnvironmentName : ${3:String(O)}
	ComputeResources: ${4:AWS::Batch::ComputeEnvironment.ComputeResources(O)}
	State : ${5:String(O)}
endsnippet

snippet AWS::ApiGateway::Model
Type AWS::ApiGateway::Model
Properties:
	ContentType : ${1:String(O)}
	Description : ${2:String(O)}
	Name : ${3:String(O)}
	RestApiId : ${4:String(R)}
	Schema : ${5:Json(O)}
endsnippet

snippet AWS::EC2::Route
Type AWS::EC2::Route
Properties:
	DestinationCidrBlock : ${1:String(O)}
	DestinationIpv6CidrBlock : ${2:String(O)}
	EgressOnlyInternetGatewayId : ${3:String(O)}
	GatewayId : ${4:String(O)}
	InstanceId : ${5:String(O)}
	NatGatewayId : ${6:String(O)}
	NetworkInterfaceId : ${7:String(O)}
	RouteTableId : ${8:String(R)}
	VpcPeeringConnectionId : ${9:String(O)}
endsnippet

snippet AWS::AppStream::DirectoryConfig
Type AWS::AppStream::DirectoryConfig
Properties:
	OrganizationalUnitDistinguishedNames : [${1:String(R)}]
	ServiceAccountCredentials: ${2:AWS::AppStream::DirectoryConfig.ServiceAccountCredentials(R)}
	DirectoryName : ${3:String(R)}
endsnippet

snippet AWS::GuardDuty::ThreatIntelSet
Type AWS::GuardDuty::ThreatIntelSet
Properties:
	Format : ${1:String(R)}
	Activate : ${2:Boolean(R)}
	DetectorId : ${3:String(R)}
	Name : ${4:String(O)}
	Location : ${5:String(R)}
endsnippet

snippet AWS::Logs::MetricFilter
Type AWS::Logs::MetricFilter
Properties:
	FilterPattern : ${1:String(R)}
	LogGroupName : ${2:String(R)}
	MetricTransformations : [${3:AWS::Logs::MetricFilter.MetricTransformation(R)}]
endsnippet

snippet AWS::ApiGateway::Resource
Type AWS::ApiGateway::Resource
Properties:
	ParentId : ${1:String(R)}
	PathPart : ${2:String(R)}
	RestApiId : ${3:String(R)}
endsnippet

snippet AWS::IoT1Click::Device
Type AWS::IoT1Click::Device
Properties:
	DeviceId : ${1:String(R)}
	Enabled : ${2:Boolean(R)}
endsnippet

snippet AWS::Glue::Connection
Type AWS::Glue::Connection
Properties:
	ConnectionInput: ${1:AWS::Glue::Connection.ConnectionInput(R)}
	CatalogId : ${2:String(R)}
endsnippet

snippet AWS::SecretsManager::RotationSchedule
Type AWS::SecretsManager::RotationSchedule
Properties:
	SecretId : ${1:String(R)}
	RotationLambdaARN : ${2:String(O)}
	RotationRules: ${3:AWS::SecretsManager::RotationSchedule.RotationRules(O)}
endsnippet

snippet AWS::EC2::FlowLog
Type AWS::EC2::FlowLog
Properties:
	DeliverLogsPermissionArn : ${1:String(O)}
	LogDestination : ${2:String(O)}
	LogDestinationType : ${3:String(O)}
	LogGroupName : ${4:String(O)}
	ResourceId : ${5:String(R)}
	ResourceType : ${6:String(R)}
	TrafficType : ${7:String(R)}
endsnippet

snippet AWS::Cognito::IdentityPool
Type AWS::Cognito::IdentityPool
Properties:
	PushSync: ${1:AWS::Cognito::IdentityPool.PushSync(O)}
	CognitoIdentityProviders : [${2:AWS::Cognito::IdentityPool.CognitoIdentityProvider(O)}]
	CognitoEvents : ${3:Json(O)}
	DeveloperProviderName : ${4:String(O)}
	CognitoStreams: ${5:AWS::Cognito::IdentityPool.CognitoStreams(O)}
	IdentityPoolName : ${6:String(O)}
	AllowUnauthenticatedIdentities : ${7:Boolean(R)}
	SupportedLoginProviders : ${8:Json(O)}
	SamlProviderARNs : [${9:String(O)}]
	OpenIdConnectProviderARNs : [${10:String(O)}]
endsnippet

snippet AWS::ElasticLoadBalancingV2::LoadBalancer
Type AWS::ElasticLoadBalancingV2::LoadBalancer
Properties:
	IpAddressType : ${1:String(O)}
	LoadBalancerAttributes : [${2:AWS::ElasticLoadBalancingV2::LoadBalancer.LoadBalancerAttribute(O)}]
	Name : ${3:String(O)}
	Scheme : ${4:String(O)}
	SecurityGroups : [${5:String(O)}]
	SubnetMappings : [${6:AWS::ElasticLoadBalancingV2::LoadBalancer.SubnetMapping(O)}]
	Subnets : [${7:String(O)}]
	Tags : [${8:AWS::ElasticLoadBalancingV2::LoadBalancer.Tag(O)}]
	Type : ${9:String(O)}
endsnippet

snippet AWS::IAM::AccessKey
Type AWS::IAM::AccessKey
Properties:
	Serial : ${1:Integer(O)}
	Status : ${2:String(O)}
	UserName : ${3:String(R)}
endsnippet

snippet AWS::ElasticBeanstalk::Application
Type AWS::ElasticBeanstalk::Application
Properties:
	ApplicationName : ${1:String(O)}
	Description : ${2:String(O)}
	ResourceLifecycleConfig: ${3:AWS::ElasticBeanstalk::Application.ApplicationResourceLifecycleConfig(O)}
endsnippet

snippet AWS::AmazonMQ::ConfigurationAssociation
Type AWS::AmazonMQ::ConfigurationAssociation
Properties:
	Broker : ${1:String(R)}
	Configuration: ${2:AWS::AmazonMQ::ConfigurationAssociation.ConfigurationId(R)}
endsnippet

snippet AWS::DMS::ReplicationSubnetGroup
Type AWS::DMS::ReplicationSubnetGroup
Properties:
	ReplicationSubnetGroupDescription : ${1:String(R)}
	ReplicationSubnetGroupIdentifier : ${2:String(O)}
	SubnetIds : [${3:String(R)}]
	Tags : [${4:AWS::DMS::ReplicationSubnetGroup.Tag(O)}]
endsnippet

snippet AWS::ElastiCache::SubnetGroup
Type AWS::ElastiCache::SubnetGroup
Properties:
	CacheSubnetGroupName : ${1:String(O)}
	Description : ${2:String(R)}
	SubnetIds : [${3:String(R)}]
endsnippet

snippet AWS::CodeBuild::Project
Type AWS::CodeBuild::Project
Properties:
	Description : ${1:String(O)}
	VpcConfig: ${2:AWS::CodeBuild::Project.VpcConfig(O)}
	SecondarySources : [${3:AWS::CodeBuild::Project.Source(O)}]
	EncryptionKey : ${4:String(O)}
	Triggers: ${5:AWS::CodeBuild::Project.ProjectTriggers(O)}
	SecondaryArtifacts : [${6:AWS::CodeBuild::Project.Artifacts(O)}]
	Source: ${7:AWS::CodeBuild::Project.Source(R)}
	Name : ${8:String(O)}
	Artifacts: ${9:AWS::CodeBuild::Project.Artifacts(R)}
	BadgeEnabled : ${10:Boolean(O)}
	LogsConfig: ${11:AWS::CodeBuild::Project.LogsConfig(O)}
	ServiceRole : ${12:String(R)}
	QueuedTimeoutInMinutes : ${13:Integer(O)}
	Environment: ${14:AWS::CodeBuild::Project.Environment(R)}
	Tags : [${15:AWS::CodeBuild::Project.Tag(O)}]
	TimeoutInMinutes : ${16:Integer(O)}
	Cache: ${17:AWS::CodeBuild::Project.ProjectCache(O)}
endsnippet

snippet AWS::EC2::TransitGatewayRouteTablePropagation
Type AWS::EC2::TransitGatewayRouteTablePropagation
Properties:
	TransitGatewayRouteTableId : ${1:String(R)}
	TransitGatewayAttachmentId : ${2:String(R)}
endsnippet

snippet AWS::Budgets::Budget
Type AWS::Budgets::Budget
Properties:
	NotificationsWithSubscribers : [${1:AWS::Budgets::Budget.NotificationWithSubscribers(O)}]
	Budget: ${2:AWS::Budgets::Budget.BudgetData(R)}
endsnippet

snippet AWS::SNS::TopicPolicy
Type AWS::SNS::TopicPolicy
Properties:
	PolicyDocument : ${1:Json(R)}
	Topics : [${2:String(R)}]
endsnippet

snippet AWS::Lambda::Alias
Type AWS::Lambda::Alias
Properties:
	Description : ${1:String(O)}
	FunctionName : ${2:String(R)}
	FunctionVersion : ${3:String(R)}
	Name : ${4:String(R)}
	RoutingConfig: ${5:AWS::Lambda::Alias.AliasRoutingConfiguration(O)}
endsnippet

snippet AWS::WAFRegional::ByteMatchSet
Type AWS::WAFRegional::ByteMatchSet
Properties:
	ByteMatchTuples : [${1:AWS::WAFRegional::ByteMatchSet.ByteMatchTuple(O)}]
	Name : ${2:String(R)}
endsnippet

snippet AWS::EC2::SecurityGroupEgress
Type AWS::EC2::SecurityGroupEgress
Properties:
	CidrIp : ${1:String(O)}
	CidrIpv6 : ${2:String(O)}
	Description : ${3:String(O)}
	DestinationPrefixListId : ${4:String(O)}
	DestinationSecurityGroupId : ${5:String(O)}
	FromPort : ${6:Integer(O)}
	GroupId : ${7:String(R)}
	IpProtocol : ${8:String(R)}
	ToPort : ${9:Integer(O)}
endsnippet

snippet AWS::ElasticLoadBalancingV2::Listener
Type AWS::ElasticLoadBalancingV2::Listener
Properties:
	Certificates : [${1:AWS::ElasticLoadBalancingV2::Listener.Certificate(O)}]
	DefaultActions : [${2:AWS::ElasticLoadBalancingV2::Listener.Action(R)}]
	LoadBalancerArn : ${3:String(R)}
	Port : ${4:Integer(R)}
	Protocol : ${5:String(R)}
	SslPolicy : ${6:String(O)}
endsnippet

snippet AWS::EC2::NetworkInterface
Type AWS::EC2::NetworkInterface
Properties:
	Description : ${1:String(O)}
	GroupSet : [${2:String(O)}]
	InterfaceType : ${3:String(O)}
	Ipv6AddressCount : ${4:Integer(O)}
	Ipv6Addresses: ${5:AWS::EC2::NetworkInterface.InstanceIpv6Address(O)}
	PrivateIpAddress : ${6:String(O)}
	PrivateIpAddresses : [${7:AWS::EC2::NetworkInterface.PrivateIpAddressSpecification(O)}]
	SecondaryPrivateIpAddressCount : ${8:Integer(O)}
	SourceDestCheck : ${9:Boolean(O)}
	SubnetId : ${10:String(R)}
	Tags : [${11:AWS::EC2::NetworkInterface.Tag(O)}]
endsnippet

snippet AWS::ApiGatewayV2::Deployment
Type AWS::ApiGatewayV2::Deployment
Properties:
	Description : ${1:String(O)}
	StageName : ${2:String(O)}
	ApiId : ${3:String(R)}
endsnippet

snippet AWS::DAX::SubnetGroup
Type AWS::DAX::SubnetGroup
Properties:
	Description : ${1:String(O)}
	SubnetGroupName : ${2:String(O)}
	SubnetIds : [${3:String(R)}]
endsnippet

snippet AWS::Lambda::LayerVersionPermission
Type AWS::Lambda::LayerVersionPermission
Properties:
	Action : ${1:String(R)}
	LayerVersionArn : ${2:String(R)}
	OrganizationId : ${3:String(O)}
	Principal : ${4:String(R)}
endsnippet

snippet AWS::SageMaker::EndpointConfig
Type AWS::SageMaker::EndpointConfig
Properties:
	ProductionVariants : [${1:AWS::SageMaker::EndpointConfig.ProductionVariant(R)}]
	KmsKeyId : ${2:String(O)}
	EndpointConfigName : ${3:String(O)}
	Tags : [${4:AWS::SageMaker::EndpointConfig.Tag(O)}]
endsnippet

snippet AWS::OpsWorks::Stack
Type AWS::OpsWorks::Stack
Properties:
	AgentVersion : ${1:String(O)}
	Attributes : [${2:String(O)}]
	ChefConfiguration: ${3:AWS::OpsWorks::Stack.ChefConfiguration(O)}
	CloneAppIds : [${4:String(O)}]
	ClonePermissions : ${5:Boolean(O)}
	ConfigurationManager: ${6:AWS::OpsWorks::Stack.StackConfigurationManager(O)}
	CustomCookbooksSource: ${7:AWS::OpsWorks::Stack.Source(O)}
	CustomJson : ${8:Json(O)}
	DefaultAvailabilityZone : ${9:String(O)}
	DefaultInstanceProfileArn : ${10:String(R)}
	DefaultOs : ${11:String(O)}
	DefaultRootDeviceType : ${12:String(O)}
	DefaultSshKeyName : ${13:String(O)}
	DefaultSubnetId : ${14:String(O)}
	EcsClusterArn : ${15:String(O)}
	ElasticIps : [${16:AWS::OpsWorks::Stack.ElasticIp(O)}]
	HostnameTheme : ${17:String(O)}
	Name : ${18:String(R)}
	RdsDbInstances : [${19:AWS::OpsWorks::Stack.RdsDbInstance(O)}]
	ServiceRoleArn : ${20:String(R)}
	SourceStackId : ${21:String(O)}
	Tags : [${22:AWS::OpsWorks::Stack.Tag(O)}]
	UseCustomCookbooks : ${23:Boolean(O)}
	UseOpsworksSecurityGroups : ${24:Boolean(O)}
	VpcId : ${25:String(O)}
endsnippet

snippet AWS::DataPipeline::Pipeline
Type AWS::DataPipeline::Pipeline
Properties:
	Activate : ${1:Boolean(O)}
	Description : ${2:String(O)}
	Name : ${3:String(R)}
	ParameterObjects : [${4:AWS::DataPipeline::Pipeline.ParameterObject(R)}]
	ParameterValues : [${5:AWS::DataPipeline::Pipeline.ParameterValue(O)}]
	PipelineObjects : [${6:AWS::DataPipeline::Pipeline.PipelineObject(O)}]
	PipelineTags : [${7:AWS::DataPipeline::Pipeline.PipelineTag(O)}]
endsnippet

snippet AWS::Greengrass::DeviceDefinition
Type AWS::Greengrass::DeviceDefinition
Properties:
	InitialVersion: ${1:AWS::Greengrass::DeviceDefinition.DeviceDefinitionVersion(O)}
	Name : ${2:String(R)}
endsnippet

snippet AWS::StepFunctions::StateMachine
Type AWS::StepFunctions::StateMachine
Properties:
	DefinitionString : ${1:String(R)}
	StateMachineName : ${2:String(O)}
	RoleArn : ${3:String(R)}
	Tags : [${4:AWS::StepFunctions::StateMachine.TagsEntry(O)}]
endsnippet

snippet AWS::DMS::EventSubscription
Type AWS::DMS::EventSubscription
Properties:
	SourceType : ${1:String(O)}
	EventCategories : [${2:String(O)}]
	Enabled : ${3:Boolean(O)}
	SubscriptionName : ${4:String(O)}
	SnsTopicArn : ${5:String(R)}
	SourceIds : [${6:String(O)}]
	Tags : [${7:AWS::DMS::EventSubscription.Tag(O)}]
endsnippet

snippet AWS::CodeDeploy::DeploymentConfig
Type AWS::CodeDeploy::DeploymentConfig
Properties:
	DeploymentConfigName : ${1:String(O)}
	MinimumHealthyHosts: ${2:AWS::CodeDeploy::DeploymentConfig.MinimumHealthyHosts(O)}
endsnippet

snippet AWS::Route53Resolver::ResolverRule
Type AWS::Route53Resolver::ResolverRule
Properties:
	ResolverEndpointId : ${1:String(O)}
	DomainName : ${2:String(R)}
	RuleType : ${3:String(R)}
	TargetIps : [${4:AWS::Route53Resolver::ResolverRule.TargetAddress(O)}]
	Tags : [${5:AWS::Route53Resolver::ResolverRule.Tag(O)}]
	Name : ${6:String(O)}
endsnippet

snippet AWS::EC2::TransitGatewayAttachment
Type AWS::EC2::TransitGatewayAttachment
Properties:
	TransitGatewayId : ${1:String(R)}
	VpcId : ${2:String(R)}
	SubnetIds : [${3:String(R)}]
	Tags : [${4:AWS::EC2::TransitGatewayAttachment.Tag(O)}]
endsnippet

snippet AWS::DAX::ParameterGroup
Type AWS::DAX::ParameterGroup
Properties:
	ParameterNameValues : ${1:Json(O)}
	Description : ${2:String(O)}
	ParameterGroupName : ${3:String(O)}
endsnippet

snippet AWS::EC2::SubnetNetworkAclAssociation
Type AWS::EC2::SubnetNetworkAclAssociation
Properties:
	NetworkAclId : ${1:String(R)}
	SubnetId : ${2:String(R)}
endsnippet

snippet AWS::Config::ConfigurationAggregator
Type AWS::Config::ConfigurationAggregator
Properties:
	AccountAggregationSources : [${1:AWS::Config::ConfigurationAggregator.AccountAggregationSource(O)}]
	ConfigurationAggregatorName : ${2:String(R)}
	OrganizationAggregationSource: ${3:AWS::Config::ConfigurationAggregator.OrganizationAggregationSource(O)}
endsnippet

snippet AWS::ApiGateway::Account
Type AWS::ApiGateway::Account
Properties:
	CloudWatchRoleArn : ${1:String(O)}
endsnippet

snippet AWS::CloudFront::Distribution
Type AWS::CloudFront::Distribution
Properties:
	DistributionConfig: ${1:AWS::CloudFront::Distribution.DistributionConfig(R)}
	Tags : [${2:AWS::CloudFront::Distribution.Tag(O)}]
endsnippet

snippet AWS::Redshift::ClusterParameterGroup
Type AWS::Redshift::ClusterParameterGroup
Properties:
	Description : ${1:String(R)}
	ParameterGroupFamily : ${2:String(R)}
	Parameters : [${3:AWS::Redshift::ClusterParameterGroup.Parameter(O)}]
	Tags : [${4:AWS::Redshift::ClusterParameterGroup.Tag(O)}]
endsnippet

snippet AWS::Greengrass::LoggerDefinition
Type AWS::Greengrass::LoggerDefinition
Properties:
	InitialVersion: ${1:AWS::Greengrass::LoggerDefinition.LoggerDefinitionVersion(O)}
	Name : ${2:String(R)}
endsnippet

snippet AWS::CloudTrail::Trail
Type AWS::CloudTrail::Trail
Properties:
	CloudWatchLogsLogGroupArn : ${1:String(O)}
	CloudWatchLogsRoleArn : ${2:String(O)}
	EnableLogFileValidation : ${3:Boolean(O)}
	EventSelectors : [${4:AWS::CloudTrail::Trail.EventSelector(O)}]
	IncludeGlobalServiceEvents : ${5:Boolean(O)}
	IsLogging : ${6:Boolean(R)}
	IsMultiRegionTrail : ${7:Boolean(O)}
	KMSKeyId : ${8:String(O)}
	S3BucketName : ${9:String(R)}
	S3KeyPrefix : ${10:String(O)}
	SnsTopicName : ${11:String(O)}
	Tags : [${12:AWS::CloudTrail::Trail.Tag(O)}]
	TrailName : ${13:String(O)}
endsnippet

snippet AWS::ServiceCatalog::CloudFormationProvisionedProduct
Type AWS::ServiceCatalog::CloudFormationProvisionedProduct
Properties:
	PathId : ${1:String(O)}
	ProvisioningParameters : [${2:AWS::ServiceCatalog::CloudFormationProvisionedProduct.ProvisioningParameter(O)}]
	ProductName : ${3:String(O)}
	ProvisioningArtifactName : ${4:String(O)}
	NotificationArns : [${5:String(O)}]
	AcceptLanguage : ${6:String(O)}
	ProductId : ${7:String(O)}
	Tags : [${8:AWS::ServiceCatalog::CloudFormationProvisionedProduct.Tag(O)}]
	ProvisionedProductName : ${9:String(O)}
	ProvisioningArtifactId : ${10:String(O)}
endsnippet

snippet AWS::ServiceCatalog::LaunchRoleConstraint
Type AWS::ServiceCatalog::LaunchRoleConstraint
Properties:
	Description : ${1:String(O)}
	AcceptLanguage : ${2:String(O)}
	PortfolioId : ${3:String(R)}
	ProductId : ${4:String(R)}
	RoleArn : ${5:String(R)}
endsnippet

snippet AWS::EC2::SubnetCidrBlock
Type AWS::EC2::SubnetCidrBlock
Properties:
	Ipv6CidrBlock : ${1:String(R)}
	SubnetId : ${2:String(R)}
endsnippet

snippet AWS::EMR::InstanceGroupConfig
Type AWS::EMR::InstanceGroupConfig
Properties:
	AutoScalingPolicy: ${1:AWS::EMR::InstanceGroupConfig.AutoScalingPolicy(O)}
	BidPrice : ${2:String(O)}
	Configurations : [${3:AWS::EMR::InstanceGroupConfig.Configuration(O)}]
	EbsConfiguration: ${4:AWS::EMR::InstanceGroupConfig.EbsConfiguration(O)}
	InstanceCount : ${5:Integer(R)}
	InstanceRole : ${6:String(R)}
	InstanceType : ${7:String(R)}
	JobFlowId : ${8:String(R)}
	Market : ${9:String(O)}
	Name : ${10:String(O)}
endsnippet

snippet AWS::ElasticLoadBalancingV2::ListenerRule
Type AWS::ElasticLoadBalancingV2::ListenerRule
Properties:
	Actions : [${1:AWS::ElasticLoadBalancingV2::ListenerRule.Action(R)}]
	Conditions : [${2:AWS::ElasticLoadBalancingV2::ListenerRule.RuleCondition(R)}]
	ListenerArn : ${3:String(R)}
	Priority : ${4:Integer(R)}
endsnippet

snippet AWS::AutoScaling::LifecycleHook
Type AWS::AutoScaling::LifecycleHook
Properties:
	AutoScalingGroupName : ${1:String(R)}
	DefaultResult : ${2:String(O)}
	HeartbeatTimeout : ${3:Integer(O)}
	LifecycleHookName : ${4:String(O)}
	LifecycleTransition : ${5:String(R)}
	NotificationMetadata : ${6:String(O)}
	NotificationTargetARN : ${7:String(O)}
	RoleARN : ${8:String(O)}
endsnippet

snippet AWS::CodePipeline::Pipeline
Type AWS::CodePipeline::Pipeline
Properties:
	ArtifactStore: ${1:AWS::CodePipeline::Pipeline.ArtifactStore(O)}
	ArtifactStores : [${2:AWS::CodePipeline::Pipeline.ArtifactStoreMap(O)}]
	DisableInboundStageTransitions : [${3:AWS::CodePipeline::Pipeline.StageTransition(O)}]
	Name : ${4:String(O)}
	RestartExecutionOnUpdate : ${5:Boolean(O)}
	RoleArn : ${6:String(R)}
	Stages : [${7:AWS::CodePipeline::Pipeline.StageDeclaration(R)}]
endsnippet

snippet AWS::Redshift::ClusterSecurityGroupIngress
Type AWS::Redshift::ClusterSecurityGroupIngress
Properties:
	CIDRIP : ${1:String(O)}
	ClusterSecurityGroupName : ${2:String(R)}
	EC2SecurityGroupName : ${3:String(O)}
	EC2SecurityGroupOwnerId : ${4:String(O)}
endsnippet

snippet AWS::EC2::NatGateway
Type AWS::EC2::NatGateway
Properties:
	AllocationId : ${1:String(R)}
	SubnetId : ${2:String(R)}
	Tags : [${3:AWS::EC2::NatGateway.Tag(O)}]
endsnippet

snippet AWS::RDS::OptionGroup
Type AWS::RDS::OptionGroup
Properties:
	EngineName : ${1:String(R)}
	MajorEngineVersion : ${2:String(R)}
	OptionConfigurations : [${3:AWS::RDS::OptionGroup.OptionConfiguration(R)}]
	OptionGroupDescription : ${4:String(R)}
	Tags : [${5:AWS::RDS::OptionGroup.Tag(O)}]
endsnippet

snippet AWS::ElastiCache::SecurityGroupIngress
Type AWS::ElastiCache::SecurityGroupIngress
Properties:
	CacheSecurityGroupName : ${1:String(R)}
	EC2SecurityGroupName : ${2:String(R)}
	EC2SecurityGroupOwnerId : ${3:String(O)}
endsnippet

snippet AWS::IoT::TopicRule
Type AWS::IoT::TopicRule
Properties:
	RuleName : ${1:String(O)}
	TopicRulePayload: ${2:AWS::IoT::TopicRule.TopicRulePayload(R)}
endsnippet

snippet AWS::OpsWorks::ElasticLoadBalancerAttachment
Type AWS::OpsWorks::ElasticLoadBalancerAttachment
Properties:
	ElasticLoadBalancerName : ${1:String(R)}
	LayerId : ${2:String(R)}
endsnippet

snippet AWS::ElastiCache::ReplicationGroup
Type AWS::ElastiCache::ReplicationGroup
Properties:
	AtRestEncryptionEnabled : ${1:Boolean(O)}
	AuthToken : ${2:String(O)}
	AutoMinorVersionUpgrade : ${3:Boolean(O)}
	AutomaticFailoverEnabled : ${4:Boolean(O)}
	CacheNodeType : ${5:String(O)}
	CacheParameterGroupName : ${6:String(O)}
	CacheSecurityGroupNames : [${7:String(O)}]
	CacheSubnetGroupName : ${8:String(O)}
	Engine : ${9:String(O)}
	EngineVersion : ${10:String(O)}
	NodeGroupConfiguration : [${11:AWS::ElastiCache::ReplicationGroup.NodeGroupConfiguration(O)}]
	NotificationTopicArn : ${12:String(O)}
	NumCacheClusters : ${13:Integer(O)}
	NumNodeGroups : ${14:Integer(O)}
	Port : ${15:Integer(O)}
	PreferredCacheClusterAZs : [${16:String(O)}]
	PreferredMaintenanceWindow : ${17:String(O)}
	PrimaryClusterId : ${18:String(O)}
	ReplicasPerNodeGroup : ${19:Integer(O)}
	ReplicationGroupDescription : ${20:String(R)}
	ReplicationGroupId : ${21:String(O)}
	SecurityGroupIds : [${22:String(O)}]
	SnapshotArns : [${23:String(O)}]
	SnapshotName : ${24:String(O)}
	SnapshotRetentionLimit : ${25:Integer(O)}
	SnapshotWindow : ${26:String(O)}
	SnapshottingClusterId : ${27:String(O)}
	Tags : [${28:AWS::ElastiCache::ReplicationGroup.Tag(O)}]
	TransitEncryptionEnabled : ${29:Boolean(O)}
endsnippet

snippet AWS::Cognito::UserPoolUser
Type AWS::Cognito::UserPoolUser
Properties:
	ValidationData : [${1:AWS::Cognito::UserPoolUser.AttributeType(O)}]
	UserPoolId : ${2:String(R)}
	Username : ${3:String(O)}
	MessageAction : ${4:String(O)}
	DesiredDeliveryMediums : [${5:String(O)}]
	ForceAliasCreation : ${6:Boolean(O)}
	UserAttributes : [${7:AWS::Cognito::UserPoolUser.AttributeType(O)}]
endsnippet

snippet AWS::WAFRegional::WebACLAssociation
Type AWS::WAFRegional::WebACLAssociation
Properties:
	ResourceArn : ${1:String(R)}
	WebACLId : ${2:String(R)}
endsnippet

snippet AWS::ApiGatewayV2::Model
Type AWS::ApiGatewayV2::Model
Properties:
	Description : ${1:String(O)}
	ContentType : ${2:String(O)}
	Schema : ${3:Json(R)}
	ApiId : ${4:String(R)}
	Name : ${5:String(R)}
endsnippet

snippet AWS::ServiceCatalog::CloudFormationProduct
Type AWS::ServiceCatalog::CloudFormationProduct
Properties:
	Owner : ${1:String(R)}
	SupportDescription : ${2:String(O)}
	Description : ${3:String(O)}
	Distributor : ${4:String(O)}
	SupportEmail : ${5:String(O)}
	AcceptLanguage : ${6:String(O)}
	SupportUrl : ${7:String(O)}
	Tags : [${8:AWS::ServiceCatalog::CloudFormationProduct.Tag(O)}]
	Name : ${9:String(R)}
	ProvisioningArtifactParameters : [${10:AWS::ServiceCatalog::CloudFormationProduct.ProvisioningArtifactProperties(R)}]
endsnippet

snippet AWS::AppSync::FunctionConfiguration
Type AWS::AppSync::FunctionConfiguration
Properties:
	ResponseMappingTemplateS3Location : ${1:String(O)}
	Description : ${2:String(O)}
	DataSourceName : ${3:String(O)}
	RequestMappingTemplate : ${4:String(O)}
	ResponseMappingTemplate : ${5:String(O)}
	FunctionVersion : ${6:String(O)}
	RequestMappingTemplateS3Location : ${7:String(O)}
	ApiId : ${8:String(R)}
	Name : ${9:String(O)}
endsnippet

snippet AWS::IoTAnalytics::Channel
Type AWS::IoTAnalytics::Channel
Properties:
	ChannelName : ${1:String(O)}
	RetentionPeriod: ${2:AWS::IoTAnalytics::Channel.RetentionPeriod(O)}
	Tags : [${3:AWS::IoTAnalytics::Channel.Tag(O)}]
endsnippet

snippet AWS::CloudFormation::WaitCondition
Type AWS::CloudFormation::WaitCondition
Properties:
	Count : ${1:Integer(O)}
	Handle : ${2:String(O)}
	Timeout : ${3:String(O)}
endsnippet

snippet AWS::EC2::SecurityGroup
Type AWS::EC2::SecurityGroup
Properties:
	GroupDescription : ${1:String(R)}
	GroupName : ${2:String(O)}
	SecurityGroupEgress : [${3:AWS::EC2::SecurityGroup.Egress(O)}]
	SecurityGroupIngress : [${4:AWS::EC2::SecurityGroup.Ingress(O)}]
	Tags : [${5:AWS::EC2::SecurityGroup.Tag(O)}]
	VpcId : ${6:String(O)}
endsnippet

snippet AWS::WAFRegional::WebACL
Type AWS::WAFRegional::WebACL
Properties:
	MetricName : ${1:String(R)}
	DefaultAction: ${2:AWS::WAFRegional::WebACL.Action(R)}
	Rules : [${3:AWS::WAFRegional::WebACL.Rule(O)}]
	Name : ${4:String(R)}
endsnippet

snippet AWS::WAFRegional::Rule
Type AWS::WAFRegional::Rule
Properties:
	MetricName : ${1:String(R)}
	Predicates : [${2:AWS::WAFRegional::Rule.Predicate(O)}]
	Name : ${3:String(R)}
endsnippet

snippet AWS::CloudFront::CloudFrontOriginAccessIdentity
Type AWS::CloudFront::CloudFrontOriginAccessIdentity
Properties:
	CloudFrontOriginAccessIdentityConfig: ${1:AWS::CloudFront::CloudFrontOriginAccessIdentity.CloudFrontOriginAccessIdentityConfig(R)}
endsnippet

snippet AWS::SageMaker::Endpoint
Type AWS::SageMaker::Endpoint
Properties:
	EndpointName : ${1:String(O)}
	EndpointConfigName : ${2:String(R)}
	Tags : [${3:AWS::SageMaker::Endpoint.Tag(O)}]
endsnippet

snippet AWS::AppSync::ApiKey
Type AWS::AppSync::ApiKey
Properties:
	Description : ${1:String(O)}
	Expires : ${2:Double(O)}
	ApiId : ${3:String(R)}
endsnippet

snippet AWS::Route53::HostedZone
Type AWS::Route53::HostedZone
Properties:
	HostedZoneConfig: ${1:AWS::Route53::HostedZone.HostedZoneConfig(O)}
	HostedZoneTags : [${2:AWS::Route53::HostedZone.HostedZoneTag(O)}]
	Name : ${3:String(R)}
	QueryLoggingConfig: ${4:AWS::Route53::HostedZone.QueryLoggingConfig(O)}
	VPCs : [${5:AWS::Route53::HostedZone.VPC(O)}]
endsnippet

snippet AWS::ApiGateway::RestApi
Type AWS::ApiGateway::RestApi
Properties:
	ApiKeySourceType : ${1:String(O)}
	BinaryMediaTypes : [${2:String(O)}]
	Body : ${3:Json(O)}
	BodyS3Location: ${4:AWS::ApiGateway::RestApi.S3Location(O)}
	CloneFrom : ${5:String(O)}
	Description : ${6:String(O)}
	EndpointConfiguration: ${7:AWS::ApiGateway::RestApi.EndpointConfiguration(O)}
	FailOnWarnings : ${8:Boolean(O)}
	MinimumCompressionSize : ${9:Integer(O)}
	Name : ${10:String(O)}
	Parameters : [${11:String(O)}]
	Policy : ${12:Json(O)}
endsnippet

snippet AWS::EC2::Subnet
Type AWS::EC2::Subnet
Properties:
	AssignIpv6AddressOnCreation : ${1:Boolean(O)}
	AvailabilityZone : ${2:String(O)}
	CidrBlock : ${3:String(R)}
	Ipv6CidrBlock : ${4:String(O)}
	MapPublicIpOnLaunch : ${5:Boolean(O)}
	Tags : [${6:AWS::EC2::Subnet.Tag(O)}]
	VpcId : ${7:String(R)}
endsnippet

snippet AWS::CodeDeploy::Application
Type AWS::CodeDeploy::Application
Properties:
	ApplicationName : ${1:String(O)}
	ComputePlatform : ${2:String(O)}
endsnippet

snippet AWS::ServiceCatalog::PortfolioProductAssociation
Type AWS::ServiceCatalog::PortfolioProductAssociation
Properties:
	SourcePortfolioId : ${1:String(O)}
	AcceptLanguage : ${2:String(O)}
	PortfolioId : ${3:String(R)}
	ProductId : ${4:String(R)}
endsnippet

snippet AWS::EC2::VPC
Type AWS::EC2::VPC
Properties:
	CidrBlock : ${1:String(R)}
	EnableDnsHostnames : ${2:Boolean(O)}
	EnableDnsSupport : ${3:Boolean(O)}
	InstanceTenancy : ${4:String(O)}
	Tags : [${5:AWS::EC2::VPC.Tag(O)}]
endsnippet

snippet AWS::ServiceDiscovery::Instance
Type AWS::ServiceDiscovery::Instance
Properties:
	InstanceAttributes : ${1:Map(R)}
	InstanceId : ${2:String(O)}
	ServiceId : ${3:String(R)}
endsnippet

snippet AWS::EC2::Instance
Type AWS::EC2::Instance
Properties:
	AdditionalInfo : ${1:String(O)}
	Affinity : ${2:String(O)}
	AvailabilityZone : ${3:String(O)}
	BlockDeviceMappings : [${4:AWS::EC2::Instance.BlockDeviceMapping(O)}]
	CreditSpecification: ${5:AWS::EC2::Instance.CreditSpecification(O)}
	DisableApiTermination : ${6:Boolean(O)}
	EbsOptimized : ${7:Boolean(O)}
	ElasticGpuSpecifications : [${8:AWS::EC2::Instance.ElasticGpuSpecification(O)}]
	ElasticInferenceAccelerators : [${9:AWS::EC2::Instance.ElasticInferenceAccelerator(O)}]
	HostId : ${10:String(O)}
	IamInstanceProfile : ${11:String(O)}
	ImageId : ${12:String(O)}
	InstanceInitiatedShutdownBehavior : ${13:String(O)}
	InstanceType : ${14:String(O)}
	Ipv6AddressCount : ${15:Integer(O)}
	Ipv6Addresses : [${16:AWS::EC2::Instance.InstanceIpv6Address(O)}]
	KernelId : ${17:String(O)}
	KeyName : ${18:String(O)}
	LaunchTemplate: ${19:AWS::EC2::Instance.LaunchTemplateSpecification(O)}
	LicenseSpecifications : [${20:AWS::EC2::Instance.LicenseSpecification(O)}]
	Monitoring : ${21:Boolean(O)}
	NetworkInterfaces : [${22:AWS::EC2::Instance.NetworkInterface(O)}]
	PlacementGroupName : ${23:String(O)}
	PrivateIpAddress : ${24:String(O)}
	RamdiskId : ${25:String(O)}
	SecurityGroupIds : [${26:String(O)}]
	SecurityGroups : [${27:String(O)}]
	SourceDestCheck : ${28:Boolean(O)}
	SsmAssociations : [${29:AWS::EC2::Instance.SsmAssociation(O)}]
	SubnetId : ${30:String(O)}
	Tags : [${31:AWS::EC2::Instance.Tag(O)}]
	Tenancy : ${32:String(O)}
	UserData : ${33:String(O)}
	Volumes : [${34:AWS::EC2::Instance.Volume(O)}]
endsnippet

snippet AWS::Events::EventBusPolicy
Type AWS::Events::EventBusPolicy
Properties:
	Condition: ${1:AWS::Events::EventBusPolicy.Condition(O)}
	Action : ${2:String(R)}
	StatementId : ${3:String(R)}
	Principal : ${4:String(R)}
endsnippet

snippet AWS::CloudFormation::Stack
Type AWS::CloudFormation::Stack
Properties:
	NotificationARNs : [${1:String(O)}]
	Parameters : [${2:String(O)}]
	Tags : [${3:AWS::CloudFormation::Stack.Tag(O)}]
	TemplateURL : ${4:String(R)}
	TimeoutInMinutes : ${5:Integer(O)}
endsnippet

snippet AWS::Config::AggregationAuthorization
Type AWS::Config::AggregationAuthorization
Properties:
	AuthorizedAccountId : ${1:String(R)}
	AuthorizedAwsRegion : ${2:String(R)}
endsnippet

snippet AWS::WAF::ByteMatchSet
Type AWS::WAF::ByteMatchSet
Properties:
	ByteMatchTuples : [${1:AWS::WAF::ByteMatchSet.ByteMatchTuple(O)}]
	Name : ${2:String(R)}
endsnippet

snippet AWS::ElastiCache::ParameterGroup
Type AWS::ElastiCache::ParameterGroup
Properties:
	CacheParameterGroupFamily : ${1:String(R)}
	Description : ${2:String(R)}
	Properties : [${3:String(O)}]
endsnippet

snippet AWS::SQS::QueuePolicy
Type AWS::SQS::QueuePolicy
Properties:
	PolicyDocument : ${1:Json(R)}
	Queues : [${2:String(R)}]
endsnippet

snippet AWS::DAX::Cluster
Type AWS::DAX::Cluster
Properties:
	SSESpecification: ${1:AWS::DAX::Cluster.SSESpecification(O)}
	Description : ${2:String(O)}
	ReplicationFactor : ${3:Integer(R)}
	ParameterGroupName : ${4:String(O)}
	AvailabilityZones : [${5:String(O)}]
	IAMRoleARN : ${6:String(R)}
	SubnetGroupName : ${7:String(O)}
	PreferredMaintenanceWindow : ${8:String(O)}
	NotificationTopicARN : ${9:String(O)}
	SecurityGroupIds : [${10:String(O)}]
	NodeType : ${11:String(R)}
	ClusterName : ${12:String(O)}
	Tags : ${13:Json(O)}
endsnippet

snippet AWS::ApplicationAutoScaling::ScalingPolicy
Type AWS::ApplicationAutoScaling::ScalingPolicy
Properties:
	PolicyName : ${1:String(R)}
	PolicyType : ${2:String(R)}
	ResourceId : ${3:String(O)}
	ScalableDimension : ${4:String(O)}
	ScalingTargetId : ${5:String(O)}
	ServiceNamespace : ${6:String(O)}
	StepScalingPolicyConfiguration: ${7:AWS::ApplicationAutoScaling::ScalingPolicy.StepScalingPolicyConfiguration(O)}
	TargetTrackingScalingPolicyConfiguration: ${8:AWS::ApplicationAutoScaling::ScalingPolicy.TargetTrackingScalingPolicyConfiguration(O)}
endsnippet

snippet AWS::EFS::FileSystem
Type AWS::EFS::FileSystem
Properties:
	Encrypted : ${1:Boolean(O)}
	FileSystemTags : [${2:AWS::EFS::FileSystem.ElasticFileSystemTag(O)}]
	KmsKeyId : ${3:String(O)}
	PerformanceMode : ${4:String(O)}
	ProvisionedThroughputInMibps : ${5:Double(O)}
	ThroughputMode : ${6:String(O)}
endsnippet

snippet AWS::WAF::SqlInjectionMatchSet
Type AWS::WAF::SqlInjectionMatchSet
Properties:
	Name : ${1:String(R)}
	SqlInjectionMatchTuples : [${2:AWS::WAF::SqlInjectionMatchSet.SqlInjectionMatchTuple(O)}]
endsnippet

snippet AWS::SecretsManager::Secret
Type AWS::SecretsManager::Secret
Properties:
	Description : ${1:String(O)}
	KmsKeyId : ${2:String(O)}
	SecretString : ${3:String(O)}
	GenerateSecretString: ${4:AWS::SecretsManager::Secret.GenerateSecretString(O)}
	Tags : [${5:AWS::SecretsManager::Secret.Tag(O)}]
	Name : ${6:String(O)}
endsnippet

snippet AWS::SSM::PatchBaseline
Type AWS::SSM::PatchBaseline
Properties:
	OperatingSystem : ${1:String(O)}
	Description : ${2:String(O)}
	ApprovalRules: ${3:AWS::SSM::PatchBaseline.RuleGroup(O)}
	Sources : [${4:AWS::SSM::PatchBaseline.PatchSource(O)}]
	Name : ${5:String(R)}
	RejectedPatches : [${6:String(O)}]
	ApprovedPatches : [${7:String(O)}]
	RejectedPatchesAction : ${8:String(O)}
	PatchGroups : [${9:String(O)}]
	ApprovedPatchesComplianceLevel : ${10:String(O)}
	ApprovedPatchesEnableNonSecurity : ${11:Boolean(O)}
	GlobalFilters: ${12:AWS::SSM::PatchBaseline.PatchFilterGroup(O)}
	Tags : [${13:AWS::SSM::PatchBaseline.Tag(O)}]
endsnippet

snippet AWS::ServiceCatalog::Portfolio
Type AWS::ServiceCatalog::Portfolio
Properties:
	ProviderName : ${1:String(R)}
	Description : ${2:String(O)}
	DisplayName : ${3:String(R)}
	AcceptLanguage : ${4:String(O)}
	Tags : [${5:AWS::ServiceCatalog::Portfolio.Tag(O)}]
endsnippet

snippet AWS::Greengrass::CoreDefinition
Type AWS::Greengrass::CoreDefinition
Properties:
	InitialVersion: ${1:AWS::Greengrass::CoreDefinition.CoreDefinitionVersion(O)}
	Name : ${2:String(R)}
endsnippet

snippet AWS::GuardDuty::Member
Type AWS::GuardDuty::Member
Properties:
	Status : ${1:String(O)}
	MemberId : ${2:String(R)}
	Email : ${3:String(R)}
	Message : ${4:String(O)}
	DisableEmailNotification : ${5:Boolean(O)}
	DetectorId : ${6:String(R)}
endsnippet

snippet AWS::RDS::DBParameterGroup
Type AWS::RDS::DBParameterGroup
Properties:
	Description : ${1:String(R)}
	Family : ${2:String(R)}
	Parameters : [${3:String(O)}]
	Tags : [${4:AWS::RDS::DBParameterGroup.Tag(O)}]
endsnippet

snippet AWS::AppStream::StackFleetAssociation
Type AWS::AppStream::StackFleetAssociation
Properties:
	FleetName : ${1:String(R)}
	StackName : ${2:String(R)}
endsnippet

snippet AWS::ServiceCatalog::AcceptedPortfolioShare
Type AWS::ServiceCatalog::AcceptedPortfolioShare
Properties:
	AcceptLanguage : ${1:String(O)}
	PortfolioId : ${2:String(R)}
endsnippet

snippet AWS::ServiceDiscovery::Service
Type AWS::ServiceDiscovery::Service
Properties:
	Description : ${1:String(O)}
	HealthCheckCustomConfig: ${2:AWS::ServiceDiscovery::Service.HealthCheckCustomConfig(O)}
	DnsConfig: ${3:AWS::ServiceDiscovery::Service.DnsConfig(O)}
	NamespaceId : ${4:String(O)}
	HealthCheckConfig: ${5:AWS::ServiceDiscovery::Service.HealthCheckConfig(O)}
	Name : ${6:String(O)}
endsnippet

snippet AWS::Logs::LogStream
Type AWS::Logs::LogStream
Properties:
	LogGroupName : ${1:String(R)}
	LogStreamName : ${2:String(O)}
endsnippet

snippet AWS::SecretsManager::ResourcePolicy
Type AWS::SecretsManager::ResourcePolicy
Properties:
	SecretId : ${1:String(R)}
	ResourcePolicy : ${2:Json(R)}
endsnippet

snippet AWS::AutoScaling::ScalingPolicy
Type AWS::AutoScaling::ScalingPolicy
Properties:
	AdjustmentType : ${1:String(O)}
	AutoScalingGroupName : ${2:String(R)}
	Cooldown : ${3:String(O)}
	EstimatedInstanceWarmup : ${4:Integer(O)}
	MetricAggregationType : ${5:String(O)}
	MinAdjustmentMagnitude : ${6:Integer(O)}
	PolicyType : ${7:String(O)}
	ScalingAdjustment : ${8:Integer(O)}
	StepAdjustments : [${9:AWS::AutoScaling::ScalingPolicy.StepAdjustment(O)}]
	TargetTrackingConfiguration: ${10:AWS::AutoScaling::ScalingPolicy.TargetTrackingConfiguration(O)}
endsnippet

snippet AWS::EMR::Step
Type AWS::EMR::Step
Properties:
	ActionOnFailure : ${1:String(R)}
	HadoopJarStep: ${2:AWS::EMR::Step.HadoopJarStepConfig(R)}
	JobFlowId : ${3:String(R)}
	Name : ${4:String(R)}
endsnippet

snippet AWS::Config::ConfigurationRecorder
Type AWS::Config::ConfigurationRecorder
Properties:
	Name : ${1:String(O)}
	RecordingGroup: ${2:AWS::Config::ConfigurationRecorder.RecordingGroup(O)}
	RoleARN : ${3:String(R)}
endsnippet

snippet AWS::RDS::EventSubscription
Type AWS::RDS::EventSubscription
Properties:
	Enabled : ${1:Boolean(O)}
	EventCategories : [${2:String(O)}]
	SnsTopicArn : ${3:String(R)}
	SourceIds : [${4:String(O)}]
	SourceType : ${5:String(O)}
endsnippet

snippet AWS::ElasticBeanstalk::Environment
Type AWS::ElasticBeanstalk::Environment
Properties:
	ApplicationName : ${1:String(R)}
	CNAMEPrefix : ${2:String(O)}
	Description : ${3:String(O)}
	EnvironmentName : ${4:String(O)}
	OptionSettings : [${5:AWS::ElasticBeanstalk::Environment.OptionSetting(O)}]
	PlatformArn : ${6:String(O)}
	SolutionStackName : ${7:String(O)}
	Tags : [${8:AWS::ElasticBeanstalk::Environment.Tag(O)}]
	TemplateName : ${9:String(O)}
	Tier: ${10:AWS::ElasticBeanstalk::Environment.Tier(O)}
	VersionLabel : ${11:String(O)}
endsnippet

snippet AWS::Lambda::Function
Type AWS::Lambda::Function
Properties:
	Code: ${1:AWS::Lambda::Function.Code(R)}
	DeadLetterConfig: ${2:AWS::Lambda::Function.DeadLetterConfig(O)}
	Description : ${3:String(O)}
	Environment: ${4:AWS::Lambda::Function.Environment(O)}
	FunctionName : ${5:String(O)}
	Handler : ${6:String(R)}
	KmsKeyArn : ${7:String(O)}
	Layers : [${8:String(O)}]
	MemorySize : ${9:Integer(O)}
	ReservedConcurrentExecutions : ${10:Integer(O)}
	Role : ${11:String(R)}
	Runtime : ${12:String(R)}
	Tags : [${13:AWS::Lambda::Function.Tag(O)}]
	Timeout : ${14:Integer(O)}
	TracingConfig: ${15:AWS::Lambda::Function.TracingConfig(O)}
	VpcConfig: ${16:AWS::Lambda::Function.VpcConfig(O)}
endsnippet

snippet AWS::IoTAnalytics::Pipeline
Type AWS::IoTAnalytics::Pipeline
Properties:
	PipelineName : ${1:String(O)}
	Tags : [${2:AWS::IoTAnalytics::Pipeline.Tag(O)}]
	PipelineActivities : [${3:AWS::IoTAnalytics::Pipeline.Activity(R)}]
endsnippet

snippet AWS::IoT1Click::Placement
Type AWS::IoT1Click::Placement
Properties:
	PlacementName : ${1:String(O)}
	ProjectName : ${2:String(R)}
	AssociatedDevices : ${3:Json(O)}
	Attributes : ${4:Json(O)}
endsnippet

snippet AWS::EC2::DHCPOptions
Type AWS::EC2::DHCPOptions
Properties:
	DomainName : ${1:String(O)}
	DomainNameServers : [${2:String(O)}]
	NetbiosNameServers : [${3:String(O)}]
	NetbiosNodeType : ${4:Integer(O)}
	NtpServers : [${5:String(O)}]
	Tags : [${6:AWS::EC2::DHCPOptions.Tag(O)}]
endsnippet

snippet AWS::EC2::TransitGatewayRoute
Type AWS::EC2::TransitGatewayRoute
Properties:
	TransitGatewayRouteTableId : ${1:String(R)}
	DestinationCidrBlock : ${2:String(O)}
	Blackhole : ${3:Boolean(O)}
	TransitGatewayAttachmentId : ${4:String(O)}
endsnippet

snippet AWS::ApiGateway::UsagePlan
Type AWS::ApiGateway::UsagePlan
Properties:
	ApiStages : [${1:AWS::ApiGateway::UsagePlan.ApiStage(O)}]
	Description : ${2:String(O)}
	Quota: ${3:AWS::ApiGateway::UsagePlan.QuotaSettings(O)}
	Throttle: ${4:AWS::ApiGateway::UsagePlan.ThrottleSettings(O)}
	UsagePlanName : ${5:String(O)}
endsnippet

snippet AWS::IAM::User
Type AWS::IAM::User
Properties:
	Groups : [${1:String(O)}]
	LoginProfile: ${2:AWS::IAM::User.LoginProfile(O)}
	ManagedPolicyArns : [${3:String(O)}]
	Path : ${4:String(O)}
	PermissionsBoundary : ${5:String(O)}
	Policies : [${6:AWS::IAM::User.Policy(O)}]
	UserName : ${7:String(O)}
endsnippet

snippet AWS::EC2::NetworkAcl
Type AWS::EC2::NetworkAcl
Properties:
	Tags : [${1:AWS::EC2::NetworkAcl.Tag(O)}]
	VpcId : ${2:String(R)}
endsnippet

snippet AWS::OpsWorks::Instance
Type AWS::OpsWorks::Instance
Properties:
	AgentVersion : ${1:String(O)}
	AmiId : ${2:String(O)}
	Architecture : ${3:String(O)}
	AutoScalingType : ${4:String(O)}
	AvailabilityZone : ${5:String(O)}
	BlockDeviceMappings : [${6:AWS::OpsWorks::Instance.BlockDeviceMapping(O)}]
	EbsOptimized : ${7:Boolean(O)}
	ElasticIps : [${8:String(O)}]
	Hostname : ${9:String(O)}
	InstallUpdatesOnBoot : ${10:Boolean(O)}
	InstanceType : ${11:String(R)}
	LayerIds : [${12:String(R)}]
	Os : ${13:String(O)}
	RootDeviceType : ${14:String(O)}
	SshKeyName : ${15:String(O)}
	StackId : ${16:String(R)}
	SubnetId : ${17:String(O)}
	Tenancy : ${18:String(O)}
	TimeBasedAutoScaling: ${19:AWS::OpsWorks::Instance.TimeBasedAutoScaling(O)}
	VirtualizationType : ${20:String(O)}
	Volumes : [${21:String(O)}]
endsnippet

snippet AWS::Config::ConfigRule
Type AWS::Config::ConfigRule
Properties:
	ConfigRuleName : ${1:String(O)}
	Description : ${2:String(O)}
	InputParameters : ${3:Json(O)}
	MaximumExecutionFrequency : ${4:String(O)}
	Scope: ${5:AWS::Config::ConfigRule.Scope(O)}
	Source: ${6:AWS::Config::ConfigRule.Source(R)}
endsnippet

snippet AWS::Glue::Partition
Type AWS::Glue::Partition
Properties:
	TableName : ${1:String(R)}
	DatabaseName : ${2:String(R)}
	CatalogId : ${3:String(R)}
	PartitionInput: ${4:AWS::Glue::Partition.PartitionInput(R)}
endsnippet

snippet AWS::EC2::VPNGatewayRoutePropagation
Type AWS::EC2::VPNGatewayRoutePropagation
Properties:
	RouteTableIds : [${1:String(R)}]
	VpnGatewayId : ${2:String(R)}
endsnippet

snippet AWS::WAF::WebACL
Type AWS::WAF::WebACL
Properties:
	DefaultAction: ${1:AWS::WAF::WebACL.WafAction(R)}
	MetricName : ${2:String(R)}
	Name : ${3:String(R)}
	Rules : [${4:AWS::WAF::WebACL.ActivatedRule(O)}]
endsnippet

snippet AWS::IoTAnalytics::Datastore
Type AWS::IoTAnalytics::Datastore
Properties:
	DatastoreName : ${1:String(O)}
	RetentionPeriod: ${2:AWS::IoTAnalytics::Datastore.RetentionPeriod(O)}
	Tags : [${3:AWS::IoTAnalytics::Datastore.Tag(O)}]
endsnippet

snippet AWS::Glue::Job
Type AWS::Glue::Job
Properties:
	Role : ${1:String(R)}
	DefaultArguments : ${2:Json(O)}
	Connections: ${3:AWS::Glue::Job.ConnectionsList(O)}
	MaxRetries : ${4:Double(O)}
	Description : ${5:String(O)}
	LogUri : ${6:String(O)}
	Command: ${7:AWS::Glue::Job.JobCommand(R)}
	AllocatedCapacity : ${8:Double(O)}
	ExecutionProperty: ${9:AWS::Glue::Job.ExecutionProperty(O)}
	Name : ${10:String(O)}
endsnippet

snippet AWS::ApiGatewayV2::Authorizer
Type AWS::ApiGatewayV2::Authorizer
Properties:
	IdentityValidationExpression : ${1:String(O)}
	AuthorizerUri : ${2:String(R)}
	AuthorizerCredentialsArn : ${3:String(O)}
	AuthorizerType : ${4:String(R)}
	AuthorizerResultTtlInSeconds : ${5:Integer(O)}
	IdentitySource : [${6:String(R)}]
	ApiId : ${7:String(R)}
	Name : ${8:String(R)}
endsnippet

snippet AWS::S3::Bucket
Type AWS::S3::Bucket
Properties:
	AccelerateConfiguration: ${1:AWS::S3::Bucket.AccelerateConfiguration(O)}
	AccessControl : ${2:String(O)}
	AnalyticsConfigurations : [${3:AWS::S3::Bucket.AnalyticsConfiguration(O)}]
	BucketEncryption: ${4:AWS::S3::Bucket.BucketEncryption(O)}
	BucketName : ${5:String(O)}
	CorsConfiguration: ${6:AWS::S3::Bucket.CorsConfiguration(O)}
	InventoryConfigurations : [${7:AWS::S3::Bucket.InventoryConfiguration(O)}]
	LifecycleConfiguration: ${8:AWS::S3::Bucket.LifecycleConfiguration(O)}
	LoggingConfiguration: ${9:AWS::S3::Bucket.LoggingConfiguration(O)}
	MetricsConfigurations : [${10:AWS::S3::Bucket.MetricsConfiguration(O)}]
	NotificationConfiguration: ${11:AWS::S3::Bucket.NotificationConfiguration(O)}
	PublicAccessBlockConfiguration: ${12:AWS::S3::Bucket.PublicAccessBlockConfiguration(O)}
	ReplicationConfiguration: ${13:AWS::S3::Bucket.ReplicationConfiguration(O)}
	Tags : [${14:AWS::S3::Bucket.Tag(O)}]
	VersioningConfiguration: ${15:AWS::S3::Bucket.VersioningConfiguration(O)}
	WebsiteConfiguration: ${16:AWS::S3::Bucket.WebsiteConfiguration(O)}
endsnippet

snippet AWS::CloudFormation::WaitConditionHandle
Type AWS::CloudFormation::WaitConditionHandle
Properties:
endsnippet

snippet AWS::Lambda::Version
Type AWS::Lambda::Version
Properties:
	CodeSha256 : ${1:String(O)}
	Description : ${2:String(O)}
	FunctionName : ${3:String(R)}
endsnippet

snippet AWS::SageMaker::NotebookInstance
Type AWS::SageMaker::NotebookInstance
Properties:
	RootAccess : ${1:String(O)}
	KmsKeyId : ${2:String(O)}
	VolumeSizeInGB : ${3:Integer(O)}
	DirectInternetAccess : ${4:String(O)}
	SubnetId : ${5:String(O)}
	NotebookInstanceName : ${6:String(O)}
	InstanceType : ${7:String(R)}
	LifecycleConfigName : ${8:String(O)}
	SecurityGroupIds : [${9:String(O)}]
	RoleArn : ${10:String(R)}
	Tags : [${11:AWS::SageMaker::NotebookInstance.Tag(O)}]
endsnippet

snippet AWS::ApiGateway::BasePathMapping
Type AWS::ApiGateway::BasePathMapping
Properties:
	BasePath : ${1:String(O)}
	DomainName : ${2:String(R)}
	RestApiId : ${3:String(O)}
	Stage : ${4:String(O)}
endsnippet

snippet AWS::Cognito::UserPool
Type AWS::Cognito::UserPool
Properties:
	UserPoolTags : ${1:Json(O)}
	Policies: ${2:AWS::Cognito::UserPool.Policies(O)}
	MfaConfiguration : ${3:String(O)}
	Schema : [${4:AWS::Cognito::UserPool.SchemaAttribute(O)}]
	AdminCreateUserConfig: ${5:AWS::Cognito::UserPool.AdminCreateUserConfig(O)}
	SmsAuthenticationMessage : ${6:String(O)}
	UserPoolName : ${7:String(O)}
	SmsVerificationMessage : ${8:String(O)}
	EmailConfiguration: ${9:AWS::Cognito::UserPool.EmailConfiguration(O)}
	SmsConfiguration: ${10:AWS::Cognito::UserPool.SmsConfiguration(O)}
	AliasAttributes : [${11:String(O)}]
	EmailVerificationSubject : ${12:String(O)}
	LambdaConfig: ${13:AWS::Cognito::UserPool.LambdaConfig(O)}
	UsernameAttributes : [${14:String(O)}]
	AutoVerifiedAttributes : [${15:String(O)}]
	DeviceConfiguration: ${16:AWS::Cognito::UserPool.DeviceConfiguration(O)}
	EmailVerificationMessage : ${17:String(O)}
endsnippet

snippet AWS::SSM::MaintenanceWindow
Type AWS::SSM::MaintenanceWindow
Properties:
	StartDate : ${1:String(O)}
	Description : ${2:String(O)}
	AllowUnassociatedTargets : ${3:Boolean(R)}
	Cutoff : ${4:Integer(R)}
	Schedule : ${5:String(R)}
	Duration : ${6:Integer(R)}
	EndDate : ${7:String(O)}
	Tags : [${8:AWS::SSM::MaintenanceWindow.Tag(O)}]
	Name : ${9:String(R)}
	ScheduleTimezone : ${10:String(O)}
endsnippet

snippet AWS::EC2::EgressOnlyInternetGateway
Type AWS::EC2::EgressOnlyInternetGateway
Properties:
	VpcId : ${1:String(R)}
endsnippet

snippet AWS::CloudFormation::Macro
Type AWS::CloudFormation::Macro
Properties:
	Description : ${1:String(O)}
	FunctionName : ${2:String(R)}
	LogGroupName : ${3:String(O)}
	LogRoleARN : ${4:String(O)}
	Name : ${5:String(R)}
endsnippet

snippet AWS::Route53::RecordSetGroup
Type AWS::Route53::RecordSetGroup
Properties:
	Comment : ${1:String(O)}
	HostedZoneId : ${2:String(O)}
	HostedZoneName : ${3:String(O)}
	RecordSets : [${4:AWS::Route53::RecordSetGroup.RecordSet(O)}]
endsnippet

snippet AWS::KinesisFirehose::DeliveryStream
Type AWS::KinesisFirehose::DeliveryStream
Properties:
	DeliveryStreamName : ${1:String(O)}
	DeliveryStreamType : ${2:String(O)}
	ElasticsearchDestinationConfiguration: ${3:AWS::KinesisFirehose::DeliveryStream.ElasticsearchDestinationConfiguration(O)}
	ExtendedS3DestinationConfiguration: ${4:AWS::KinesisFirehose::DeliveryStream.ExtendedS3DestinationConfiguration(O)}
	KinesisStreamSourceConfiguration: ${5:AWS::KinesisFirehose::DeliveryStream.KinesisStreamSourceConfiguration(O)}
	RedshiftDestinationConfiguration: ${6:AWS::KinesisFirehose::DeliveryStream.RedshiftDestinationConfiguration(O)}
	S3DestinationConfiguration: ${7:AWS::KinesisFirehose::DeliveryStream.S3DestinationConfiguration(O)}
	SplunkDestinationConfiguration: ${8:AWS::KinesisFirehose::DeliveryStream.SplunkDestinationConfiguration(O)}
endsnippet

snippet AWS::DLM::LifecyclePolicy
Type AWS::DLM::LifecyclePolicy
Properties:
	ExecutionRoleArn : ${1:String(O)}
	Description : ${2:String(O)}
	State : ${3:String(O)}
	PolicyDetails: ${4:AWS::DLM::LifecyclePolicy.PolicyDetails(O)}
endsnippet

snippet AWS::ApiGatewayV2::Api
Type AWS::ApiGatewayV2::Api
Properties:
	RouteSelectionExpression : ${1:String(R)}
	Description : ${2:String(O)}
	Version : ${3:String(O)}
	ProtocolType : ${4:String(R)}
	DisableSchemaValidation : ${5:Boolean(O)}
	Name : ${6:String(R)}
	ApiKeySelectionExpression : ${7:String(O)}
endsnippet

snippet AWS::EC2::NetworkInterfaceAttachment
Type AWS::EC2::NetworkInterfaceAttachment
Properties:
	DeleteOnTermination : ${1:Boolean(O)}
	DeviceIndex : ${2:String(R)}
	InstanceId : ${3:String(R)}
	NetworkInterfaceId : ${4:String(R)}
endsnippet

snippet AWS::RDS::DBInstance
Type AWS::RDS::DBInstance
Properties:
	AllocatedStorage : ${1:String(O)}
	AllowMajorVersionUpgrade : ${2:Boolean(O)}
	AutoMinorVersionUpgrade : ${3:Boolean(O)}
	AvailabilityZone : ${4:String(O)}
	BackupRetentionPeriod : ${5:String(O)}
	CharacterSetName : ${6:String(O)}
	CopyTagsToSnapshot : ${7:Boolean(O)}
	DBClusterIdentifier : ${8:String(O)}
	DBInstanceClass : ${9:String(R)}
	DBInstanceIdentifier : ${10:String(O)}
	DBName : ${11:String(O)}
	DBParameterGroupName : ${12:String(O)}
	DBSecurityGroups : [${13:String(O)}]
	DBSnapshotIdentifier : ${14:String(O)}
	DBSubnetGroupName : ${15:String(O)}
	DeleteAutomatedBackups : ${16:Boolean(O)}
	DeletionProtection : ${17:Boolean(O)}
	Domain : ${18:String(O)}
	DomainIAMRoleName : ${19:String(O)}
	EnableCloudwatchLogsExports : [${20:String(O)}]
	EnableIAMDatabaseAuthentication : ${21:Boolean(O)}
	EnablePerformanceInsights : ${22:Boolean(O)}
	Engine : ${23:String(O)}
	EngineVersion : ${24:String(O)}
	Iops : ${25:Integer(O)}
	KmsKeyId : ${26:String(O)}
	LicenseModel : ${27:String(O)}
	MasterUserPassword : ${28:String(O)}
	MasterUsername : ${29:String(O)}
	MonitoringInterval : ${30:Integer(O)}
	MonitoringRoleArn : ${31:String(O)}
	MultiAZ : ${32:Boolean(O)}
	OptionGroupName : ${33:String(O)}
	PerformanceInsightsKMSKeyId : ${34:String(O)}
	PerformanceInsightsRetentionPeriod : ${35:Integer(O)}
	Port : ${36:String(O)}
	PreferredBackupWindow : ${37:String(O)}
	PreferredMaintenanceWindow : ${38:String(O)}
	ProcessorFeatures : [${39:AWS::RDS::DBInstance.ProcessorFeature(O)}]
	PromotionTier : ${40:Integer(O)}
	PubliclyAccessible : ${41:Boolean(O)}
	SourceDBInstanceIdentifier : ${42:String(O)}
	SourceRegion : ${43:String(O)}
	StorageEncrypted : ${44:Boolean(O)}
	StorageType : ${45:String(O)}
	Tags : [${46:AWS::RDS::DBInstance.Tag(O)}]
	Timezone : ${47:String(O)}
	UseDefaultProcessorFeatures : ${48:Boolean(O)}
	VPCSecurityGroups : [${49:String(O)}]
endsnippet

snippet AWS::IAM::ManagedPolicy
Type AWS::IAM::ManagedPolicy
Properties:
	Description : ${1:String(O)}
	Groups : [${2:String(O)}]
	ManagedPolicyName : ${3:String(O)}
	Path : ${4:String(O)}
	PolicyDocument : ${5:Json(R)}
	Roles : [${6:String(O)}]
	Users : [${7:String(O)}]
endsnippet

snippet AWS::WAFRegional::IPSet
Type AWS::WAFRegional::IPSet
Properties:
	IPSetDescriptors : [${1:AWS::WAFRegional::IPSet.IPSetDescriptor(O)}]
	Name : ${2:String(R)}
endsnippet

snippet AWS::Greengrass::DeviceDefinitionVersion
Type AWS::Greengrass::DeviceDefinitionVersion
Properties:
	DeviceDefinitionId : ${1:String(R)}
	Devices : [${2:AWS::Greengrass::DeviceDefinitionVersion.Device(R)}]
endsnippet

snippet AWS::IoT::PolicyPrincipalAttachment
Type AWS::IoT::PolicyPrincipalAttachment
Properties:
	PolicyName : ${1:String(R)}
	Principal : ${2:String(R)}
endsnippet

snippet AWS::ApplicationAutoScaling::ScalableTarget
Type AWS::ApplicationAutoScaling::ScalableTarget
Properties:
	MaxCapacity : ${1:Integer(R)}
	MinCapacity : ${2:Integer(R)}
	ResourceId : ${3:String(R)}
	RoleARN : ${4:String(R)}
	ScalableDimension : ${5:String(R)}
	ScheduledActions : [${6:AWS::ApplicationAutoScaling::ScalableTarget.ScheduledAction(O)}]
	ServiceNamespace : ${7:String(R)}
endsnippet

snippet AWS::EC2::CustomerGateway
Type AWS::EC2::CustomerGateway
Properties:
	BgpAsn : ${1:Integer(R)}
	IpAddress : ${2:String(R)}
	Tags : [${3:AWS::EC2::CustomerGateway.Tag(O)}]
	Type : ${4:String(R)}
endsnippet

snippet AWS::ApiGateway::Stage
Type AWS::ApiGateway::Stage
Properties:
	AccessLogSetting: ${1:AWS::ApiGateway::Stage.AccessLogSetting(O)}
	CacheClusterEnabled : ${2:Boolean(O)}
	CacheClusterSize : ${3:String(O)}
	CanarySetting: ${4:AWS::ApiGateway::Stage.CanarySetting(O)}
	ClientCertificateId : ${5:String(O)}
	DeploymentId : ${6:String(O)}
	Description : ${7:String(O)}
	DocumentationVersion : ${8:String(O)}
	MethodSettings : [${9:AWS::ApiGateway::Stage.MethodSetting(O)}]
	RestApiId : ${10:String(R)}
	StageName : ${11:String(O)}
	Tags : [${12:AWS::ApiGateway::Stage.Tag(O)}]
	TracingEnabled : ${13:Boolean(O)}
	Variables : [${14:String(O)}]
endsnippet

snippet AWS::SDB::Domain
Type AWS::SDB::Domain
Properties:
	Description : ${1:String(O)}
endsnippet

snippet AWS::Cognito::UserPoolClient
Type AWS::Cognito::UserPoolClient
Properties:
	GenerateSecret : ${1:Boolean(O)}
	ClientName : ${2:String(O)}
	UserPoolId : ${3:String(R)}
	ExplicitAuthFlows : [${4:String(O)}]
	RefreshTokenValidity : ${5:Double(O)}
	ReadAttributes : [${6:String(O)}]
	WriteAttributes : [${7:String(O)}]
endsnippet

snippet AWS::Route53Resolver::ResolverRuleAssociation
Type AWS::Route53Resolver::ResolverRuleAssociation
Properties:
	VPCId : ${1:String(R)}
	ResolverRuleId : ${2:String(R)}
	Name : ${3:String(O)}
endsnippet

snippet AWS::Greengrass::SubscriptionDefinition
Type AWS::Greengrass::SubscriptionDefinition
Properties:
	InitialVersion: ${1:AWS::Greengrass::SubscriptionDefinition.SubscriptionDefinitionVersion(O)}
	Name : ${2:String(R)}
endsnippet

snippet AWS::ApiGateway::VpcLink
Type AWS::ApiGateway::VpcLink
Properties:
	Description : ${1:String(O)}
	TargetArns : [${2:String(R)}]
	Name : ${3:String(R)}
endsnippet

snippet AWS::ECR::Repository
Type AWS::ECR::Repository
Properties:
	LifecyclePolicy: ${1:AWS::ECR::Repository.LifecyclePolicy(O)}
	RepositoryName : ${2:String(O)}
	RepositoryPolicyText : ${3:Json(O)}
endsnippet

snippet AWS::EC2::TrunkInterfaceAssociation
Type AWS::EC2::TrunkInterfaceAssociation
Properties:
	BranchInterfaceId : ${1:String(R)}
	GREKey : ${2:Integer(O)}
	TrunkInterfaceId : ${3:String(R)}
	VLANId : ${4:Integer(O)}
endsnippet

snippet AWS::ApiGateway::GatewayResponse
Type AWS::ApiGateway::GatewayResponse
Properties:
	ResponseParameters : [${1:String(O)}]
	ResponseTemplates : [${2:String(O)}]
	ResponseType : ${3:String(R)}
	RestApiId : ${4:String(R)}
	StatusCode : ${5:String(O)}
endsnippet

snippet AWS::Glue::Database
Type AWS::Glue::Database
Properties:
	DatabaseInput: ${1:AWS::Glue::Database.DatabaseInput(R)}
	CatalogId : ${2:String(R)}
endsnippet

snippet AWS::ApiGatewayV2::RouteResponse
Type AWS::ApiGatewayV2::RouteResponse
Properties:
	RouteResponseKey : ${1:String(R)}
	ResponseParameters : ${2:Json(O)}
	RouteId : ${3:String(R)}
	ModelSelectionExpression : ${4:String(O)}
	ApiId : ${5:String(R)}
	ResponseModels : ${6:Json(O)}
endsnippet

snippet AWS::ApiGateway::Method
Type AWS::ApiGateway::Method
Properties:
	ApiKeyRequired : ${1:Boolean(O)}
	AuthorizationScopes : [${2:String(O)}]
	AuthorizationType : ${3:String(O)}
	AuthorizerId : ${4:String(O)}
	HttpMethod : ${5:String(R)}
	Integration: ${6:AWS::ApiGateway::Method.Integration(O)}
	MethodResponses : [${7:AWS::ApiGateway::Method.MethodResponse(O)}]
	OperationName : ${8:String(O)}
	RequestModels : [${9:String(O)}]
	RequestParameters : [${10:Boolean(O)}]
	RequestValidatorId : ${11:String(O)}
	ResourceId : ${12:String(R)}
	RestApiId : ${13:String(R)}
endsnippet

snippet AWS::ApiGateway::ClientCertificate
Type AWS::ApiGateway::ClientCertificate
Properties:
	Description : ${1:String(O)}
endsnippet

snippet AWS::DMS::Endpoint
Type AWS::DMS::Endpoint
Properties:
	KmsKeyId : ${1:String(O)}
	Port : ${2:Integer(O)}
	DatabaseName : ${3:String(O)}
	ElasticsearchSettings: ${4:AWS::DMS::Endpoint.ElasticsearchSettings(O)}
	S3Settings: ${5:AWS::DMS::Endpoint.S3Settings(O)}
	EngineName : ${6:String(R)}
	DynamoDbSettings: ${7:AWS::DMS::Endpoint.DynamoDbSettings(O)}
	KinesisSettings: ${8:AWS::DMS::Endpoint.KinesisSettings(O)}
	Username : ${9:String(O)}
	SslMode : ${10:String(O)}
	ServerName : ${11:String(O)}
	ExtraConnectionAttributes : ${12:String(O)}
	EndpointType : ${13:String(R)}
	Tags : [${14:AWS::DMS::Endpoint.Tag(O)}]
	EndpointIdentifier : ${15:String(O)}
	Password : ${16:String(O)}
	CertificateArn : ${17:String(O)}
	MongoDbSettings: ${18:AWS::DMS::Endpoint.MongoDbSettings(O)}
endsnippet

snippet AWS::ServiceCatalog::LaunchNotificationConstraint
Type AWS::ServiceCatalog::LaunchNotificationConstraint
Properties:
	Description : ${1:String(O)}
	NotificationArns : [${2:String(R)}]
	AcceptLanguage : ${3:String(O)}
	PortfolioId : ${4:String(R)}
	ProductId : ${5:String(R)}
endsnippet

snippet AWS::AppStream::StackUserAssociation
Type AWS::AppStream::StackUserAssociation
Properties:
	SendEmailNotification : ${1:Boolean(O)}
	UserName : ${2:String(R)}
	StackName : ${3:String(R)}
	AuthenticationType : ${4:String(R)}
endsnippet

snippet AWS::Greengrass::ResourceDefinitionVersion
Type AWS::Greengrass::ResourceDefinitionVersion
Properties:
	Resources : [${1:AWS::Greengrass::ResourceDefinitionVersion.ResourceInstance(R)}]
	ResourceDefinitionId : ${2:String(R)}
endsnippet

snippet AWS::Greengrass::LoggerDefinitionVersion
Type AWS::Greengrass::LoggerDefinitionVersion
Properties:
	LoggerDefinitionId : ${1:String(R)}
	Loggers : [${2:AWS::Greengrass::LoggerDefinitionVersion.Logger(R)}]
endsnippet

snippet AWS::SecretsManager::SecretTargetAttachment
Type AWS::SecretsManager::SecretTargetAttachment
Properties:
	SecretId : ${1:String(R)}
	TargetType : ${2:String(R)}
	TargetId : ${3:String(R)}
endsnippet

snippet AWS::EC2::VolumeAttachment
Type AWS::EC2::VolumeAttachment
Properties:
	Device : ${1:String(R)}
	InstanceId : ${2:String(R)}
	VolumeId : ${3:String(R)}
endsnippet

snippet AWS::DirectoryService::SimpleAD
Type AWS::DirectoryService::SimpleAD
Properties:
	CreateAlias : ${1:Boolean(O)}
	Description : ${2:String(O)}
	EnableSso : ${3:Boolean(O)}
	Name : ${4:String(R)}
	Password : ${5:String(R)}
	ShortName : ${6:String(O)}
	Size : ${7:String(R)}
	VpcSettings: ${8:AWS::DirectoryService::SimpleAD.VpcSettings(R)}
endsnippet

snippet AWS::EC2::Host
Type AWS::EC2::Host
Properties:
	AutoPlacement : ${1:String(O)}
	AvailabilityZone : ${2:String(R)}
	InstanceType : ${3:String(R)}
endsnippet

snippet AWS::RDS::DBSecurityGroup
Type AWS::RDS::DBSecurityGroup
Properties:
	DBSecurityGroupIngress : [${1:AWS::RDS::DBSecurityGroup.Ingress(R)}]
	EC2VpcId : ${2:String(O)}
	GroupDescription : ${3:String(R)}
	Tags : [${4:AWS::RDS::DBSecurityGroup.Tag(O)}]
endsnippet

snippet AWS::KMS::Alias
Type AWS::KMS::Alias
Properties:
	AliasName : ${1:String(R)}
	TargetKeyId : ${2:String(R)}
endsnippet

snippet AWS::ECS::TaskDefinition
Type AWS::ECS::TaskDefinition
Properties:
	ContainerDefinitions : [${1:AWS::ECS::TaskDefinition.ContainerDefinition(O)}]
	Cpu : ${2:String(O)}
	ExecutionRoleArn : ${3:String(O)}
	Family : ${4:String(O)}
	Memory : ${5:String(O)}
	NetworkMode : ${6:String(O)}
	PlacementConstraints : [${7:AWS::ECS::TaskDefinition.TaskDefinitionPlacementConstraint(O)}]
	RequiresCompatibilities : [${8:String(O)}]
	TaskRoleArn : ${9:String(O)}
	Volumes : [${10:AWS::ECS::TaskDefinition.Volume(O)}]
endsnippet

snippet AWS::ApiGatewayV2::IntegrationResponse
Type AWS::ApiGatewayV2::IntegrationResponse
Properties:
	ResponseTemplates : ${1:Json(O)}
	TemplateSelectionExpression : ${2:String(O)}
	ResponseParameters : ${3:Json(O)}
	ContentHandlingStrategy : ${4:String(O)}
	IntegrationId : ${5:String(R)}
	IntegrationResponseKey : ${6:String(R)}
	ApiId : ${7:String(R)}
endsnippet

snippet AWS::Redshift::ClusterSubnetGroup
Type AWS::Redshift::ClusterSubnetGroup
Properties:
	Description : ${1:String(R)}
	SubnetIds : [${2:String(R)}]
	Tags : [${3:AWS::Redshift::ClusterSubnetGroup.Tag(O)}]
endsnippet

snippet AWS::EC2::EIPAssociation
Type AWS::EC2::EIPAssociation
Properties:
	AllocationId : ${1:String(O)}
	EIP : ${2:String(O)}
	InstanceId : ${3:String(O)}
	NetworkInterfaceId : ${4:String(O)}
	PrivateIpAddress : ${5:String(O)}
endsnippet

snippet AWS::EC2::VPNGateway
Type AWS::EC2::VPNGateway
Properties:
	AmazonSideAsn : ${1:Long(O)}
	Tags : [${2:AWS::EC2::VPNGateway.Tag(O)}]
	Type : ${3:String(R)}
endsnippet

snippet AWS::IoT::ThingPrincipalAttachment
Type AWS::IoT::ThingPrincipalAttachment
Properties:
	Principal : ${1:String(R)}
	ThingName : ${2:String(R)}
endsnippet

snippet AWS::ElastiCache::CacheCluster
Type AWS::ElastiCache::CacheCluster
Properties:
	AZMode : ${1:String(O)}
	AutoMinorVersionUpgrade : ${2:Boolean(O)}
	CacheNodeType : ${3:String(R)}
	CacheParameterGroupName : ${4:String(O)}
	CacheSecurityGroupNames : [${5:String(O)}]
	CacheSubnetGroupName : ${6:String(O)}
	ClusterName : ${7:String(O)}
	Engine : ${8:String(R)}
	EngineVersion : ${9:String(O)}
	NotificationTopicArn : ${10:String(O)}
	NumCacheNodes : ${11:Integer(R)}
	Port : ${12:Integer(O)}
	PreferredAvailabilityZone : ${13:String(O)}
	PreferredAvailabilityZones : [${14:String(O)}]
	PreferredMaintenanceWindow : ${15:String(O)}
	SnapshotArns : [${16:String(O)}]
	SnapshotName : ${17:String(O)}
	SnapshotRetentionLimit : ${18:Integer(O)}
	SnapshotWindow : ${19:String(O)}
	Tags : [${20:AWS::ElastiCache::CacheCluster.Tag(O)}]
	VpcSecurityGroupIds : [${21:String(O)}]
endsnippet

snippet AWS::GuardDuty::Detector
Type AWS::GuardDuty::Detector
Properties:
	FindingPublishingFrequency : ${1:String(O)}
	Enable : ${2:Boolean(R)}
endsnippet

snippet AWS::ServiceDiscovery::PrivateDnsNamespace
Type AWS::ServiceDiscovery::PrivateDnsNamespace
Properties:
	Description : ${1:String(O)}
	Vpc : ${2:String(R)}
	Name : ${3:String(R)}
endsnippet

snippet AWS::ElasticBeanstalk::ApplicationVersion
Type AWS::ElasticBeanstalk::ApplicationVersion
Properties:
	ApplicationName : ${1:String(R)}
	Description : ${2:String(O)}
	SourceBundle: ${3:AWS::ElasticBeanstalk::ApplicationVersion.SourceBundle(R)}
endsnippet

snippet AWS::Glue::DevEndpoint
Type AWS::Glue::DevEndpoint
Properties:
	ExtraJarsS3Path : ${1:String(O)}
	EndpointName : ${2:String(O)}
	PublicKey : ${3:String(R)}
	NumberOfNodes : ${4:Integer(O)}
	SubnetId : ${5:String(O)}
	ExtraPythonLibsS3Path : ${6:String(O)}
	SecurityGroupIds : [${7:String(O)}]
	RoleArn : ${8:String(R)}
endsnippet

snippet AWS::EC2::VPCEndpoint
Type AWS::EC2::VPCEndpoint
Properties:
	PolicyDocument : ${1:Json(O)}
	PrivateDnsEnabled : ${2:Boolean(O)}
	RouteTableIds : [${3:String(O)}]
	SecurityGroupIds : [${4:String(O)}]
	ServiceName : ${5:String(R)}
	SubnetIds : [${6:String(O)}]
	VpcEndpointType : ${7:String(O)}
	VpcId : ${8:String(R)}
endsnippet

snippet AWS::OpsWorks::UserProfile
Type AWS::OpsWorks::UserProfile
Properties:
	AllowSelfManagement : ${1:Boolean(O)}
	IamUserArn : ${2:String(R)}
	SshPublicKey : ${3:String(O)}
	SshUsername : ${4:String(O)}
endsnippet

snippet AWS::ElasticLoadBalancingV2::TargetGroup
Type AWS::ElasticLoadBalancingV2::TargetGroup
Properties:
	HealthCheckEnabled : ${1:Boolean(O)}
	HealthCheckIntervalSeconds : ${2:Integer(O)}
	HealthCheckPath : ${3:String(O)}
	HealthCheckPort : ${4:String(O)}
	HealthCheckProtocol : ${5:String(O)}
	HealthCheckTimeoutSeconds : ${6:Integer(O)}
	HealthyThresholdCount : ${7:Integer(O)}
	Matcher: ${8:AWS::ElasticLoadBalancingV2::TargetGroup.Matcher(O)}
	Name : ${9:String(O)}
	Port : ${10:Integer(O)}
	Protocol : ${11:String(O)}
	Tags : [${12:AWS::ElasticLoadBalancingV2::TargetGroup.Tag(O)}]
	TargetGroupAttributes : [${13:AWS::ElasticLoadBalancingV2::TargetGroup.TargetGroupAttribute(O)}]
	TargetType : ${14:String(O)}
	Targets : [${15:AWS::ElasticLoadBalancingV2::TargetGroup.TargetDescription(O)}]
	UnhealthyThresholdCount : ${16:Integer(O)}
	VpcId : ${17:String(O)}
endsnippet

snippet AWS::AppStream::User
Type AWS::AppStream::User
Properties:
	UserName : ${1:String(R)}
	FirstName : ${2:String(O)}
	MessageAction : ${3:String(O)}
	LastName : ${4:String(O)}
	AuthenticationType : ${5:String(R)}
endsnippet

snippet AWS::EC2::VPCGatewayAttachment
Type AWS::EC2::VPCGatewayAttachment
Properties:
	InternetGatewayId : ${1:String(O)}
	VpcId : ${2:String(R)}
	VpnGatewayId : ${3:String(O)}
endsnippet

snippet AWS::EC2::VPNConnection
Type AWS::EC2::VPNConnection
Properties:
	CustomerGatewayId : ${1:String(R)}
	StaticRoutesOnly : ${2:Boolean(O)}
	Tags : [${3:AWS::EC2::VPNConnection.Tag(O)}]
	Type : ${4:String(R)}
	VpnGatewayId : ${5:String(R)}
	VpnTunnelOptionsSpecifications : [${6:AWS::EC2::VPNConnection.VpnTunnelOptionsSpecification(O)}]
endsnippet

snippet AWS::Glue::Trigger
Type AWS::Glue::Trigger
Properties:
	Type : ${1:String(R)}
	Description : ${2:String(O)}
	Actions : [${3:AWS::Glue::Trigger.Action(R)}]
	Schedule : ${4:String(O)}
	Name : ${5:String(O)}
	Predicate: ${6:AWS::Glue::Trigger.Predicate(O)}
endsnippet

snippet AWS::EC2::VPCCidrBlock
Type AWS::EC2::VPCCidrBlock
Properties:
	AmazonProvidedIpv6CidrBlock : ${1:Boolean(O)}
	CidrBlock : ${2:String(O)}
	VpcId : ${3:String(R)}
endsnippet

snippet AWS::SSM::Parameter
Type AWS::SSM::Parameter
Properties:
	Type : ${1:String(R)}
	Description : ${2:String(O)}
	AllowedPattern : ${3:String(O)}
	Value : ${4:String(R)}
	Name : ${5:String(O)}
endsnippet

snippet AWS::Inspector::AssessmentTemplate
Type AWS::Inspector::AssessmentTemplate
Properties:
	AssessmentTargetArn : ${1:String(R)}
	DurationInSeconds : ${2:Integer(R)}
	AssessmentTemplateName : ${3:String(O)}
	RulesPackageArns : [${4:String(R)}]
	UserAttributesForFindings : [${5:AWS::Inspector::AssessmentTemplate.Tag(O)}]
endsnippet

snippet AWS::AppStream::Fleet
Type AWS::AppStream::Fleet
Properties:
	Description : ${1:String(O)}
	ComputeCapacity: ${2:AWS::AppStream::Fleet.ComputeCapacity(R)}
	VpcConfig: ${3:AWS::AppStream::Fleet.VpcConfig(O)}
	FleetType : ${4:String(O)}
	EnableDefaultInternetAccess : ${5:Boolean(O)}
	DomainJoinInfo: ${6:AWS::AppStream::Fleet.DomainJoinInfo(O)}
	Name : ${7:String(O)}
	ImageName : ${8:String(O)}
	MaxUserDurationInSeconds : ${9:Integer(O)}
	DisconnectTimeoutInSeconds : ${10:Integer(O)}
	DisplayName : ${11:String(O)}
	InstanceType : ${12:String(R)}
	Tags : [${13:AWS::AppStream::Fleet.Tag(O)}]
	ImageArn : ${14:String(O)}
endsnippet

snippet AWS::Logs::SubscriptionFilter
Type AWS::Logs::SubscriptionFilter
Properties:
	DestinationArn : ${1:String(R)}
	FilterPattern : ${2:String(R)}
	LogGroupName : ${3:String(R)}
	RoleArn : ${4:String(O)}
endsnippet

snippet AWS::Greengrass::FunctionDefinitionVersion
Type AWS::Greengrass::FunctionDefinitionVersion
Properties:
	DefaultConfig: ${1:AWS::Greengrass::FunctionDefinitionVersion.DefaultConfig(O)}
	Functions : [${2:AWS::Greengrass::FunctionDefinitionVersion.Function(R)}]
	FunctionDefinitionId : ${3:String(R)}
endsnippet

snippet AWS::SSM::ResourceDataSync
Type AWS::SSM::ResourceDataSync
Properties:
	KMSKeyArn : ${1:String(O)}
	BucketName : ${2:String(R)}
	BucketRegion : ${3:String(R)}
	SyncFormat : ${4:String(R)}
	SyncName : ${5:String(R)}
	BucketPrefix : ${6:String(O)}
endsnippet

snippet AWS::AmazonMQ::Configuration
Type AWS::AmazonMQ::Configuration
Properties:
	EngineVersion : ${1:String(R)}
	Description : ${2:String(O)}
	EngineType : ${3:String(R)}
	Data : ${4:String(R)}
	Tags : [${5:AWS::AmazonMQ::Configuration.TagsEntry(O)}]
	Name : ${6:String(R)}
endsnippet

snippet AWS::DynamoDB::Table
Type AWS::DynamoDB::Table
Properties:
	AttributeDefinitions : [${1:AWS::DynamoDB::Table.AttributeDefinition(O)}]
	BillingMode : ${2:String(O)}
	GlobalSecondaryIndexes : [${3:AWS::DynamoDB::Table.GlobalSecondaryIndex(O)}]
	KeySchema : [${4:AWS::DynamoDB::Table.KeySchema(R)}]
	LocalSecondaryIndexes : [${5:AWS::DynamoDB::Table.LocalSecondaryIndex(O)}]
	PointInTimeRecoverySpecification: ${6:AWS::DynamoDB::Table.PointInTimeRecoverySpecification(O)}
	ProvisionedThroughput: ${7:AWS::DynamoDB::Table.ProvisionedThroughput(O)}
	SSESpecification: ${8:AWS::DynamoDB::Table.SSESpecification(O)}
	StreamSpecification: ${9:AWS::DynamoDB::Table.StreamSpecification(O)}
	TableName : ${10:String(O)}
	Tags : [${11:AWS::DynamoDB::Table.Tag(O)}]
	TimeToLiveSpecification: ${12:AWS::DynamoDB::Table.TimeToLiveSpecification(O)}
endsnippet

snippet AWS::Logs::Destination
Type AWS::Logs::Destination
Properties:
	DestinationName : ${1:String(R)}
	DestinationPolicy : ${2:String(R)}
	RoleArn : ${3:String(R)}
	TargetArn : ${4:String(R)}
endsnippet

snippet AWS::Redshift::ClusterSecurityGroup
Type AWS::Redshift::ClusterSecurityGroup
Properties:
	Description : ${1:String(R)}
	Tags : [${2:AWS::Redshift::ClusterSecurityGroup.Tag(O)}]
endsnippet

snippet AWS::EC2::EC2Fleet
Type AWS::EC2::EC2Fleet
Properties:
	TargetCapacitySpecification: ${1:AWS::EC2::EC2Fleet.TargetCapacitySpecificationRequest(R)}
	OnDemandOptions: ${2:AWS::EC2::EC2Fleet.OnDemandOptionsRequest(O)}
	Type : ${3:String(O)}
	ExcessCapacityTerminationPolicy : ${4:String(O)}
	TagSpecifications : [${5:AWS::EC2::EC2Fleet.TagSpecification(O)}]
	SpotOptions: ${6:AWS::EC2::EC2Fleet.SpotOptionsRequest(O)}
	ValidFrom : ${7:String(O)}
	ReplaceUnhealthyInstances : ${8:Boolean(O)}
	LaunchTemplateConfigs : [${9:AWS::EC2::EC2Fleet.FleetLaunchTemplateConfigRequest(R)}]
	TerminateInstancesWithExpiration : ${10:Boolean(O)}
	ValidUntil : ${11:String(O)}
endsnippet

snippet AWS::EC2::TransitGatewayRouteTable
Type AWS::EC2::TransitGatewayRouteTable
Properties:
	TransitGatewayId : ${1:String(R)}
	Tags : [${2:AWS::EC2::TransitGatewayRouteTable.Tag(O)}]
endsnippet

snippet AWS::WAF::XssMatchSet
Type AWS::WAF::XssMatchSet
Properties:
	Name : ${1:String(R)}
	XssMatchTuples : [${2:AWS::WAF::XssMatchSet.XssMatchTuple(R)}]
endsnippet

snippet AWS::Route53::HealthCheck
Type AWS::Route53::HealthCheck
Properties:
	HealthCheckConfig: ${1:AWS::Route53::HealthCheck.HealthCheckConfig(R)}
	HealthCheckTags : [${2:AWS::Route53::HealthCheck.HealthCheckTag(O)}]
endsnippet

snippet AWS::Greengrass::GroupVersion
Type AWS::Greengrass::GroupVersion
Properties:
	LoggerDefinitionVersionArn : ${1:String(O)}
	DeviceDefinitionVersionArn : ${2:String(O)}
	FunctionDefinitionVersionArn : ${3:String(O)}
	CoreDefinitionVersionArn : ${4:String(O)}
	ResourceDefinitionVersionArn : ${5:String(O)}
	ConnectorDefinitionVersionArn : ${6:String(O)}
	SubscriptionDefinitionVersionArn : ${7:String(O)}
	GroupId : ${8:String(R)}
endsnippet

snippet AWS::Lambda::Permission
Type AWS::Lambda::Permission
Properties:
	Action : ${1:String(R)}
	EventSourceToken : ${2:String(O)}
	FunctionName : ${3:String(R)}
	Principal : ${4:String(R)}
	SourceAccount : ${5:String(O)}
	SourceArn : ${6:String(O)}
endsnippet

snippet AWS::IoT::Certificate
Type AWS::IoT::Certificate
Properties:
	CertificateSigningRequest : ${1:String(R)}
	Status : ${2:String(R)}
endsnippet

snippet AWS::GuardDuty::IPSet
Type AWS::GuardDuty::IPSet
Properties:
	Format : ${1:String(R)}
	Activate : ${2:Boolean(R)}
	DetectorId : ${3:String(R)}
	Name : ${4:String(O)}
	Location : ${5:String(R)}
endsnippet

snippet AWS::SSM::Association
Type AWS::SSM::Association
Properties:
	AssociationName : ${1:String(O)}
	DocumentVersion : ${2:String(O)}
	InstanceId : ${3:String(O)}
	Name : ${4:String(R)}
	OutputLocation: ${5:AWS::SSM::Association.InstanceAssociationOutputLocation(O)}
	Parameters : [${6:AWS::SSM::Association.ParameterValues(O)}]
	ScheduleExpression : ${7:String(O)}
	Targets : [${8:AWS::SSM::Association.Target(O)}]
endsnippet

snippet AWS::RDS::DBClusterParameterGroup
Type AWS::RDS::DBClusterParameterGroup
Properties:
	Description : ${1:String(R)}
	Family : ${2:String(R)}
	Parameters : ${3:Json(R)}
	Tags : [${4:AWS::RDS::DBClusterParameterGroup.Tag(O)}]
endsnippet

snippet AWS::Athena::NamedQuery
Type AWS::Athena::NamedQuery
Properties:
	Description : ${1:String(O)}
	QueryString : ${2:String(R)}
	Database : ${3:String(R)}
	Name : ${4:String(O)}
endsnippet

snippet AWS::Kinesis::StreamConsumer
Type AWS::Kinesis::StreamConsumer
Properties:
	ConsumerName : ${1:String(R)}
	StreamARN : ${2:String(R)}
endsnippet

snippet AWS::GuardDuty::Master
Type AWS::GuardDuty::Master
Properties:
	DetectorId : ${1:String(R)}
	MasterId : ${2:String(R)}
	InvitationId : ${3:String(O)}
endsnippet

snippet AWS::Inspector::AssessmentTarget
Type AWS::Inspector::AssessmentTarget
Properties:
	AssessmentTargetName : ${1:String(O)}
	ResourceGroupArn : ${2:String(O)}
endsnippet

snippet AWS::S3::BucketPolicy
Type AWS::S3::BucketPolicy
Properties:
	Bucket : ${1:String(R)}
	PolicyDocument : ${2:Json(R)}
endsnippet

snippet AWS::AutoScaling::AutoScalingGroup
Type AWS::AutoScaling::AutoScalingGroup
Properties:
	AutoScalingGroupName : ${1:String(O)}
	AvailabilityZones : [${2:String(O)}]
	Cooldown : ${3:String(O)}
	DesiredCapacity : ${4:String(O)}
	HealthCheckGracePeriod : ${5:Integer(O)}
	HealthCheckType : ${6:String(O)}
	InstanceId : ${7:String(O)}
	LaunchConfigurationName : ${8:String(O)}
	LaunchTemplate: ${9:AWS::AutoScaling::AutoScalingGroup.LaunchTemplateSpecification(O)}
	LifecycleHookSpecificationList : [${10:AWS::AutoScaling::AutoScalingGroup.LifecycleHookSpecification(O)}]
	LoadBalancerNames : [${11:String(O)}]
	MaxSize : ${12:String(R)}
	MetricsCollection : [${13:AWS::AutoScaling::AutoScalingGroup.MetricsCollection(O)}]
	MinSize : ${14:String(R)}
	MixedInstancesPolicy: ${15:AWS::AutoScaling::AutoScalingGroup.MixedInstancesPolicy(O)}
	NotificationConfigurations : [${16:AWS::AutoScaling::AutoScalingGroup.NotificationConfiguration(O)}]
	PlacementGroup : ${17:String(O)}
	ServiceLinkedRoleARN : ${18:String(O)}
	Tags : [${19:AWS::AutoScaling::AutoScalingGroup.TagProperty(O)}]
	TargetGroupARNs : [${20:String(O)}]
	TerminationPolicies : [${21:String(O)}]
	VPCZoneIdentifier : [${22:String(O)}]
endsnippet

snippet AWS::CloudFormation::CustomResource
Type AWS::CloudFormation::CustomResource
Properties:
	ServiceToken : ${1:String(R)}
endsnippet

snippet AWS::Route53Resolver::ResolverEndpoint
Type AWS::Route53Resolver::ResolverEndpoint
Properties:
	IpAddresses : [${1:AWS::Route53Resolver::ResolverEndpoint.IpAddressRequest(R)}]
	Direction : ${2:String(R)}
	SecurityGroupIds : [${3:String(R)}]
	Tags : [${4:AWS::Route53Resolver::ResolverEndpoint.Tag(O)}]
	Name : ${5:String(O)}
endsnippet

snippet AWS::Glue::Crawler
Type AWS::Glue::Crawler
Properties:
	Role : ${1:String(R)}
	Classifiers : [${2:String(O)}]
	Description : ${3:String(O)}
	SchemaChangePolicy: ${4:AWS::Glue::Crawler.SchemaChangePolicy(O)}
	Configuration : ${5:String(O)}
	Schedule: ${6:AWS::Glue::Crawler.Schedule(O)}
	DatabaseName : ${7:String(R)}
	Targets: ${8:AWS::Glue::Crawler.Targets(R)}
	TablePrefix : ${9:String(O)}
	Name : ${10:String(O)}
endsnippet

snippet AWS::ApiGateway::DocumentationVersion
Type AWS::ApiGateway::DocumentationVersion
Properties:
	Description : ${1:String(O)}
	DocumentationVersion : ${2:String(R)}
	RestApiId : ${3:String(R)}
endsnippet

snippet AWS::EC2::VPCDHCPOptionsAssociation
Type AWS::EC2::VPCDHCPOptionsAssociation
Properties:
	DhcpOptionsId : ${1:String(R)}
	VpcId : ${2:String(R)}
endsnippet

snippet AWS::SSM::MaintenanceWindowTask
Type AWS::SSM::MaintenanceWindowTask
Properties:
	MaxErrors : ${1:String(R)}
	Description : ${2:String(O)}
	ServiceRoleArn : ${3:String(R)}
	Priority : ${4:Integer(R)}
	MaxConcurrency : ${5:String(R)}
	Targets : [${6:AWS::SSM::MaintenanceWindowTask.Target(R)}]
	Name : ${7:String(O)}
	TaskArn : ${8:String(R)}
	TaskInvocationParameters: ${9:AWS::SSM::MaintenanceWindowTask.TaskInvocationParameters(O)}
	WindowId : ${10:String(O)}
	TaskParameters : ${11:Json(O)}
	TaskType : ${12:String(R)}
	LoggingInfo: ${13:AWS::SSM::MaintenanceWindowTask.LoggingInfo(O)}
endsnippet

snippet AWS::DMS::ReplicationTask
Type AWS::DMS::ReplicationTask
Properties:
	ReplicationTaskSettings : ${1:String(O)}
	TableMappings : ${2:String(R)}
	ReplicationTaskIdentifier : ${3:String(O)}
	SourceEndpointArn : ${4:String(R)}
	MigrationType : ${5:String(R)}
	TargetEndpointArn : ${6:String(R)}
	ReplicationInstanceArn : ${7:String(R)}
	Tags : [${8:AWS::DMS::ReplicationTask.Tag(O)}]
	CdcStartTime : ${9:Double(O)}
endsnippet

snippet AWS::ServiceDiscovery::PublicDnsNamespace
Type AWS::ServiceDiscovery::PublicDnsNamespace
Properties:
	Description : ${1:String(O)}
	Name : ${2:String(R)}
endsnippet

snippet AWS::ApiGateway::UsagePlanKey
Type AWS::ApiGateway::UsagePlanKey
Properties:
	KeyId : ${1:String(R)}
	KeyType : ${2:String(R)}
	UsagePlanId : ${3:String(R)}
endsnippet

snippet AWS::EMR::SecurityConfiguration
Type AWS::EMR::SecurityConfiguration
Properties:
	Name : ${1:String(O)}
	SecurityConfiguration : ${2:Json(R)}
endsnippet

snippet AWS::Cognito::UserPoolUserToGroupAttachment
Type AWS::Cognito::UserPoolUserToGroupAttachment
Properties:
	GroupName : ${1:String(R)}
	UserPoolId : ${2:String(R)}
	Username : ${3:String(R)}
endsnippet

snippet AWS::DMS::ReplicationInstance
Type AWS::DMS::ReplicationInstance
Properties:
	ReplicationInstanceIdentifier : ${1:String(O)}
	EngineVersion : ${2:String(O)}
	KmsKeyId : ${3:String(O)}
	AvailabilityZone : ${4:String(O)}
	PreferredMaintenanceWindow : ${5:String(O)}
	AutoMinorVersionUpgrade : ${6:Boolean(O)}
	ReplicationSubnetGroupIdentifier : ${7:String(O)}
	AllocatedStorage : ${8:Integer(O)}
	VpcSecurityGroupIds : [${9:String(O)}]
	AllowMajorVersionUpgrade : ${10:Boolean(O)}
	ReplicationInstanceClass : ${11:String(R)}
	PubliclyAccessible : ${12:Boolean(O)}
	MultiAZ : ${13:Boolean(O)}
	Tags : [${14:AWS::DMS::ReplicationInstance.Tag(O)}]
endsnippet

snippet AWS::AutoScaling::ScheduledAction
Type AWS::AutoScaling::ScheduledAction
Properties:
	AutoScalingGroupName : ${1:String(R)}
	DesiredCapacity : ${2:Integer(O)}
	EndTime : ${3:String(O)}
	MaxSize : ${4:Integer(O)}
	MinSize : ${5:Integer(O)}
	Recurrence : ${6:String(O)}
	StartTime : ${7:String(O)}
endsnippet

snippet AWS::Glue::Classifier
Type AWS::Glue::Classifier
Properties:
	XMLClassifier: ${1:AWS::Glue::Classifier.XMLClassifier(O)}
	JsonClassifier: ${2:AWS::Glue::Classifier.JsonClassifier(O)}
	GrokClassifier: ${3:AWS::Glue::Classifier.GrokClassifier(O)}
endsnippet

# }}}
# CFn Properties {{{
snippet AWS::CodeBuild::Project.Artifacts "" sw

	Path : ${1:String(O)}
	Type : ${2:String(R)}
	ArtifactIdentifier : ${3:String(O)}
	OverrideArtifactName : ${4:Boolean(O)}
	Packaging : ${5:String(O)}
	EncryptionDisabled : ${6:Boolean(O)}
	Location : ${7:String(O)}
	Name : ${8:String(O)}
	NamespaceType : ${9:String(O)}
endsnippet

snippet AWS::AppStream::Fleet.ComputeCapacity "" sw

	DesiredInstances : ${1:Integer(R)}
endsnippet

snippet AWS::WAFRegional::ByteMatchSet.ByteMatchTuple "" sw

	TargetString : ${1:String(O)}
	TargetStringBase64 : ${2:String(O)}
	PositionalConstraint : ${3:String(R)}
	TextTransformation : ${4:String(R)}
	FieldToMatch : ${5:AWS::WAFRegional::ByteMatchSet.FieldToMatch(R)}
endsnippet

snippet AWS::Greengrass::CoreDefinition.Core "" sw

	SyncShadow : ${1:Boolean(O)}
	ThingArn : ${2:String(R)}
	Id : ${3:String(R)}
	CertificateArn : ${4:String(R)}
endsnippet

snippet AWS::ElasticLoadBalancingV2::ListenerCertificate.Certificate "" sw

	CertificateArn : ${1:String(O)}
endsnippet

snippet AWS::CodePipeline::Pipeline.InputArtifact "" sw

	Name : ${1:String(R)}
endsnippet

snippet AWS::S3::Bucket.BucketEncryption "" sw

	ServerSideEncryptionConfiguration : [${1:AWS::S3::Bucket.ServerSideEncryptionRule(R)}]
endsnippet

snippet AWS::Greengrass::FunctionDefinitionVersion.FunctionConfiguration "" sw

	MemorySize : ${1:Integer(R)}
	Pinned : ${2:Boolean(O)}
	ExecArgs : ${3:String(O)}
	Timeout : ${4:Integer(R)}
	EncodingType : ${5:String(O)}
	Environment : ${6:AWS::Greengrass::FunctionDefinitionVersion.Environment(O)}
	Executable : ${7:String(O)}
endsnippet

snippet AWS::DynamoDB::Table.TimeToLiveSpecification "" sw

	AttributeName : ${1:String(R)}
	Enabled : ${2:Boolean(R)}
endsnippet

snippet AWS::CodeDeploy::DeploymentGroup.LoadBalancerInfo "" sw

	ElbInfoList : [${1:AWS::CodeDeploy::DeploymentGroup.ELBInfo(O)}]
	TargetGroupInfoList : [${2:AWS::CodeDeploy::DeploymentGroup.TargetGroupInfo(O)}]
endsnippet

snippet AWS::ElasticBeanstalk::Environment.OptionSetting "" sw

	Namespace : ${1:String(R)}
	OptionName : ${2:String(R)}
	ResourceName : ${3:String(O)}
	Value : ${4:String(O)}
endsnippet

snippet AWS::Budgets::Budget.NotificationWithSubscribers "" sw

	Subscribers : [${1:AWS::Budgets::Budget.Subscriber(R)}]
	Notification : ${2:AWS::Budgets::Budget.Notification(R)}
endsnippet

snippet AWS::CodeDeploy::DeploymentGroup.RevisionLocation "" sw

	GitHubLocation : ${1:AWS::CodeDeploy::DeploymentGroup.GitHubLocation(O)}
	RevisionType : ${2:String(O)}
	S3Location : ${3:AWS::CodeDeploy::DeploymentGroup.S3Location(O)}
endsnippet

snippet AWS::DataPipeline::Pipeline.ParameterAttribute "" sw

	Key : ${1:String(R)}
	StringValue : ${2:String(R)}
endsnippet

snippet AWS::S3::Bucket.NotificationFilter "" sw

	S3Key : ${1:AWS::S3::Bucket.S3KeyFilter(R)}
endsnippet

snippet AWS::Events::Rule.SqsParameters "" sw

	MessageGroupId : ${1:String(R)}
endsnippet

snippet AWS::Events::Rule.RunCommandParameters "" sw

	RunCommandTargets : [${1:AWS::Events::Rule.RunCommandTarget(R)}]
endsnippet

snippet AWS::CertificateManager::Certificate.DomainValidationOption "" sw

	DomainName : ${1:String(R)}
	ValidationDomain : ${2:String(R)}
endsnippet

snippet AWS::DMS::Endpoint.KinesisSettings "" sw

	MessageFormat : ${1:String(O)}
	StreamArn : ${2:String(O)}
	ServiceAccessRoleArn : ${3:String(O)}
endsnippet

snippet AWS::IoTAnalytics::Dataset.DatasetContentVersionValue "" sw

	DatasetName : ${1:String(O)}
endsnippet

snippet AWS::CloudTrail::Trail.EventSelector "" sw

	DataResources : [${1:AWS::CloudTrail::Trail.DataResource(O)}]
	IncludeManagementEvents : ${2:Boolean(O)}
	ReadWriteType : ${3:String(O)}
endsnippet

snippet AWS::ServiceCatalog::CloudFormationProduct.ProvisioningArtifactProperties "" sw

	Description : ${1:String(O)}
	Info : ${2:Json(R)}
	Name : ${3:String(O)}
endsnippet

snippet AWS::S3::Bucket.RoutingRuleCondition "" sw

	HttpErrorCodeReturnedEquals : ${1:String(O)}
	KeyPrefixEquals : ${2:String(O)}
endsnippet

snippet AWS::AppSync::DataSource.AuthorizationConfig "" sw

	AwsIamConfig : ${1:AWS::AppSync::DataSource.AwsIamConfig(O)}
	AuthorizationType : ${2:String(R)}
endsnippet

snippet AWS::KinesisFirehose::DeliveryStream.ElasticsearchDestinationConfiguration "" sw

	BufferingHints : ${1:AWS::KinesisFirehose::DeliveryStream.ElasticsearchBufferingHints(R)}
	CloudWatchLoggingOptions : ${2:AWS::KinesisFirehose::DeliveryStream.CloudWatchLoggingOptions(O)}
	DomainARN : ${3:String(R)}
	IndexName : ${4:String(R)}
	IndexRotationPeriod : ${5:String(R)}
	ProcessingConfiguration : ${6:AWS::KinesisFirehose::DeliveryStream.ProcessingConfiguration(O)}
	RetryOptions : ${7:AWS::KinesisFirehose::DeliveryStream.ElasticsearchRetryOptions(R)}
	RoleARN : ${8:String(R)}
	S3BackupMode : ${9:String(R)}
	S3Configuration : ${10:AWS::KinesisFirehose::DeliveryStream.S3DestinationConfiguration(R)}
	TypeName : ${11:String(R)}
endsnippet

snippet AWS::EC2::SecurityGroup.Ingress "" sw

	CidrIp : ${1:String(O)}
	CidrIpv6 : ${2:String(O)}
	Description : ${3:String(O)}
	FromPort : ${4:Integer(O)}
	IpProtocol : ${5:String(R)}
	SourcePrefixListId : ${6:String(O)}
	SourceSecurityGroupId : ${7:String(O)}
	SourceSecurityGroupName : ${8:String(O)}
	SourceSecurityGroupOwnerId : ${9:String(O)}
	ToPort : ${10:Integer(O)}
endsnippet

snippet AWS::S3::Bucket.LifecycleConfiguration "" sw

	Rules : [${1:AWS::S3::Bucket.Rule(R)}]
endsnippet

snippet AWS::AutoScaling::LaunchConfiguration.BlockDeviceMapping "" sw

	DeviceName : ${1:String(R)}
	Ebs : ${2:AWS::AutoScaling::LaunchConfiguration.BlockDevice(O)}
	NoDevice : ${3:Boolean(O)}
	VirtualName : ${4:String(O)}
endsnippet

snippet AWS::DMS::Endpoint.S3Settings "" sw

	ExternalTableDefinition : ${1:String(O)}
	BucketName : ${2:String(O)}
	BucketFolder : ${3:String(O)}
	CsvRowDelimiter : ${4:String(O)}
	CsvDelimiter : ${5:String(O)}
	ServiceAccessRoleArn : ${6:String(O)}
	CompressionType : ${7:String(O)}
endsnippet

snippet AWS::CloudFront::Distribution.Cookies "" sw

	WhitelistedNames : [${1:String(O)}]
	Forward : ${2:String(R)}
endsnippet

snippet AWS::Glue::Partition.SerdeInfo "" sw

	Parameters : ${1:Json(O)}
	SerializationLibrary : ${2:String(O)}
	Name : ${3:String(O)}
endsnippet

snippet AWS::S3::Bucket.LambdaConfiguration "" sw

	Event : ${1:String(R)}
	Filter : ${2:AWS::S3::Bucket.NotificationFilter(O)}
	Function : ${3:String(R)}
endsnippet

snippet AWS::Batch::JobDefinition.NodeProperties "" sw

	MainNode : ${1:Integer(R)}
	NodeRangeProperties : [${2:AWS::Batch::JobDefinition.NodeRangeProperty(R)}]
	NumNodes : ${3:Integer(R)}
endsnippet

snippet AWS::WAF::Rule.Predicate "" sw

	DataId : ${1:String(R)}
	Negated : ${2:Boolean(R)}
	Type : ${3:String(R)}
endsnippet

snippet AWS::ApiGateway::Deployment.DeploymentCanarySettings "" sw

	PercentTraffic : ${1:Double(O)}
	StageVariableOverrides : [${2:String(O)}]
	UseStageCache : ${3:Boolean(O)}
endsnippet

snippet AWS::EMR::Step.HadoopJarStepConfig "" sw

	Args : [${1:String(O)}]
	Jar : ${2:String(R)}
	MainClass : ${3:String(O)}
	StepProperties : [${4:AWS::EMR::Step.KeyValue(O)}]
endsnippet

snippet AWS::EMR::InstanceGroupConfig.EbsBlockDeviceConfig "" sw

	VolumeSpecification : ${1:AWS::EMR::InstanceGroupConfig.VolumeSpecification(R)}
	VolumesPerInstance : ${2:Integer(O)}
endsnippet

snippet AWS::CodeDeploy::DeploymentGroup.S3Location "" sw

	Bucket : ${1:String(R)}
	BundleType : ${2:String(O)}
	ETag : ${3:String(O)}
	Key : ${4:String(R)}
	Version : ${5:String(O)}
endsnippet

snippet AWS::EC2::LaunchTemplate.PrivateIpAdd "" sw

	PrivateIpAddress : ${1:String(O)}
	Primary : ${2:Boolean(O)}
endsnippet

snippet AWS::AutoScaling::AutoScalingGroup.LaunchTemplateOverrides "" sw

	InstanceType : ${1:String(O)}
endsnippet

snippet AWS::S3::Bucket.ReplicationRule "" sw

	Destination : ${1:AWS::S3::Bucket.ReplicationDestination(R)}
	Id : ${2:String(O)}
	Prefix : ${3:String(R)}
	SourceSelectionCriteria : ${4:AWS::S3::Bucket.SourceSelectionCriteria(O)}
	Status : ${5:String(R)}
endsnippet

snippet AWS::CloudFront::Distribution.LambdaFunctionAssociation "" sw

	EventType : ${1:String(O)}
	LambdaFunctionARN : ${2:String(O)}
endsnippet

snippet AWS::KinesisFirehose::DeliveryStream.ElasticsearchBufferingHints "" sw

	IntervalInSeconds : ${1:Integer(R)}
	SizeInMBs : ${2:Integer(R)}
endsnippet

snippet AWS::EC2::SpotFleet.ClassicLoadBalancer "" sw

	Name : ${1:String(R)}
endsnippet

snippet AWS::EC2::LaunchTemplate.LaunchTemplateData "" sw

	SecurityGroups : [${1:String(O)}]
	TagSpecifications : [${2:AWS::EC2::LaunchTemplate.TagSpecification(O)}]
	UserData : ${3:String(O)}
	BlockDeviceMappings : [${4:AWS::EC2::LaunchTemplate.BlockDeviceMapping(O)}]
	IamInstanceProfile : ${5:AWS::EC2::LaunchTemplate.IamInstanceProfile(O)}
	KernelId : ${6:String(O)}
	EbsOptimized : ${7:Boolean(O)}
	ElasticGpuSpecifications : [${8:AWS::EC2::LaunchTemplate.ElasticGpuSpecification(O)}]
	ElasticInferenceAccelerators : [${9:AWS::EC2::LaunchTemplate.LaunchTemplateElasticInferenceAccelerator(O)}]
	Placement : ${10:AWS::EC2::LaunchTemplate.Placement(O)}
	NetworkInterfaces : [${11:AWS::EC2::LaunchTemplate.NetworkInterface(O)}]
	ImageId : ${12:String(O)}
	InstanceType : ${13:String(O)}
	Monitoring : ${14:AWS::EC2::LaunchTemplate.Monitoring(O)}
	HibernationOptions : ${15:AWS::EC2::LaunchTemplate.HibernationOptions(O)}
	LicenseSpecifications : [${16:AWS::EC2::LaunchTemplate.LicenseSpecification(O)}]
	InstanceInitiatedShutdownBehavior : ${17:String(O)}
	CpuOptions : ${18:AWS::EC2::LaunchTemplate.CpuOptions(O)}
	SecurityGroupIds : [${19:String(O)}]
	KeyName : ${20:String(O)}
	DisableApiTermination : ${21:Boolean(O)}
	InstanceMarketOptions : ${22:AWS::EC2::LaunchTemplate.InstanceMarketOptions(O)}
	RamDiskId : ${23:String(O)}
	CapacityReservationSpecification : ${24:AWS::EC2::LaunchTemplate.CapacityReservationSpecification(O)}
	CreditSpecification : ${25:AWS::EC2::LaunchTemplate.CreditSpecification(O)}
endsnippet

snippet AWS::Batch::ComputeEnvironment.LaunchTemplateSpecification "" sw

	LaunchTemplateName : ${1:String(O)}
	Version : ${2:String(O)}
	LaunchTemplateId : ${3:String(O)}
endsnippet

snippet AWS::Glue::Database.DatabaseInput "" sw

	LocationUri : ${1:String(O)}
	Description : ${2:String(O)}
	Parameters : ${3:Json(O)}
	Name : ${4:String(O)}
endsnippet

snippet AWS::AutoScaling::AutoScalingGroup.LifecycleHookSpecification "" sw

	DefaultResult : ${1:String(O)}
	HeartbeatTimeout : ${2:Integer(O)}
	LifecycleHookName : ${3:String(R)}
	LifecycleTransition : ${4:String(R)}
	NotificationMetadata : ${5:String(O)}
	NotificationTargetARN : ${6:String(O)}
	RoleARN : ${7:String(O)}
endsnippet

snippet AWS::Greengrass::FunctionDefinitionVersion.DefaultConfig "" sw

	Execution : ${1:AWS::Greengrass::FunctionDefinitionVersion.Execution(R)}
endsnippet

snippet AWS::ElasticLoadBalancingV2::Listener.AuthenticateOidcConfig "" sw

	AuthenticationRequestExtraParams : [${1:String(O)}]
	AuthorizationEndpoint : ${2:String(R)}
	ClientId : ${3:String(R)}
	ClientSecret : ${4:String(R)}
	Issuer : ${5:String(R)}
	OnUnauthenticatedRequest : ${6:String(O)}
	Scope : ${7:String(O)}
	SessionCookieName : ${8:String(O)}
	SessionTimeout : ${9:Long(O)}
	TokenEndpoint : ${10:String(R)}
	UserInfoEndpoint : ${11:String(R)}
endsnippet

snippet AWS::Elasticsearch::Domain.VPCOptions "" sw

	SecurityGroupIds : [${1:String(O)}]
	SubnetIds : [${2:String(O)}]
endsnippet

snippet AWS::ElasticLoadBalancing::LoadBalancer.HealthCheck "" sw

	HealthyThreshold : ${1:String(R)}
	Interval : ${2:String(R)}
	Target : ${3:String(R)}
	Timeout : ${4:String(R)}
	UnhealthyThreshold : ${5:String(R)}
endsnippet

snippet AWS::Cognito::UserPool.PasswordPolicy "" sw

	RequireNumbers : ${1:Boolean(O)}
	MinimumLength : ${2:Integer(O)}
	RequireUppercase : ${3:Boolean(O)}
	RequireLowercase : ${4:Boolean(O)}
	RequireSymbols : ${5:Boolean(O)}
endsnippet

snippet AWS::EC2::SpotFleet.LaunchTemplateConfig "" sw

	LaunchTemplateSpecification : ${1:AWS::EC2::SpotFleet.FleetLaunchTemplateSpecification(O)}
	Overrides : [${2:AWS::EC2::SpotFleet.LaunchTemplateOverrides(O)}]
endsnippet

snippet AWS::EC2::Instance.ElasticGpuSpecification "" sw

	Type : ${1:String(R)}
endsnippet

snippet AWS::CodeDeploy::DeploymentGroup.TriggerConfig "" sw

	TriggerEvents : [${1:String(O)}]
	TriggerName : ${2:String(O)}
	TriggerTargetArn : ${3:String(O)}
endsnippet

snippet AWS::Config::ConfigurationAggregator.OrganizationAggregationSource "" sw

	AllAwsRegions : ${1:Boolean(O)}
	AwsRegions : [${2:String(O)}]
	RoleArn : ${3:String(R)}
endsnippet

snippet AWS::DataPipeline::Pipeline.PipelineTag "" sw

	Key : ${1:String(R)}
	Value : ${2:String(R)}
endsnippet

snippet AWS::OpsWorks::Layer.ShutdownEventConfiguration "" sw

	DelayUntilElbConnectionsDrained : ${1:Boolean(O)}
	ExecutionTimeout : ${2:Integer(O)}
endsnippet

snippet AWS::Batch::JobDefinition.Volumes "" sw

	Host : ${1:AWS::Batch::JobDefinition.VolumesHost(O)}
	Name : ${2:String(O)}
endsnippet

snippet AWS::ApplicationAutoScaling::ScalingPolicy.StepScalingPolicyConfiguration "" sw

	AdjustmentType : ${1:String(O)}
	Cooldown : ${2:Integer(O)}
	MetricAggregationType : ${3:String(O)}
	MinAdjustmentMagnitude : ${4:Integer(O)}
	StepAdjustments : [${5:AWS::ApplicationAutoScaling::ScalingPolicy.StepAdjustment(O)}]
endsnippet

snippet AWS::IoTAnalytics::Pipeline.DeviceShadowEnrich "" sw

	Attribute : ${1:String(O)}
	Next : ${2:String(O)}
	ThingName : ${3:String(O)}
	RoleArn : ${4:String(O)}
	Name : ${5:String(O)}
endsnippet

snippet AWS::CloudFront::Distribution.CustomOriginConfig "" sw

	OriginReadTimeout : ${1:Integer(O)}
	HTTPSPort : ${2:Integer(O)}
	OriginKeepaliveTimeout : ${3:Integer(O)}
	OriginSSLProtocols : [${4:String(O)}]
	HTTPPort : ${5:Integer(O)}
	OriginProtocolPolicy : ${6:String(R)}
endsnippet

snippet AWS::S3::Bucket.CorsRule "" sw

	AllowedHeaders : [${1:String(O)}]
	AllowedMethods : [${2:String(R)}]
	AllowedOrigins : [${3:String(R)}]
	ExposedHeaders : [${4:String(O)}]
	Id : ${5:String(O)}
	MaxAge : ${6:Integer(O)}
endsnippet

snippet AWS::IoT::TopicRule.S3Action "" sw

	BucketName : ${1:String(R)}
	Key : ${2:String(R)}
	RoleArn : ${3:String(R)}
endsnippet

snippet AWS::EC2::NetworkAclEntry.Icmp "" sw

	Code : ${1:Integer(O)}
	Type : ${2:Integer(O)}
endsnippet

snippet AWS::CodeBuild::Project.LogsConfig "" sw

	CloudWatchLogs : ${1:AWS::CodeBuild::Project.CloudWatchLogsConfig(O)}
	S3Logs : ${2:AWS::CodeBuild::Project.S3LogsConfig(O)}
endsnippet

snippet AWS::DynamoDB::Table.AttributeDefinition "" sw

	AttributeName : ${1:String(R)}
	AttributeType : ${2:String(R)}
endsnippet

snippet AWS::CloudFront::CloudFrontOriginAccessIdentity.CloudFrontOriginAccessIdentityConfig "" sw

	Comment : ${1:String(R)}
endsnippet

snippet AWS::KinesisFirehose::DeliveryStream.SplunkDestinationConfiguration "" sw

	CloudWatchLoggingOptions : ${1:AWS::KinesisFirehose::DeliveryStream.CloudWatchLoggingOptions(O)}
	HECAcknowledgmentTimeoutInSeconds : ${2:Integer(O)}
	HECEndpoint : ${3:String(R)}
	HECEndpointType : ${4:String(R)}
	HECToken : ${5:String(R)}
	ProcessingConfiguration : ${6:AWS::KinesisFirehose::DeliveryStream.ProcessingConfiguration(O)}
	RetryOptions : ${7:AWS::KinesisFirehose::DeliveryStream.SplunkRetryOptions(O)}
	S3BackupMode : ${8:String(O)}
	S3Configuration : ${9:AWS::KinesisFirehose::DeliveryStream.S3DestinationConfiguration(R)}
endsnippet

snippet AWS::AutoScaling::AutoScalingGroup.MixedInstancesPolicy "" sw

	InstancesDistribution : ${1:AWS::AutoScaling::AutoScalingGroup.InstancesDistribution(O)}
	LaunchTemplate : ${2:AWS::AutoScaling::AutoScalingGroup.LaunchTemplate(R)}
endsnippet

snippet AWS::Route53Resolver::ResolverEndpoint.IpAddressRequest "" sw

	Ip : ${1:String(O)}
	SubnetId : ${2:String(R)}
endsnippet

snippet AWS::IoTAnalytics::Pipeline.Activity "" sw

	SelectAttributes : ${1:AWS::IoTAnalytics::Pipeline.SelectAttributes(O)}
	Datastore : ${2:AWS::IoTAnalytics::Pipeline.Datastore(O)}
	Filter : ${3:AWS::IoTAnalytics::Pipeline.Filter(O)}
	AddAttributes : ${4:AWS::IoTAnalytics::Pipeline.AddAttributes(O)}
	Channel : ${5:AWS::IoTAnalytics::Pipeline.Channel(O)}
	DeviceShadowEnrich : ${6:AWS::IoTAnalytics::Pipeline.DeviceShadowEnrich(O)}
	Math : ${7:AWS::IoTAnalytics::Pipeline.Math(O)}
	Lambda : ${8:AWS::IoTAnalytics::Pipeline.Lambda(O)}
	DeviceRegistryEnrich : ${9:AWS::IoTAnalytics::Pipeline.DeviceRegistryEnrich(O)}
	RemoveAttributes : ${10:AWS::IoTAnalytics::Pipeline.RemoveAttributes(O)}
endsnippet

snippet AWS::SageMaker::EndpointConfig.ProductionVariant "" sw

	ModelName : ${1:String(R)}
	VariantName : ${2:String(R)}
	InitialInstanceCount : ${3:Integer(R)}
	InstanceType : ${4:String(R)}
	AcceleratorType : ${5:String(O)}
	InitialVariantWeight : ${6:Double(R)}
endsnippet

snippet AWS::Greengrass::FunctionDefinition.Execution "" sw

	IsolationMode : ${1:String(O)}
	RunAs : ${2:AWS::Greengrass::FunctionDefinition.RunAs(O)}
endsnippet

snippet AWS::AppSync::DataSource.RelationalDatabaseConfig "" sw

	RdsHttpEndpointConfig : ${1:AWS::AppSync::DataSource.RdsHttpEndpointConfig(O)}
	RelationalDatabaseSourceType : ${2:String(R)}
endsnippet

snippet AWS::DirectoryService::MicrosoftAD.VpcSettings "" sw

	SubnetIds : [${1:String(R)}]
	VpcId : ${2:String(R)}
endsnippet

snippet AWS::Lambda::Function.VpcConfig "" sw

	SecurityGroupIds : [${1:String(R)}]
	SubnetIds : [${2:String(R)}]
endsnippet

snippet AWS::EC2::LaunchTemplate.InstanceMarketOptions "" sw

	SpotOptions : ${1:AWS::EC2::LaunchTemplate.SpotOptions(O)}
	MarketType : ${2:String(O)}
endsnippet

snippet AWS::Batch::JobDefinition.RetryStrategy "" sw

	Attempts : ${1:Integer(O)}
endsnippet

snippet AWS::CodePipeline::Pipeline.ActionDeclaration "" sw

	ActionTypeId : ${1:AWS::CodePipeline::Pipeline.ActionTypeId(R)}
	Configuration : ${2:Json(O)}
	InputArtifacts : [${3:AWS::CodePipeline::Pipeline.InputArtifact(O)}]
	Name : ${4:String(R)}
	OutputArtifacts : [${5:AWS::CodePipeline::Pipeline.OutputArtifact(O)}]
	Region : ${6:String(O)}
	RoleArn : ${7:String(O)}
	RunOrder : ${8:Integer(O)}
endsnippet

snippet AWS::EMR::InstanceGroupConfig.Configuration "" sw

	Classification : ${1:String(O)}
	ConfigurationProperties : [${2:String(O)}]
	Configurations : [${3:AWS::EMR::InstanceGroupConfig.Configuration(O)}]
endsnippet

snippet AWS::Redshift::ClusterParameterGroup.Parameter "" sw

	ParameterName : ${1:String(R)}
	ParameterValue : ${2:String(R)}
endsnippet

snippet AWS::EMR::InstanceFleetConfig.VolumeSpecification "" sw

	Iops : ${1:Integer(O)}
	SizeInGB : ${2:Integer(R)}
	VolumeType : ${3:String(R)}
endsnippet

snippet AWS::WAF::SqlInjectionMatchSet.SqlInjectionMatchTuple "" sw

	FieldToMatch : ${1:AWS::WAF::SqlInjectionMatchSet.FieldToMatch(R)}
	TextTransformation : ${2:String(R)}
endsnippet

snippet AWS::EMR::Cluster.InstanceGroupConfig "" sw

	AutoScalingPolicy : ${1:AWS::EMR::Cluster.AutoScalingPolicy(O)}
	BidPrice : ${2:String(O)}
	Configurations : [${3:AWS::EMR::Cluster.Configuration(O)}]
	EbsConfiguration : ${4:AWS::EMR::Cluster.EbsConfiguration(O)}
	InstanceCount : ${5:Integer(R)}
	InstanceType : ${6:String(R)}
	Market : ${7:String(O)}
	Name : ${8:String(O)}
endsnippet

snippet AWS::EC2::LaunchTemplate.CreditSpecification "" sw

	CpuCredits : ${1:String(O)}
endsnippet

snippet AWS::Redshift::Cluster.LoggingProperties "" sw

	BucketName : ${1:String(R)}
	S3KeyPrefix : ${2:String(O)}
endsnippet

snippet AWS::Route53Resolver::ResolverRule.TargetAddress "" sw

	Ip : ${1:String(R)}
	Port : ${2:String(R)}
endsnippet

snippet AWS::ElasticLoadBalancingV2::TargetGroup.TargetGroupAttribute "" sw

	Key : ${1:String(O)}
	Value : ${2:String(O)}
endsnippet

snippet AWS::OpsWorks::App.DataSource "" sw

	Arn : ${1:String(O)}
	DatabaseName : ${2:String(O)}
	Type : ${3:String(O)}
endsnippet

snippet AWS::S3::Bucket.Destination "" sw

	BucketAccountId : ${1:String(O)}
	BucketArn : ${2:String(R)}
	Format : ${3:String(R)}
	Prefix : ${4:String(O)}
endsnippet

snippet AWS::WAF::WebACL.WafAction "" sw

	Type : ${1:String(R)}
endsnippet

snippet AWS::S3::Bucket.ServerSideEncryptionRule "" sw

	ServerSideEncryptionByDefault : ${1:AWS::S3::Bucket.ServerSideEncryptionByDefault(O)}
endsnippet

snippet AWS::WAFRegional::WebACL.Rule "" sw

	Action : ${1:AWS::WAFRegional::WebACL.Action(R)}
	Priority : ${2:Integer(R)}
	RuleId : ${3:String(R)}
endsnippet

snippet AWS::RDS::DBSecurityGroup.Ingress "" sw

	CIDRIP : ${1:String(O)}
	EC2SecurityGroupId : ${2:String(O)}
	EC2SecurityGroupName : ${3:String(O)}
	EC2SecurityGroupOwnerId : ${4:String(O)}
endsnippet

snippet AWS::WAF::IPSet.IPSetDescriptor "" sw

	Type : ${1:String(R)}
	Value : ${2:String(R)}
endsnippet

snippet AWS::SSM::Association.InstanceAssociationOutputLocation "" sw

	S3Location : ${1:AWS::SSM::Association.S3OutputLocation(O)}
endsnippet

snippet AWS::Glue::Partition.StorageDescriptor "" sw

	StoredAsSubDirectories : ${1:Boolean(O)}
	Parameters : ${2:Json(O)}
	BucketColumns : [${3:String(O)}]
	SkewedInfo : ${4:AWS::Glue::Partition.SkewedInfo(O)}
	InputFormat : ${5:String(O)}
	NumberOfBuckets : ${6:Integer(O)}
	OutputFormat : ${7:String(O)}
	Columns : [${8:AWS::Glue::Partition.Column(O)}]
	SerdeInfo : ${9:AWS::Glue::Partition.SerdeInfo(O)}
	SortColumns : [${10:AWS::Glue::Partition.Order(O)}]
	Compressed : ${11:Boolean(O)}
	Location : ${12:String(O)}
endsnippet

snippet AWS::Glue::Trigger.Action "" sw

	JobName : ${1:String(O)}
	Arguments : ${2:Json(O)}
endsnippet

snippet AWS::EC2::Instance.NetworkInterface "" sw

	AssociatePublicIpAddress : ${1:Boolean(O)}
	DeleteOnTermination : ${2:Boolean(O)}
	Description : ${3:String(O)}
	DeviceIndex : ${4:String(R)}
	GroupSet : [${5:String(O)}]
	Ipv6AddressCount : ${6:Integer(O)}
	Ipv6Addresses : [${7:AWS::EC2::Instance.InstanceIpv6Address(O)}]
	NetworkInterfaceId : ${8:String(O)}
	PrivateIpAddress : ${9:String(O)}
	PrivateIpAddresses : [${10:AWS::EC2::Instance.PrivateIpAddressSpecification(O)}]
	SecondaryPrivateIpAddressCount : ${11:Integer(O)}
	SubnetId : ${12:String(O)}
endsnippet

snippet AWS::ApiGateway::Deployment.MethodSetting "" sw

	CacheDataEncrypted : ${1:Boolean(O)}
	CacheTtlInSeconds : ${2:Integer(O)}
	CachingEnabled : ${3:Boolean(O)}
	DataTraceEnabled : ${4:Boolean(O)}
	HttpMethod : ${5:String(O)}
	LoggingLevel : ${6:String(O)}
	MetricsEnabled : ${7:Boolean(O)}
	ResourcePath : ${8:String(O)}
	ThrottlingBurstLimit : ${9:Integer(O)}
	ThrottlingRateLimit : ${10:Double(O)}
endsnippet

snippet AWS::EC2::SpotFleet.IamInstanceProfileSpecification "" sw

	Arn : ${1:String(O)}
endsnippet

snippet AWS::AutoScalingPlans::ScalingPlan.ApplicationSource "" sw

	CloudFormationStackARN : ${1:String(O)}
	TagFilters : [${2:AWS::AutoScalingPlans::ScalingPlan.TagFilter(O)}]
endsnippet

snippet AWS::EMR::Cluster.SpotProvisioningSpecification "" sw

	BlockDurationMinutes : ${1:Integer(O)}
	TimeoutAction : ${2:String(R)}
	TimeoutDurationMinutes : ${3:Integer(R)}
endsnippet

snippet AWS::OpsWorks::Layer.VolumeConfiguration "" sw

	Encrypted : ${1:Boolean(O)}
	Iops : ${2:Integer(O)}
	MountPoint : ${3:String(O)}
	NumberOfDisks : ${4:Integer(O)}
	RaidLevel : ${5:Integer(O)}
	Size : ${6:Integer(O)}
	VolumeType : ${7:String(O)}
endsnippet

snippet AWS::AutoScaling::ScalingPolicy.MetricDimension "" sw

	Name : ${1:String(R)}
	Value : ${2:String(R)}
endsnippet

snippet AWS::EMR::Cluster.BootstrapActionConfig "" sw

	Name : ${1:String(R)}
	ScriptBootstrapAction : ${2:AWS::EMR::Cluster.ScriptBootstrapActionConfig(R)}
endsnippet

snippet AWS::EC2::SpotFleet.InstanceNetworkInterfaceSpecification "" sw

	AssociatePublicIpAddress : ${1:Boolean(O)}
	DeleteOnTermination : ${2:Boolean(O)}
	Description : ${3:String(O)}
	DeviceIndex : ${4:Integer(O)}
	Groups : [${5:String(O)}]
	Ipv6AddressCount : ${6:Integer(O)}
	Ipv6Addresses : [${7:AWS::EC2::SpotFleet.InstanceIpv6Address(O)}]
	NetworkInterfaceId : ${8:String(O)}
	PrivateIpAddresses : [${9:AWS::EC2::SpotFleet.PrivateIpAddressSpecification(O)}]
	SecondaryPrivateIpAddressCount : ${10:Integer(O)}
	SubnetId : ${11:String(O)}
endsnippet

snippet AWS::EMR::InstanceFleetConfig.SpotProvisioningSpecification "" sw

	BlockDurationMinutes : ${1:Integer(O)}
	TimeoutAction : ${2:String(R)}
	TimeoutDurationMinutes : ${3:Integer(R)}
endsnippet

snippet AWS::ECS::TaskDefinition.DockerVolumeConfiguration "" sw

	Autoprovision : ${1:Boolean(O)}
	Driver : ${2:String(O)}
	DriverOpts : [${3:String(O)}]
	Labels : [${4:String(O)}]
	Scope : ${5:String(O)}
endsnippet

snippet AWS::AutoScaling::AutoScalingGroup.LaunchTemplateSpecification "" sw

	LaunchTemplateId : ${1:String(O)}
	LaunchTemplateName : ${2:String(O)}
	Version : ${3:String(R)}
endsnippet

snippet AWS::WAFRegional::IPSet.IPSetDescriptor "" sw

	Type : ${1:String(R)}
	Value : ${2:String(R)}
endsnippet

snippet AWS::Batch::JobDefinition.ContainerProperties "" sw

	User : ${1:String(O)}
	Memory : ${2:Integer(R)}
	Privileged : ${3:Boolean(O)}
	JobRoleArn : ${4:String(O)}
	ReadonlyRootFilesystem : ${5:Boolean(O)}
	Vcpus : ${6:Integer(R)}
	Image : ${7:String(R)}
	MountPoints : [${8:AWS::Batch::JobDefinition.MountPoints(O)}]
	Volumes : [${9:AWS::Batch::JobDefinition.Volumes(O)}]
	Command : [${10:String(O)}]
	Environment : [${11:AWS::Batch::JobDefinition.Environment(O)}]
	Ulimits : [${12:AWS::Batch::JobDefinition.Ulimit(O)}]
	InstanceType : ${13:String(O)}
endsnippet

snippet AWS::ECS::TaskDefinition.ContainerDefinition "" sw

	Command : [${1:String(O)}]
	Cpu : ${2:Integer(O)}
	DisableNetworking : ${3:Boolean(O)}
	DnsSearchDomains : [${4:String(O)}]
	DnsServers : [${5:String(O)}]
	DockerLabels : [${6:String(O)}]
	DockerSecurityOptions : [${7:String(O)}]
	EntryPoint : [${8:String(O)}]
	Environment : [${9:AWS::ECS::TaskDefinition.KeyValuePair(O)}]
	Essential : ${10:Boolean(O)}
	ExtraHosts : [${11:AWS::ECS::TaskDefinition.HostEntry(O)}]
	HealthCheck : ${12:AWS::ECS::TaskDefinition.HealthCheck(O)}
	Hostname : ${13:String(O)}
	Image : ${14:String(O)}
	Links : [${15:String(O)}]
	LinuxParameters : ${16:AWS::ECS::TaskDefinition.LinuxParameters(O)}
	LogConfiguration : ${17:AWS::ECS::TaskDefinition.LogConfiguration(O)}
	Memory : ${18:Integer(O)}
	MemoryReservation : ${19:Integer(O)}
	MountPoints : [${20:AWS::ECS::TaskDefinition.MountPoint(O)}]
	Name : ${21:String(O)}
	PortMappings : [${22:AWS::ECS::TaskDefinition.PortMapping(O)}]
	Privileged : ${23:Boolean(O)}
	ReadonlyRootFilesystem : ${24:Boolean(O)}
	RepositoryCredentials : ${25:AWS::ECS::TaskDefinition.RepositoryCredentials(O)}
	Ulimits : [${26:AWS::ECS::TaskDefinition.Ulimit(O)}]
	User : ${27:String(O)}
	VolumesFrom : [${28:AWS::ECS::TaskDefinition.VolumeFrom(O)}]
	WorkingDirectory : ${29:String(O)}
endsnippet

snippet AWS::Config::DeliveryChannel.ConfigSnapshotDeliveryProperties "" sw

	DeliveryFrequency : ${1:String(O)}
endsnippet

snippet AWS::GameLift::Fleet.IpPermission "" sw

	FromPort : ${1:Integer(R)}
	IpRange : ${2:String(R)}
	Protocol : ${3:String(R)}
	ToPort : ${4:Integer(R)}
endsnippet

snippet AWS::SSM::MaintenanceWindowTask.MaintenanceWindowLambdaParameters "" sw

	ClientContext : ${1:String(O)}
	Qualifier : ${2:String(O)}
	Payload : ${3:String(O)}
endsnippet

snippet AWS::AutoScalingPlans::ScalingPlan.ScalingInstruction "" sw

	DisableDynamicScaling : ${1:Boolean(O)}
	ServiceNamespace : ${2:String(R)}
	PredictiveScalingMaxCapacityBehavior : ${3:String(O)}
	ScalableDimension : ${4:String(R)}
	ScalingPolicyUpdateBehavior : ${5:String(O)}
	MinCapacity : ${6:Integer(R)}
	TargetTrackingConfigurations : [${7:AWS::AutoScalingPlans::ScalingPlan.TargetTrackingConfiguration(R)}]
	PredictiveScalingMaxCapacityBuffer : ${8:Integer(O)}
	CustomizedLoadMetricSpecification : ${9:AWS::AutoScalingPlans::ScalingPlan.CustomizedLoadMetricSpecification(O)}
	PredefinedLoadMetricSpecification : ${10:AWS::AutoScalingPlans::ScalingPlan.PredefinedLoadMetricSpecification(O)}
	ResourceId : ${11:String(R)}
	ScheduledActionBufferTime : ${12:Integer(O)}
	MaxCapacity : ${13:Integer(R)}
	PredictiveScalingMode : ${14:String(O)}
endsnippet

snippet AWS::IoTAnalytics::Pipeline.Lambda "" sw

	BatchSize : ${1:Integer(O)}
	Next : ${2:String(O)}
	LambdaName : ${3:String(O)}
	Name : ${4:String(O)}
endsnippet

snippet AWS::IoT::TopicRule.SqsAction "" sw

	QueueUrl : ${1:String(R)}
	RoleArn : ${2:String(R)}
	UseBase64 : ${3:Boolean(O)}
endsnippet

snippet AWS::WAF::SqlInjectionMatchSet.FieldToMatch "" sw

	Data : ${1:String(O)}
	Type : ${2:String(R)}
endsnippet

snippet AWS::AutoScaling::ScalingPolicy.CustomizedMetricSpecification "" sw

	Dimensions : [${1:AWS::AutoScaling::ScalingPolicy.MetricDimension(O)}]
	MetricName : ${2:String(R)}
	Namespace : ${3:String(R)}
	Statistic : ${4:String(R)}
	Unit : ${5:String(O)}
endsnippet

snippet AWS::DataPipeline::Pipeline.ParameterObject "" sw

	Attributes : [${1:AWS::DataPipeline::Pipeline.ParameterAttribute(R)}]
	Id : ${2:String(R)}
endsnippet

snippet AWS::ElasticLoadBalancingV2::Listener.AuthenticateCognitoConfig "" sw

	AuthenticationRequestExtraParams : [${1:String(O)}]
	OnUnauthenticatedRequest : ${2:String(O)}
	Scope : ${3:String(O)}
	SessionCookieName : ${4:String(O)}
	SessionTimeout : ${5:Long(O)}
	UserPoolArn : ${6:String(R)}
	UserPoolClientId : ${7:String(R)}
	UserPoolDomain : ${8:String(R)}
endsnippet

snippet AWS::CodePipeline::Pipeline.StageDeclaration "" sw

	Actions : [${1:AWS::CodePipeline::Pipeline.ActionDeclaration(R)}]
	Blockers : [${2:AWS::CodePipeline::Pipeline.BlockerDeclaration(O)}]
	Name : ${3:String(R)}
endsnippet

snippet AWS::EMR::Cluster.ScalingConstraints "" sw

	MaxCapacity : ${1:Integer(R)}
	MinCapacity : ${2:Integer(R)}
endsnippet

snippet AWS::StepFunctions::Activity.TagsEntry "" sw

	Value : ${1:String(R)}
	Key : ${2:String(R)}
endsnippet

snippet AWS::ECS::Service.LoadBalancer "" sw

	ContainerName : ${1:String(O)}
	ContainerPort : ${2:Integer(R)}
	LoadBalancerName : ${3:String(O)}
	TargetGroupArn : ${4:String(O)}
endsnippet

snippet AWS::EMR::InstanceGroupConfig.MetricDimension "" sw

	Key : ${1:String(R)}
	Value : ${2:String(R)}
endsnippet

snippet AWS::KinesisFirehose::DeliveryStream.EncryptionConfiguration "" sw

	KMSEncryptionConfig : ${1:AWS::KinesisFirehose::DeliveryStream.KMSEncryptionConfig(O)}
	NoEncryptionConfig : ${2:String(O)}
endsnippet

snippet AWS::KinesisFirehose::DeliveryStream.CloudWatchLoggingOptions "" sw

	Enabled : ${1:Boolean(O)}
	LogGroupName : ${2:String(O)}
	LogStreamName : ${3:String(O)}
endsnippet

snippet AWS::AppStream::ImageBuilder.VpcConfig "" sw

	SecurityGroupIds : [${1:String(O)}]
	SubnetIds : [${2:String(O)}]
endsnippet

snippet AWS::ECS::TaskDefinition.LogConfiguration "" sw

	LogDriver : ${1:String(R)}
	Options : [${2:String(O)}]
endsnippet

snippet AWS::ApiGateway::Method.MethodResponse "" sw

	ResponseModels : [${1:String(O)}]
	ResponseParameters : [${2:Boolean(O)}]
	StatusCode : ${3:String(R)}
endsnippet

snippet AWS::ElasticBeanstalk::ConfigurationTemplate.SourceConfiguration "" sw

	ApplicationName : ${1:String(R)}
	TemplateName : ${2:String(R)}
endsnippet

snippet AWS::ElasticLoadBalancingV2::Listener.RedirectConfig "" sw

	Host : ${1:String(O)}
	Path : ${2:String(O)}
	Port : ${3:String(O)}
	Protocol : ${4:String(O)}
	Query : ${5:String(O)}
	StatusCode : ${6:String(R)}
endsnippet

snippet AWS::IoT::TopicRule.PutItemInput "" sw

	TableName : ${1:String(R)}
endsnippet

snippet AWS::Greengrass::ConnectorDefinition.ConnectorDefinitionVersion "" sw

	Connectors : [${1:AWS::Greengrass::ConnectorDefinition.Connector(R)}]
endsnippet

snippet AWS::AutoScaling::AutoScalingGroup.NotificationConfiguration "" sw

	NotificationTypes : [${1:String(O)}]
	TopicARN : ${2:String(R)}
endsnippet

snippet AWS::ElasticLoadBalancing::LoadBalancer.AccessLoggingPolicy "" sw

	EmitInterval : ${1:Integer(O)}
	Enabled : ${2:Boolean(R)}
	S3BucketName : ${3:String(R)}
	S3BucketPrefix : ${4:String(O)}
endsnippet

snippet AWS::CodeDeploy::DeploymentGroup.TagFilter "" sw

	Key : ${1:String(O)}
	Type : ${2:String(O)}
	Value : ${3:String(O)}
endsnippet

snippet AWS::Greengrass::FunctionDefinitionVersion.Function "" sw

	FunctionArn : ${1:String(R)}
	FunctionConfiguration : ${2:AWS::Greengrass::FunctionDefinitionVersion.FunctionConfiguration(R)}
	Id : ${3:String(R)}
endsnippet

snippet AWS::EC2::SpotFleet.SpotFleetTagSpecification "" sw

	ResourceType : ${1:String(O)}
	Tags : [${2:AWS::EC2::SpotFleet.Tag(O)}]
endsnippet

snippet AWS::EC2::SpotFleet.PrivateIpAddressSpecification "" sw

	Primary : ${1:Boolean(O)}
	PrivateIpAddress : ${2:String(R)}
endsnippet

snippet AWS::EC2::LaunchTemplate.Monitoring "" sw

	Enabled : ${1:Boolean(O)}
endsnippet

snippet AWS::ECS::TaskDefinition.Device "" sw

	ContainerPath : ${1:String(O)}
	HostPath : ${2:String(R)}
	Permissions : [${3:String(O)}]
endsnippet

snippet AWS::ElasticLoadBalancingV2::Listener.Action "" sw

	AuthenticateCognitoConfig : ${1:AWS::ElasticLoadBalancingV2::Listener.AuthenticateCognitoConfig(O)}
	AuthenticateOidcConfig : ${2:AWS::ElasticLoadBalancingV2::Listener.AuthenticateOidcConfig(O)}
	FixedResponseConfig : ${3:AWS::ElasticLoadBalancingV2::Listener.FixedResponseConfig(O)}
	Order : ${4:Integer(O)}
	RedirectConfig : ${5:AWS::ElasticLoadBalancingV2::Listener.RedirectConfig(O)}
	TargetGroupArn : ${6:String(O)}
	Type : ${7:String(R)}
endsnippet

snippet AWS::Glue::Partition.Order "" sw

	Column : ${1:String(R)}
	SortOrder : ${2:Integer(O)}
endsnippet

snippet AWS::Glue::Job.JobCommand "" sw

	ScriptLocation : ${1:String(O)}
	Name : ${2:String(O)}
endsnippet

snippet AWS::ServiceDiscovery::Service.DnsConfig "" sw

	DnsRecords : [${1:AWS::ServiceDiscovery::Service.DnsRecord(R)}]
	RoutingPolicy : ${2:String(O)}
	NamespaceId : ${3:String(O)}
endsnippet

snippet AWS::ApiGateway::Method.Integration "" sw

	CacheKeyParameters : [${1:String(O)}]
	CacheNamespace : ${2:String(O)}
	ConnectionId : ${3:String(O)}
	ConnectionType : ${4:String(O)}
	ContentHandling : ${5:String(O)}
	Credentials : ${6:String(O)}
	IntegrationHttpMethod : ${7:String(O)}
	IntegrationResponses : [${8:AWS::ApiGateway::Method.IntegrationResponse(O)}]
	PassthroughBehavior : ${9:String(O)}
	RequestParameters : [${10:String(O)}]
	RequestTemplates : [${11:String(O)}]
	TimeoutInMillis : ${12:Integer(O)}
	Type : ${13:String(O)}
	Uri : ${14:String(O)}
endsnippet

snippet AWS::Batch::JobDefinition.Timeout "" sw

	AttemptDurationSeconds : ${1:Integer(O)}
endsnippet

snippet AWS::IoT::TopicRule.RepublishAction "" sw

	RoleArn : ${1:String(R)}
	Topic : ${2:String(R)}
endsnippet

snippet AWS::EC2::EC2Fleet.FleetLaunchTemplateSpecificationRequest "" sw

	LaunchTemplateName : ${1:String(O)}
	Version : ${2:String(O)}
	LaunchTemplateId : ${3:String(O)}
endsnippet

snippet AWS::EMR::Cluster.InstanceFleetConfig "" sw

	InstanceTypeConfigs : [${1:AWS::EMR::Cluster.InstanceTypeConfig(O)}]
	LaunchSpecifications : ${2:AWS::EMR::Cluster.InstanceFleetProvisioningSpecifications(O)}
	Name : ${3:String(O)}
	TargetOnDemandCapacity : ${4:Integer(O)}
	TargetSpotCapacity : ${5:Integer(O)}
endsnippet

snippet AWS::Glue::Table.SkewedInfo "" sw

	SkewedColumnNames : [${1:String(O)}]
	SkewedColumnValues : [${2:String(O)}]
	SkewedColumnValueLocationMaps : ${3:Json(O)}
endsnippet

snippet AWS::KinesisFirehose::DeliveryStream.ProcessingConfiguration "" sw

	Enabled : ${1:Boolean(O)}
	Processors : [${2:AWS::KinesisFirehose::DeliveryStream.Processor(O)}]
endsnippet

snippet AWS::ServiceDiscovery::Service.DnsRecord "" sw

	Type : ${1:String(R)}
	TTL : ${2:String(R)}
endsnippet

snippet AWS::DynamoDB::Table.LocalSecondaryIndex "" sw

	IndexName : ${1:String(R)}
	KeySchema : [${2:AWS::DynamoDB::Table.KeySchema(R)}]
	Projection : ${3:AWS::DynamoDB::Table.Projection(R)}
endsnippet

snippet AWS::Greengrass::DeviceDefinition.Device "" sw

	SyncShadow : ${1:Boolean(O)}
	ThingArn : ${2:String(R)}
	Id : ${3:String(R)}
	CertificateArn : ${4:String(R)}
endsnippet

snippet AWS::Config::ConfigRule.Scope "" sw

	ComplianceResourceId : ${1:String(O)}
	ComplianceResourceTypes : [${2:String(O)}]
	TagKey : ${3:String(O)}
	TagValue : ${4:String(O)}
endsnippet

snippet AWS::EMR::Cluster.JobFlowInstancesConfig "" sw

	AdditionalMasterSecurityGroups : [${1:String(O)}]
	AdditionalSlaveSecurityGroups : [${2:String(O)}]
	CoreInstanceFleet : ${3:AWS::EMR::Cluster.InstanceFleetConfig(O)}
	CoreInstanceGroup : ${4:AWS::EMR::Cluster.InstanceGroupConfig(O)}
	Ec2KeyName : ${5:String(O)}
	Ec2SubnetId : ${6:String(O)}
	EmrManagedMasterSecurityGroup : ${7:String(O)}
	EmrManagedSlaveSecurityGroup : ${8:String(O)}
	HadoopVersion : ${9:String(O)}
	KeepJobFlowAliveWhenNoSteps : ${10:Boolean(O)}
	MasterInstanceFleet : ${11:AWS::EMR::Cluster.InstanceFleetConfig(O)}
	MasterInstanceGroup : ${12:AWS::EMR::Cluster.InstanceGroupConfig(O)}
	Placement : ${13:AWS::EMR::Cluster.PlacementType(O)}
	ServiceAccessSecurityGroup : ${14:String(O)}
	TerminationProtected : ${15:Boolean(O)}
endsnippet

snippet AWS::EC2::VPNConnection.VpnTunnelOptionsSpecification "" sw

	PreSharedKey : ${1:String(O)}
	TunnelInsideCidr : ${2:String(O)}
endsnippet

snippet AWS::WAF::XssMatchSet.FieldToMatch "" sw

	Data : ${1:String(O)}
	Type : ${2:String(R)}
endsnippet

snippet AWS::CloudFront::Distribution.ForwardedValues "" sw

	Cookies : ${1:AWS::CloudFront::Distribution.Cookies(O)}
	Headers : [${2:String(O)}]
	QueryString : ${3:Boolean(R)}
	QueryStringCacheKeys : [${4:String(O)}]
endsnippet

snippet AWS::ApiGateway::Method.IntegrationResponse "" sw

	ContentHandling : ${1:String(O)}
	ResponseParameters : [${2:String(O)}]
	ResponseTemplates : [${3:String(O)}]
	SelectionPattern : ${4:String(O)}
	StatusCode : ${5:String(R)}
endsnippet

snippet AWS::Route53::HealthCheck.HealthCheckConfig "" sw

	AlarmIdentifier : ${1:AWS::Route53::HealthCheck.AlarmIdentifier(O)}
	ChildHealthChecks : [${2:String(O)}]
	EnableSNI : ${3:Boolean(O)}
	FailureThreshold : ${4:Integer(O)}
	FullyQualifiedDomainName : ${5:String(O)}
	HealthThreshold : ${6:Integer(O)}
	IPAddress : ${7:String(O)}
	InsufficientDataHealthStatus : ${8:String(O)}
	Inverted : ${9:Boolean(O)}
	MeasureLatency : ${10:Boolean(O)}
	Port : ${11:Integer(O)}
	Regions : [${12:String(O)}]
	RequestInterval : ${13:Integer(O)}
	ResourcePath : ${14:String(O)}
	SearchString : ${15:String(O)}
	Type : ${16:String(R)}
endsnippet

snippet AWS::Greengrass::DeviceDefinition.DeviceDefinitionVersion "" sw

	Devices : [${1:AWS::Greengrass::DeviceDefinition.Device(R)}]
endsnippet

snippet AWS::EMR::Cluster.ScalingAction "" sw

	Market : ${1:String(O)}
	SimpleScalingPolicyConfiguration : ${2:AWS::EMR::Cluster.SimpleScalingPolicyConfiguration(R)}
endsnippet

snippet AWS::Budgets::Budget.Subscriber "" sw

	SubscriptionType : ${1:String(R)}
	Address : ${2:String(R)}
endsnippet

snippet AWS::IoT::TopicRule.SnsAction "" sw

	MessageFormat : ${1:String(O)}
	RoleArn : ${2:String(R)}
	TargetArn : ${3:String(R)}
endsnippet

snippet AWS::EC2::SpotFleet.SpotFleetLaunchSpecification "" sw

	BlockDeviceMappings : [${1:AWS::EC2::SpotFleet.BlockDeviceMapping(O)}]
	EbsOptimized : ${2:Boolean(O)}
	IamInstanceProfile : ${3:AWS::EC2::SpotFleet.IamInstanceProfileSpecification(O)}
	ImageId : ${4:String(R)}
	InstanceType : ${5:String(R)}
	KernelId : ${6:String(O)}
	KeyName : ${7:String(O)}
	Monitoring : ${8:AWS::EC2::SpotFleet.SpotFleetMonitoring(O)}
	NetworkInterfaces : [${9:AWS::EC2::SpotFleet.InstanceNetworkInterfaceSpecification(O)}]
	Placement : ${10:AWS::EC2::SpotFleet.SpotPlacement(O)}
	RamdiskId : ${11:String(O)}
	SecurityGroups : [${12:AWS::EC2::SpotFleet.GroupIdentifier(O)}]
	SpotPrice : ${13:String(O)}
	SubnetId : ${14:String(O)}
	TagSpecifications : [${15:AWS::EC2::SpotFleet.SpotFleetTagSpecification(O)}]
	UserData : ${16:String(O)}
	WeightedCapacity : ${17:Double(O)}
endsnippet

snippet AWS::ECS::TaskDefinition.KeyValuePair "" sw

	Name : ${1:String(O)}
	Value : ${2:String(O)}
endsnippet

snippet AWS::CloudFront::Distribution.CacheBehavior "" sw

	Compress : ${1:Boolean(O)}
	LambdaFunctionAssociations : [${2:AWS::CloudFront::Distribution.LambdaFunctionAssociation(O)}]
	TargetOriginId : ${3:String(R)}
	ViewerProtocolPolicy : ${4:String(R)}
	TrustedSigners : [${5:String(O)}]
	DefaultTTL : ${6:Double(O)}
	FieldLevelEncryptionId : ${7:String(O)}
	AllowedMethods : [${8:String(O)}]
	PathPattern : ${9:String(R)}
	CachedMethods : [${10:String(O)}]
	SmoothStreaming : ${11:Boolean(O)}
	ForwardedValues : ${12:AWS::CloudFront::Distribution.ForwardedValues(R)}
	MinTTL : ${13:Double(O)}
	MaxTTL : ${14:Double(O)}
endsnippet

snippet AWS::DirectoryService::SimpleAD.VpcSettings "" sw

	SubnetIds : [${1:String(R)}]
	VpcId : ${2:String(R)}
endsnippet

snippet AWS::EMR::Cluster.StepConfig "" sw

	ActionOnFailure : ${1:String(O)}
	HadoopJarStep : ${2:AWS::EMR::Cluster.HadoopJarStepConfig(R)}
	Name : ${3:String(R)}
endsnippet

snippet AWS::CodePipeline::Pipeline.BlockerDeclaration "" sw

	Name : ${1:String(R)}
	Type : ${2:String(R)}
endsnippet

snippet AWS::Elasticsearch::Domain.NodeToNodeEncryptionOptions "" sw

	Enabled : ${1:Boolean(O)}
endsnippet

snippet AWS::GuardDuty::Filter.FindingCriteria "" sw

	Criterion : ${1:Json(O)}
	ItemType : ${2:AWS::GuardDuty::Filter.Condition(O)}
endsnippet

snippet AWS::CloudWatch::Alarm.MetricStat "" sw

	Metric : ${1:AWS::CloudWatch::Alarm.Metric(R)}
	Period : ${2:Integer(R)}
	Stat : ${3:String(R)}
	Unit : ${4:String(O)}
endsnippet

snippet AWS::CodePipeline::CustomActionType.Settings "" sw

	EntityUrlTemplate : ${1:String(O)}
	ExecutionUrlTemplate : ${2:String(O)}
	RevisionUrlTemplate : ${3:String(O)}
	ThirdPartyConfigurationUrl : ${4:String(O)}
endsnippet

snippet AWS::Lambda::Function.DeadLetterConfig "" sw

	TargetArn : ${1:String(O)}
endsnippet

snippet AWS::Elasticsearch::Domain.ElasticsearchClusterConfig "" sw

	DedicatedMasterCount : ${1:Integer(O)}
	DedicatedMasterEnabled : ${2:Boolean(O)}
	DedicatedMasterType : ${3:String(O)}
	InstanceCount : ${4:Integer(O)}
	InstanceType : ${5:String(O)}
	ZoneAwarenessEnabled : ${6:Boolean(O)}
endsnippet

snippet AWS::S3::Bucket.AnalyticsConfiguration "" sw

	Id : ${1:String(R)}
	Prefix : ${2:String(O)}
	StorageClassAnalysis : ${3:AWS::S3::Bucket.StorageClassAnalysis(R)}
	TagFilters : [${4:AWS::S3::Bucket.TagFilter(O)}]
endsnippet

snippet AWS::StepFunctions::StateMachine.TagsEntry "" sw

	Value : ${1:String(R)}
	Key : ${2:String(R)}
endsnippet

snippet AWS::Budgets::Budget.Notification "" sw

	ComparisonOperator : ${1:String(R)}
	NotificationType : ${2:String(R)}
	Threshold : ${3:Double(R)}
	ThresholdType : ${4:String(O)}
endsnippet

snippet AWS::Greengrass::FunctionDefinitionVersion.Execution "" sw

	IsolationMode : ${1:String(O)}
	RunAs : ${2:AWS::Greengrass::FunctionDefinitionVersion.RunAs(O)}
endsnippet

snippet AWS::AutoScalingPlans::ScalingPlan.TargetTrackingConfiguration "" sw

	ScaleOutCooldown : ${1:Integer(O)}
	TargetValue : ${2:Double(R)}
	PredefinedScalingMetricSpecification : ${3:AWS::AutoScalingPlans::ScalingPlan.PredefinedScalingMetricSpecification(O)}
	DisableScaleIn : ${4:Boolean(O)}
	ScaleInCooldown : ${5:Integer(O)}
	EstimatedInstanceWarmup : ${6:Integer(O)}
	CustomizedScalingMetricSpecification : ${7:AWS::AutoScalingPlans::ScalingPlan.CustomizedScalingMetricSpecification(O)}
endsnippet

snippet AWS::GameLift::Alias.RoutingStrategy "" sw

	FleetId : ${1:String(O)}
	Message : ${2:String(O)}
	Type : ${3:String(R)}
endsnippet

snippet AWS::AppSync::Resolver.PipelineConfig "" sw

	Functions : [${1:String(O)}]
endsnippet

snippet AWS::EC2::SpotFleet.ClassicLoadBalancersConfig "" sw

	ClassicLoadBalancers : [${1:AWS::EC2::SpotFleet.ClassicLoadBalancer(R)}]
endsnippet

snippet AWS::ApplicationAutoScaling::ScalingPolicy.MetricDimension "" sw

	Name : ${1:String(R)}
	Value : ${2:String(R)}
endsnippet

snippet AWS::SSM::MaintenanceWindowTask.NotificationConfig "" sw

	NotificationArn : ${1:String(R)}
	NotificationType : ${2:String(O)}
	NotificationEvents : [${3:String(O)}]
endsnippet

snippet AWS::EMR::InstanceFleetConfig.Configuration "" sw

	Classification : ${1:String(O)}
	ConfigurationProperties : [${2:String(O)}]
	Configurations : [${3:AWS::EMR::InstanceFleetConfig.Configuration(O)}]
endsnippet

snippet AWS::Cognito::UserPoolUser.AttributeType "" sw

	Value : ${1:String(O)}
	Name : ${2:String(O)}
endsnippet

snippet AWS::Glue::Table.StorageDescriptor "" sw

	StoredAsSubDirectories : ${1:Boolean(O)}
	Parameters : ${2:Json(O)}
	BucketColumns : [${3:String(O)}]
	SkewedInfo : ${4:AWS::Glue::Table.SkewedInfo(O)}
	InputFormat : ${5:String(O)}
	NumberOfBuckets : ${6:Integer(O)}
	OutputFormat : ${7:String(O)}
	Columns : [${8:AWS::Glue::Table.Column(O)}]
	SerdeInfo : ${9:AWS::Glue::Table.SerdeInfo(O)}
	SortColumns : [${10:AWS::Glue::Table.Order(O)}]
	Compressed : ${11:Boolean(O)}
	Location : ${12:String(O)}
endsnippet

snippet AWS::IAM::User.LoginProfile "" sw

	Password : ${1:String(R)}
	PasswordResetRequired : ${2:Boolean(O)}
endsnippet

snippet AWS::S3::Bucket.SourceSelectionCriteria "" sw

	SseKmsEncryptedObjects : ${1:AWS::S3::Bucket.SseKmsEncryptedObjects(R)}
endsnippet

snippet AWS::Greengrass::SubscriptionDefinition.Subscription "" sw

	Target : ${1:String(R)}
	Id : ${2:String(R)}
	Source : ${3:String(R)}
	Subject : ${4:String(R)}
endsnippet

snippet AWS::ApiGateway::Stage.MethodSetting "" sw

	CacheDataEncrypted : ${1:Boolean(O)}
	CacheTtlInSeconds : ${2:Integer(O)}
	CachingEnabled : ${3:Boolean(O)}
	DataTraceEnabled : ${4:Boolean(O)}
	HttpMethod : ${5:String(O)}
	LoggingLevel : ${6:String(O)}
	MetricsEnabled : ${7:Boolean(O)}
	ResourcePath : ${8:String(O)}
	ThrottlingBurstLimit : ${9:Integer(O)}
	ThrottlingRateLimit : ${10:Double(O)}
endsnippet

snippet AWS::DynamoDB::Table.ProvisionedThroughput "" sw

	ReadCapacityUnits : ${1:Long(R)}
	WriteCapacityUnits : ${2:Long(R)}
endsnippet

snippet AWS::Budgets::Budget.BudgetData "" sw

	BudgetLimit : ${1:AWS::Budgets::Budget.Spend(O)}
	TimePeriod : ${2:AWS::Budgets::Budget.TimePeriod(O)}
	TimeUnit : ${3:String(R)}
	CostFilters : ${4:Json(O)}
	BudgetName : ${5:String(O)}
	CostTypes : ${6:AWS::Budgets::Budget.CostTypes(O)}
	BudgetType : ${7:String(R)}
endsnippet

snippet AWS::SSM::PatchBaseline.RuleGroup "" sw

	PatchRules : [${1:AWS::SSM::PatchBaseline.Rule(O)}]
endsnippet

snippet AWS::OpsWorks::Stack.Source "" sw

	Password : ${1:String(O)}
	Revision : ${2:String(O)}
	SshKey : ${3:String(O)}
	Type : ${4:String(O)}
	Url : ${5:String(O)}
	Username : ${6:String(O)}
endsnippet

snippet AWS::EC2::LaunchTemplate.Placement "" sw

	GroupName : ${1:String(O)}
	Tenancy : ${2:String(O)}
	AvailabilityZone : ${3:String(O)}
	Affinity : ${4:String(O)}
	HostId : ${5:String(O)}
endsnippet

snippet AWS::ElasticLoadBalancing::LoadBalancer.ConnectionSettings "" sw

	IdleTimeout : ${1:Integer(R)}
endsnippet

snippet AWS::S3::Bucket.LoggingConfiguration "" sw

	DestinationBucketName : ${1:String(O)}
	LogFilePrefix : ${2:String(O)}
endsnippet

snippet AWS::S3::Bucket.StorageClassAnalysis "" sw

	DataExport : ${1:AWS::S3::Bucket.DataExport(O)}
endsnippet

snippet AWS::ApiGateway::UsagePlan.ApiStage "" sw

	ApiId : ${1:String(O)}
	Stage : ${2:String(O)}
	Throttle : [${3:AWS::ApiGateway::UsagePlan.ThrottleSettings(O)}]
endsnippet

snippet AWS::Config::ConfigurationRecorder.RecordingGroup "" sw

	AllSupported : ${1:Boolean(O)}
	IncludeGlobalResourceTypes : ${2:Boolean(O)}
	ResourceTypes : [${3:String(O)}]
endsnippet

snippet AWS::DLM::LifecyclePolicy.Schedule "" sw

	TagsToAdd : [${1:AWS::DLM::LifecyclePolicy.Tag(O)}]
	CreateRule : ${2:AWS::DLM::LifecyclePolicy.CreateRule(O)}
	RetainRule : ${3:AWS::DLM::LifecyclePolicy.RetainRule(O)}
	Name : ${4:String(O)}
	CopyTags : ${5:Boolean(O)}
endsnippet

snippet AWS::S3::Bucket.RoutingRule "" sw

	RedirectRule : ${1:AWS::S3::Bucket.RedirectRule(R)}
	RoutingRuleCondition : ${2:AWS::S3::Bucket.RoutingRuleCondition(O)}
endsnippet

snippet AWS::WAF::WebACL.ActivatedRule "" sw

	Action : ${1:AWS::WAF::WebACL.WafAction(O)}
	Priority : ${2:Integer(R)}
	RuleId : ${3:String(R)}
endsnippet

snippet AWS::Greengrass::LoggerDefinition.Logger "" sw

	Space : ${1:Integer(O)}
	Type : ${2:String(R)}
	Level : ${3:String(R)}
	Id : ${4:String(R)}
	Component : ${5:String(R)}
endsnippet

snippet AWS::RDS::DBCluster.ScalingConfiguration "" sw

	AutoPause : ${1:Boolean(O)}
	MaxCapacity : ${2:Integer(O)}
	MinCapacity : ${3:Integer(O)}
	SecondsUntilAutoPause : ${4:Integer(O)}
endsnippet

snippet AWS::EMR::Cluster.KerberosAttributes "" sw

	ADDomainJoinPassword : ${1:String(O)}
	ADDomainJoinUser : ${2:String(O)}
	CrossRealmTrustPrincipalPassword : ${3:String(O)}
	KdcAdminPassword : ${4:String(R)}
	Realm : ${5:String(R)}
endsnippet

snippet AWS::Route53::RecordSet.GeoLocation "" sw

	ContinentCode : ${1:String(O)}
	CountryCode : ${2:String(O)}
	SubdivisionCode : ${3:String(O)}
endsnippet

snippet AWS::CloudFront::StreamingDistribution.TrustedSigners "" sw

	Enabled : ${1:Boolean(R)}
	AwsAccountNumbers : [${2:String(O)}]
endsnippet

snippet AWS::EC2::LaunchTemplate.BlockDeviceMapping "" sw

	Ebs : ${1:AWS::EC2::LaunchTemplate.Ebs(O)}
	NoDevice : ${2:String(O)}
	VirtualName : ${3:String(O)}
	DeviceName : ${4:String(O)}
endsnippet

snippet AWS::ElasticBeanstalk::Application.ApplicationResourceLifecycleConfig "" sw

	ServiceRole : ${1:String(O)}
	VersionLifecycleConfig : ${2:AWS::ElasticBeanstalk::Application.ApplicationVersionLifecycleConfig(O)}
endsnippet

snippet AWS::EC2::LaunchTemplate.SpotOptions "" sw

	SpotInstanceType : ${1:String(O)}
	InstanceInterruptionBehavior : ${2:String(O)}
	MaxPrice : ${3:String(O)}
endsnippet

snippet AWS::KinesisFirehose::DeliveryStream.BufferingHints "" sw

	IntervalInSeconds : ${1:Integer(R)}
	SizeInMBs : ${2:Integer(R)}
endsnippet

snippet AWS::KinesisFirehose::DeliveryStream.SplunkRetryOptions "" sw

	DurationInSeconds : ${1:Integer(R)}
endsnippet

snippet AWS::IoTAnalytics::Dataset.OutputFileUriValue "" sw

	FileName : ${1:String(O)}
endsnippet

snippet AWS::Greengrass::CoreDefinitionVersion.Core "" sw

	SyncShadow : ${1:Boolean(O)}
	ThingArn : ${2:String(R)}
	Id : ${3:String(R)}
	CertificateArn : ${4:String(R)}
endsnippet

snippet AWS::S3::Bucket.AccessControlTranslation "" sw

	Owner : ${1:String(R)}
endsnippet

snippet AWS::Lambda::LayerVersion.Content "" sw

	S3ObjectVersion : ${1:String(O)}
	S3Bucket : ${2:String(R)}
	S3Key : ${3:String(R)}
endsnippet

snippet AWS::CodePipeline::Pipeline.ArtifactStoreMap "" sw

	ArtifactStore : ${1:AWS::CodePipeline::Pipeline.ArtifactStore(R)}
	Region : ${2:String(R)}
endsnippet

snippet AWS::AutoScaling::ScalingPolicy.PredefinedMetricSpecification "" sw

	PredefinedMetricType : ${1:String(R)}
	ResourceLabel : ${2:String(O)}
endsnippet

snippet AWS::Greengrass::ResourceDefinitionVersion.ResourceInstance "" sw

	ResourceDataContainer : ${1:AWS::Greengrass::ResourceDefinitionVersion.ResourceDataContainer(R)}
	Id : ${2:String(R)}
	Name : ${3:String(R)}
endsnippet

snippet AWS::IoTAnalytics::Dataset.QueryAction "" sw

	Filters : [${1:AWS::IoTAnalytics::Dataset.Filter(O)}]
	SqlQuery : ${2:String(R)}
endsnippet

snippet AWS::WAFRegional::Rule.Predicate "" sw

	Type : ${1:String(R)}
	DataId : ${2:String(R)}
	Negated : ${3:Boolean(R)}
endsnippet

snippet AWS::Glue::Job.ConnectionsList "" sw

	Connections : [${1:String(O)}]
endsnippet

snippet AWS::SSM::Association.Target "" sw

	Key : ${1:String(R)}
	Values : [${2:String(R)}]
endsnippet

snippet AWS::ApiGateway::DomainName.EndpointConfiguration "" sw

	Types : [${1:String(O)}]
endsnippet

snippet AWS::ElasticLoadBalancingV2::ListenerRule.AuthenticateOidcConfig "" sw

	AuthenticationRequestExtraParams : [${1:String(O)}]
	AuthorizationEndpoint : ${2:String(R)}
	ClientId : ${3:String(R)}
	ClientSecret : ${4:String(R)}
	Issuer : ${5:String(R)}
	OnUnauthenticatedRequest : ${6:String(O)}
	Scope : ${7:String(O)}
	SessionCookieName : ${8:String(O)}
	SessionTimeout : ${9:Long(O)}
	TokenEndpoint : ${10:String(R)}
	UserInfoEndpoint : ${11:String(R)}
endsnippet

snippet AWS::Greengrass::CoreDefinition.CoreDefinitionVersion "" sw

	Cores : [${1:AWS::Greengrass::CoreDefinition.Core(R)}]
endsnippet

snippet AWS::ApplicationAutoScaling::ScalingPolicy.StepAdjustment "" sw

	MetricIntervalLowerBound : ${1:Double(O)}
	MetricIntervalUpperBound : ${2:Double(O)}
	ScalingAdjustment : ${3:Integer(R)}
endsnippet

snippet AWS::CodePipeline::Pipeline.StageTransition "" sw

	Reason : ${1:String(R)}
	StageName : ${2:String(R)}
endsnippet

snippet AWS::EC2::SpotFleet.SpotPlacement "" sw

	AvailabilityZone : ${1:String(O)}
	GroupName : ${2:String(O)}
	Tenancy : ${3:String(O)}
endsnippet

snippet AWS::CloudFront::Distribution.DefaultCacheBehavior "" sw

	Compress : ${1:Boolean(O)}
	LambdaFunctionAssociations : [${2:AWS::CloudFront::Distribution.LambdaFunctionAssociation(O)}]
	TargetOriginId : ${3:String(R)}
	ViewerProtocolPolicy : ${4:String(R)}
	TrustedSigners : [${5:String(O)}]
	DefaultTTL : ${6:Double(O)}
	FieldLevelEncryptionId : ${7:String(O)}
	AllowedMethods : [${8:String(O)}]
	CachedMethods : [${9:String(O)}]
	SmoothStreaming : ${10:Boolean(O)}
	ForwardedValues : ${11:AWS::CloudFront::Distribution.ForwardedValues(R)}
	MinTTL : ${12:Double(O)}
	MaxTTL : ${13:Double(O)}
endsnippet

snippet AWS::SSM::MaintenanceWindowTask.MaintenanceWindowAutomationParameters "" sw

	Parameters : ${1:Json(O)}
	DocumentVersion : ${2:String(O)}
endsnippet

snippet AWS::Greengrass::FunctionDefinition.FunctionConfiguration "" sw

	MemorySize : ${1:Integer(R)}
	Pinned : ${2:Boolean(O)}
	ExecArgs : ${3:String(O)}
	Timeout : ${4:Integer(R)}
	EncodingType : ${5:String(O)}
	Environment : ${6:AWS::Greengrass::FunctionDefinition.Environment(O)}
	Executable : ${7:String(O)}
endsnippet

snippet AWS::IoT::TopicRule.StepFunctionsAction "" sw

	ExecutionNamePrefix : ${1:String(O)}
	RoleArn : ${2:String(R)}
	StateMachineName : ${3:String(R)}
endsnippet

snippet AWS::IoTAnalytics::Dataset.Variable "" sw

	DatasetContentVersionValue : ${1:AWS::IoTAnalytics::Dataset.DatasetContentVersionValue(O)}
	DoubleValue : ${2:Double(O)}
	OutputFileUriValue : ${3:AWS::IoTAnalytics::Dataset.OutputFileUriValue(O)}
	VariableName : ${4:String(R)}
	StringValue : ${5:String(O)}
endsnippet

snippet AWS::EC2::SpotFleet.SpotFleetRequestConfigData "" sw

	AllocationStrategy : ${1:String(O)}
	ExcessCapacityTerminationPolicy : ${2:String(O)}
	IamFleetRole : ${3:String(R)}
	InstanceInterruptionBehavior : ${4:String(O)}
	LaunchSpecifications : [${5:AWS::EC2::SpotFleet.SpotFleetLaunchSpecification(O)}]
	LaunchTemplateConfigs : [${6:AWS::EC2::SpotFleet.LaunchTemplateConfig(O)}]
	LoadBalancersConfig : ${7:AWS::EC2::SpotFleet.LoadBalancersConfig(O)}
	ReplaceUnhealthyInstances : ${8:Boolean(O)}
	SpotPrice : ${9:String(O)}
	TargetCapacity : ${10:Integer(R)}
	TerminateInstancesWithExpiration : ${11:Boolean(O)}
	Type : ${12:String(O)}
	ValidFrom : ${13:String(O)}
	ValidUntil : ${14:String(O)}
endsnippet

snippet AWS::EC2::LaunchTemplate.CapacityReservationPreference "" sw

endsnippet

snippet AWS::Greengrass::ResourceDefinitionVersion.S3MachineLearningModelResourceData "" sw

	DestinationPath : ${1:String(R)}
	S3Uri : ${2:String(R)}
endsnippet

snippet AWS::CodePipeline::CustomActionType.ArtifactDetails "" sw

	MaximumCount : ${1:Integer(R)}
	MinimumCount : ${2:Integer(R)}
endsnippet

snippet AWS::EMR::Cluster.SimpleScalingPolicyConfiguration "" sw

	AdjustmentType : ${1:String(O)}
	CoolDown : ${2:Integer(O)}
	ScalingAdjustment : ${3:Integer(R)}
endsnippet

snippet AWS::Greengrass::LoggerDefinitionVersion.Logger "" sw

	Space : ${1:Integer(O)}
	Type : ${2:String(R)}
	Level : ${3:String(R)}
	Id : ${4:String(R)}
	Component : ${5:String(R)}
endsnippet

snippet AWS::AppSync::GraphQLApi.OpenIDConnectConfig "" sw

	Issuer : ${1:String(O)}
	ClientId : ${2:String(O)}
	AuthTTL : ${3:Double(O)}
	IatTTL : ${4:Double(O)}
endsnippet

snippet AWS::S3::Bucket.VersioningConfiguration "" sw

	Status : ${1:String(R)}
endsnippet

snippet AWS::CodeDeploy::DeploymentGroup.GitHubLocation "" sw

	CommitId : ${1:String(R)}
	Repository : ${2:String(R)}
endsnippet

snippet AWS::DLM::LifecyclePolicy.CreateRule "" sw

	IntervalUnit : ${1:String(R)}
	Times : [${2:String(O)}]
	Interval : ${3:Integer(R)}
endsnippet

snippet AWS::AppSync::GraphQLApi.LogConfig "" sw

	CloudWatchLogsRoleArn : ${1:String(O)}
	FieldLogLevel : ${2:String(O)}
endsnippet

snippet AWS::CodeDeploy::DeploymentGroup.TargetGroupInfo "" sw

	Name : ${1:String(O)}
endsnippet

snippet AWS::EMR::InstanceGroupConfig.SimpleScalingPolicyConfiguration "" sw

	AdjustmentType : ${1:String(O)}
	CoolDown : ${2:Integer(O)}
	ScalingAdjustment : ${3:Integer(R)}
endsnippet

snippet AWS::Greengrass::FunctionDefinitionVersion.RunAs "" sw

	Uid : ${1:Integer(O)}
	Gid : ${2:Integer(O)}
endsnippet

snippet AWS::Greengrass::FunctionDefinition.DefaultConfig "" sw

	Execution : ${1:AWS::Greengrass::FunctionDefinition.Execution(R)}
endsnippet

snippet AWS::EC2::LaunchTemplate.CapacityReservationSpecification "" sw

	CapacityReservationPreference : ${1:AWS::EC2::LaunchTemplate.CapacityReservationPreference(O)}
	CapacityReservationTarget : ${2:AWS::EC2::LaunchTemplate.CapacityReservationTarget(O)}
endsnippet

snippet AWS::EC2::NetworkInterface.InstanceIpv6Address "" sw

	Ipv6Address : ${1:String(R)}
endsnippet

snippet AWS::ElasticBeanstalk::ApplicationVersion.SourceBundle "" sw

	S3Bucket : ${1:String(R)}
	S3Key : ${2:String(R)}
endsnippet

snippet AWS::EMR::Step.KeyValue "" sw

	Key : ${1:String(O)}
	Value : ${2:String(O)}
endsnippet

snippet AWS::S3::Bucket.EncryptionConfiguration "" sw

	ReplicaKmsKeyID : ${1:String(R)}
endsnippet

snippet AWS::ElasticLoadBalancingV2::Listener.FixedResponseConfig "" sw

	ContentType : ${1:String(O)}
	MessageBody : ${2:String(O)}
	StatusCode : ${3:String(R)}
endsnippet

snippet AWS::AutoScalingPlans::ScalingPlan.CustomizedScalingMetricSpecification "" sw

	MetricName : ${1:String(R)}
	Statistic : ${2:String(R)}
	Dimensions : [${3:AWS::AutoScalingPlans::ScalingPlan.MetricDimension(O)}]
	Unit : ${4:String(O)}
	Namespace : ${5:String(R)}
endsnippet

snippet AWS::OpsWorks::Stack.ChefConfiguration "" sw

	BerkshelfVersion : ${1:String(O)}
	ManageBerkshelf : ${2:Boolean(O)}
endsnippet

snippet AWS::IoTAnalytics::Dataset.Filter "" sw

	DeltaTime : ${1:AWS::IoTAnalytics::Dataset.DeltaTime(O)}
endsnippet

snippet AWS::Route53::HostedZone.HostedZoneTag "" sw

	Key : ${1:String(R)}
	Value : ${2:String(R)}
endsnippet

snippet AWS::Events::Rule.Target "" sw

	Arn : ${1:String(R)}
	EcsParameters : ${2:AWS::Events::Rule.EcsParameters(O)}
	Id : ${3:String(R)}
	Input : ${4:String(O)}
	InputPath : ${5:String(O)}
	InputTransformer : ${6:AWS::Events::Rule.InputTransformer(O)}
	KinesisParameters : ${7:AWS::Events::Rule.KinesisParameters(O)}
	RoleArn : ${8:String(O)}
	RunCommandParameters : ${9:AWS::Events::Rule.RunCommandParameters(O)}
	SqsParameters : ${10:AWS::Events::Rule.SqsParameters(O)}
endsnippet

snippet AWS::CodeBuild::Project.RegistryCredential "" sw

	Credential : ${1:String(R)}
	CredentialProvider : ${2:String(R)}
endsnippet

snippet AWS::OpsWorks::App.EnvironmentVariable "" sw

	Key : ${1:String(R)}
	Secure : ${2:Boolean(O)}
	Value : ${3:String(R)}
endsnippet

snippet AWS::ApiGateway::Stage.CanarySetting "" sw

	DeploymentId : ${1:String(O)}
	PercentTraffic : ${2:Double(O)}
	StageVariableOverrides : [${3:String(O)}]
	UseStageCache : ${4:Boolean(O)}
endsnippet

snippet AWS::ElasticLoadBalancingV2::ListenerRule.AuthenticateCognitoConfig "" sw

	AuthenticationRequestExtraParams : [${1:String(O)}]
	OnUnauthenticatedRequest : ${2:String(O)}
	Scope : ${3:String(O)}
	SessionCookieName : ${4:String(O)}
	SessionTimeout : ${5:Long(O)}
	UserPoolArn : ${6:String(R)}
	UserPoolClientId : ${7:String(R)}
	UserPoolDomain : ${8:String(R)}
endsnippet

snippet AWS::ElasticLoadBalancingV2::ListenerRule.FixedResponseConfig "" sw

	ContentType : ${1:String(O)}
	MessageBody : ${2:String(O)}
	StatusCode : ${3:String(R)}
endsnippet

snippet AWS::AppSync::DataSource.RdsHttpEndpointConfig "" sw

	AwsRegion : ${1:String(R)}
	Schema : ${2:String(O)}
	DatabaseName : ${3:String(O)}
	DbClusterIdentifier : ${4:String(R)}
	AwsSecretStoreArn : ${5:String(R)}
endsnippet

snippet AWS::S3::Bucket.NotificationConfiguration "" sw

	LambdaConfigurations : [${1:AWS::S3::Bucket.LambdaConfiguration(O)}]
	QueueConfigurations : [${2:AWS::S3::Bucket.QueueConfiguration(O)}]
	TopicConfigurations : [${3:AWS::S3::Bucket.TopicConfiguration(O)}]
endsnippet

snippet AWS::EMR::InstanceFleetConfig.EbsConfiguration "" sw

	EbsBlockDeviceConfigs : [${1:AWS::EMR::InstanceFleetConfig.EbsBlockDeviceConfig(O)}]
	EbsOptimized : ${2:Boolean(O)}
endsnippet

snippet AWS::Logs::MetricFilter.MetricTransformation "" sw

	DefaultValue : ${1:Double(O)}
	MetricName : ${2:String(R)}
	MetricNamespace : ${3:String(R)}
	MetricValue : ${4:String(R)}
endsnippet

snippet AWS::EC2::SpotFleet.EbsBlockDevice "" sw

	DeleteOnTermination : ${1:Boolean(O)}
	Encrypted : ${2:Boolean(O)}
	Iops : ${3:Integer(O)}
	SnapshotId : ${4:String(O)}
	VolumeSize : ${5:Integer(O)}
	VolumeType : ${6:String(O)}
endsnippet

snippet AWS::Route53::RecordSet.AliasTarget "" sw

	DNSName : ${1:String(R)}
	EvaluateTargetHealth : ${2:Boolean(O)}
	HostedZoneId : ${3:String(R)}
endsnippet

snippet AWS::AmazonMQ::Broker.User "" sw

	Username : ${1:String(R)}
	Groups : [${2:String(O)}]
	ConsoleAccess : ${3:Boolean(O)}
	Password : ${4:String(R)}
endsnippet

snippet AWS::CodeBuild::Project.SourceAuth "" sw

	Type : ${1:String(R)}
	Resource : ${2:String(O)}
endsnippet

snippet AWS::WAF::ByteMatchSet.ByteMatchTuple "" sw

	FieldToMatch : ${1:AWS::WAF::ByteMatchSet.FieldToMatch(R)}
	PositionalConstraint : ${2:String(R)}
	TargetString : ${3:String(O)}
	TargetStringBase64 : ${4:String(O)}
	TextTransformation : ${5:String(R)}
endsnippet

snippet AWS::Glue::Crawler.Targets "" sw

	S3Targets : [${1:AWS::Glue::Crawler.S3Target(O)}]
	JdbcTargets : [${2:AWS::Glue::Crawler.JdbcTarget(O)}]
endsnippet

snippet AWS::AutoScaling::ScalingPolicy.TargetTrackingConfiguration "" sw

	CustomizedMetricSpecification : ${1:AWS::AutoScaling::ScalingPolicy.CustomizedMetricSpecification(O)}
	DisableScaleIn : ${2:Boolean(O)}
	PredefinedMetricSpecification : ${3:AWS::AutoScaling::ScalingPolicy.PredefinedMetricSpecification(O)}
	TargetValue : ${4:Double(R)}
endsnippet

snippet AWS::ECS::TaskDefinition.MountPoint "" sw

	ContainerPath : ${1:String(O)}
	ReadOnly : ${2:Boolean(O)}
	SourceVolume : ${3:String(O)}
endsnippet

snippet AWS::EMR::Cluster.Application "" sw

	AdditionalInfo : [${1:String(O)}]
	Args : [${2:String(O)}]
	Name : ${3:String(O)}
	Version : ${4:String(O)}
endsnippet

snippet AWS::IoTAnalytics::Pipeline.Math "" sw

	Attribute : ${1:String(O)}
	Next : ${2:String(O)}
	Math : ${3:String(O)}
	Name : ${4:String(O)}
endsnippet

snippet AWS::ECS::Service.PlacementStrategy "" sw

	Field : ${1:String(O)}
	Type : ${2:String(R)}
endsnippet

snippet AWS::Route53::RecordSetGroup.RecordSet "" sw

	AliasTarget : ${1:AWS::Route53::RecordSetGroup.AliasTarget(O)}
	Comment : ${2:String(O)}
	Failover : ${3:String(O)}
	GeoLocation : ${4:AWS::Route53::RecordSetGroup.GeoLocation(O)}
	HealthCheckId : ${5:String(O)}
	HostedZoneId : ${6:String(O)}
	HostedZoneName : ${7:String(O)}
	MultiValueAnswer : ${8:Boolean(O)}
	Name : ${9:String(R)}
	Region : ${10:String(O)}
	ResourceRecords : [${11:String(O)}]
	SetIdentifier : ${12:String(O)}
	TTL : ${13:String(O)}
	Type : ${14:String(R)}
	Weight : ${15:Integer(O)}
endsnippet

snippet AWS::CloudFront::Distribution.Restrictions "" sw

	GeoRestriction : ${1:AWS::CloudFront::Distribution.GeoRestriction(R)}
endsnippet

snippet AWS::Batch::ComputeEnvironment.ComputeResources "" sw

	SpotIamFleetRole : ${1:String(O)}
	MaxvCpus : ${2:Integer(R)}
	BidPercentage : ${3:Integer(O)}
	SecurityGroupIds : [${4:String(R)}]
	Subnets : [${5:String(R)}]
	Type : ${6:String(R)}
	MinvCpus : ${7:Integer(R)}
	LaunchTemplate : ${8:AWS::Batch::ComputeEnvironment.LaunchTemplateSpecification(O)}
	ImageId : ${9:String(O)}
	InstanceRole : ${10:String(R)}
	InstanceTypes : [${11:String(R)}]
	Ec2KeyPair : ${12:String(O)}
	PlacementGroup : ${13:String(O)}
	Tags : ${14:Json(O)}
	DesiredvCpus : ${15:Integer(O)}
endsnippet

snippet AWS::KinesisFirehose::DeliveryStream.KinesisStreamSourceConfiguration "" sw

	KinesisStreamARN : ${1:String(R)}
	RoleARN : ${2:String(R)}
endsnippet

snippet AWS::Greengrass::ResourceDefinitionVersion.SageMakerMachineLearningModelResourceData "" sw

	DestinationPath : ${1:String(R)}
	SageMakerJobArn : ${2:String(R)}
endsnippet

snippet AWS::IoTAnalytics::Pipeline.RemoveAttributes "" sw

	Next : ${1:String(O)}
	Attributes : [${2:String(O)}]
	Name : ${3:String(O)}
endsnippet

snippet AWS::ElasticLoadBalancingV2::ListenerRule.Action "" sw

	AuthenticateCognitoConfig : ${1:AWS::ElasticLoadBalancingV2::ListenerRule.AuthenticateCognitoConfig(O)}
	AuthenticateOidcConfig : ${2:AWS::ElasticLoadBalancingV2::ListenerRule.AuthenticateOidcConfig(O)}
	FixedResponseConfig : ${3:AWS::ElasticLoadBalancingV2::ListenerRule.FixedResponseConfig(O)}
	Order : ${4:Integer(O)}
	RedirectConfig : ${5:AWS::ElasticLoadBalancingV2::ListenerRule.RedirectConfig(O)}
	TargetGroupArn : ${6:String(O)}
	Type : ${7:String(R)}
endsnippet

snippet AWS::Glue::Classifier.XMLClassifier "" sw

	RowTag : ${1:String(R)}
	Classification : ${2:String(R)}
	Name : ${3:String(O)}
endsnippet

snippet AWS::EC2::SpotFleet.LoadBalancersConfig "" sw

	ClassicLoadBalancersConfig : ${1:AWS::EC2::SpotFleet.ClassicLoadBalancersConfig(O)}
	TargetGroupsConfig : ${2:AWS::EC2::SpotFleet.TargetGroupsConfig(O)}
endsnippet

snippet AWS::SSM::MaintenanceWindowTask.TaskInvocationParameters "" sw

	MaintenanceWindowRunCommandParameters : ${1:AWS::SSM::MaintenanceWindowTask.MaintenanceWindowRunCommandParameters(O)}
	MaintenanceWindowAutomationParameters : ${2:AWS::SSM::MaintenanceWindowTask.MaintenanceWindowAutomationParameters(O)}
	MaintenanceWindowStepFunctionsParameters : ${3:AWS::SSM::MaintenanceWindowTask.MaintenanceWindowStepFunctionsParameters(O)}
	MaintenanceWindowLambdaParameters : ${4:AWS::SSM::MaintenanceWindowTask.MaintenanceWindowLambdaParameters(O)}
endsnippet

snippet AWS::KinesisFirehose::DeliveryStream.ProcessorParameter "" sw

	ParameterName : ${1:String(R)}
	ParameterValue : ${2:String(R)}
endsnippet

snippet AWS::AppSync::DataSource.LambdaConfig "" sw

	LambdaFunctionArn : ${1:String(R)}
endsnippet

snippet AWS::CodeDeploy::DeploymentGroup.EC2TagSet "" sw

	Ec2TagSetList : [${1:AWS::CodeDeploy::DeploymentGroup.EC2TagSetListObject(O)}]
endsnippet

snippet AWS::ApiGateway::ApiKey.StageKey "" sw

	RestApiId : ${1:String(O)}
	StageName : ${2:String(O)}
endsnippet

snippet AWS::S3::Bucket.ServerSideEncryptionByDefault "" sw

	KMSMasterKeyID : ${1:String(O)}
	SSEAlgorithm : ${2:String(R)}
endsnippet

snippet AWS::EMR::Cluster.EbsBlockDeviceConfig "" sw

	VolumeSpecification : ${1:AWS::EMR::Cluster.VolumeSpecification(R)}
	VolumesPerInstance : ${2:Integer(O)}
endsnippet

snippet AWS::ApiGatewayV2::RouteResponse.ParameterConstraints "" sw

	Required : ${1:Boolean(R)}
endsnippet

snippet AWS::CodeDeploy::DeploymentGroup.ELBInfo "" sw

	Name : ${1:String(O)}
endsnippet

snippet AWS::DynamoDB::Table.GlobalSecondaryIndex "" sw

	IndexName : ${1:String(R)}
	KeySchema : [${2:AWS::DynamoDB::Table.KeySchema(R)}]
	Projection : ${3:AWS::DynamoDB::Table.Projection(R)}
	ProvisionedThroughput : ${4:AWS::DynamoDB::Table.ProvisionedThroughput(O)}
endsnippet

snippet AWS::AutoScalingPlans::ScalingPlan.MetricDimension "" sw

	Value : ${1:String(R)}
	Name : ${2:String(R)}
endsnippet

snippet AWS::Events::Rule.RunCommandTarget "" sw

	Key : ${1:String(R)}
	Values : [${2:String(R)}]
endsnippet

snippet AWS::S3::Bucket.RedirectRule "" sw

	HostName : ${1:String(O)}
	HttpRedirectCode : ${2:String(O)}
	Protocol : ${3:String(O)}
	ReplaceKeyPrefixWith : ${4:String(O)}
	ReplaceKeyWith : ${5:String(O)}
endsnippet

snippet AWS::Events::EventBusPolicy.Condition "" sw

	Type : ${1:String(O)}
	Value : ${2:String(O)}
	Key : ${3:String(O)}
endsnippet

snippet AWS::EMR::InstanceGroupConfig.ScalingRule "" sw

	Action : ${1:AWS::EMR::InstanceGroupConfig.ScalingAction(R)}
	Description : ${2:String(O)}
	Name : ${3:String(R)}
	Trigger : ${4:AWS::EMR::InstanceGroupConfig.ScalingTrigger(R)}
endsnippet

snippet AWS::EMR::Cluster.PlacementType "" sw

	AvailabilityZone : ${1:String(R)}
endsnippet

snippet AWS::ElasticLoadBalancingV2::ListenerRule.RuleCondition "" sw

	Field : ${1:String(O)}
	Values : [${2:String(O)}]
endsnippet

snippet AWS::AppStream::Stack.ApplicationSettings "" sw

	SettingsGroup : ${1:String(O)}
	Enabled : ${2:Boolean(R)}
endsnippet

snippet AWS::ApiGateway::Deployment.StageDescription "" sw

	AccessLogSetting : ${1:AWS::ApiGateway::Deployment.AccessLogSetting(O)}
	CacheClusterEnabled : ${2:Boolean(O)}
	CacheClusterSize : ${3:String(O)}
	CacheDataEncrypted : ${4:Boolean(O)}
	CacheTtlInSeconds : ${5:Integer(O)}
	CachingEnabled : ${6:Boolean(O)}
	CanarySetting : ${7:AWS::ApiGateway::Deployment.CanarySetting(O)}
	ClientCertificateId : ${8:String(O)}
	DataTraceEnabled : ${9:Boolean(O)}
	Description : ${10:String(O)}
	DocumentationVersion : ${11:String(O)}
	LoggingLevel : ${12:String(O)}
	MethodSettings : [${13:AWS::ApiGateway::Deployment.MethodSetting(O)}]
	MetricsEnabled : ${14:Boolean(O)}
	Tags : [${15:AWS::ApiGateway::Deployment.Tag(O)}]
	ThrottlingBurstLimit : ${16:Integer(O)}
	ThrottlingRateLimit : ${17:Double(O)}
	TracingEnabled : ${18:Boolean(O)}
	Variables : [${19:String(O)}]
endsnippet

snippet AWS::EC2::SpotFleet.FleetLaunchTemplateSpecification "" sw

	LaunchTemplateId : ${1:String(O)}
	LaunchTemplateName : ${2:String(O)}
	Version : ${3:String(R)}
endsnippet

snippet AWS::S3::Bucket.RedirectAllRequestsTo "" sw

	HostName : ${1:String(R)}
	Protocol : ${2:String(O)}
endsnippet

snippet AWS::WAF::XssMatchSet.XssMatchTuple "" sw

	FieldToMatch : ${1:AWS::WAF::XssMatchSet.FieldToMatch(R)}
	TextTransformation : ${2:String(R)}
endsnippet

snippet AWS::SecretsManager::RotationSchedule.RotationRules "" sw

	AutomaticallyAfterDays : ${1:Integer(O)}
endsnippet

snippet AWS::IoTAnalytics::Pipeline.SelectAttributes "" sw

	Next : ${1:String(O)}
	Attributes : [${2:String(O)}]
	Name : ${3:String(O)}
endsnippet

snippet AWS::CodeDeploy::DeploymentGroup.AlarmConfiguration "" sw

	Alarms : [${1:AWS::CodeDeploy::DeploymentGroup.Alarm(O)}]
	Enabled : ${2:Boolean(O)}
	IgnorePollAlarmFailure : ${3:Boolean(O)}
endsnippet

snippet AWS::CodeBuild::Project.Environment "" sw

	Type : ${1:String(R)}
	EnvironmentVariables : [${2:AWS::CodeBuild::Project.EnvironmentVariable(O)}]
	PrivilegedMode : ${3:Boolean(O)}
	ImagePullCredentialsType : ${4:String(O)}
	Image : ${5:String(R)}
	RegistryCredential : ${6:AWS::CodeBuild::Project.RegistryCredential(O)}
	ComputeType : ${7:String(R)}
	Certificate : ${8:String(O)}
endsnippet

snippet AWS::S3::Bucket.S3KeyFilter "" sw

	Rules : [${1:AWS::S3::Bucket.FilterRule(R)}]
endsnippet

snippet AWS::IoTAnalytics::Pipeline.Datastore "" sw

	DatastoreName : ${1:String(O)}
	Name : ${2:String(O)}
endsnippet

snippet AWS::OpsWorks::App.SslConfiguration "" sw

	Certificate : ${1:String(O)}
	Chain : ${2:String(O)}
	PrivateKey : ${3:String(O)}
endsnippet

snippet AWS::AppStream::Fleet.DomainJoinInfo "" sw

	OrganizationalUnitDistinguishedName : ${1:String(O)}
	DirectoryName : ${2:String(O)}
endsnippet

snippet AWS::ApplicationAutoScaling::ScalableTarget.ScheduledAction "" sw

	EndTime : ${1:Timestamp(O)}
	ScalableTargetAction : ${2:AWS::ApplicationAutoScaling::ScalableTarget.ScalableTargetAction(O)}
	Schedule : ${3:String(R)}
	ScheduledActionName : ${4:String(R)}
	StartTime : ${5:Timestamp(O)}
endsnippet

snippet AWS::SSM::PatchBaseline.PatchFilter "" sw

	Values : [${1:String(O)}]
	Key : ${2:String(O)}
endsnippet

snippet AWS::ElasticLoadBalancing::LoadBalancer.LBCookieStickinessPolicy "" sw

	CookieExpirationPeriod : ${1:String(O)}
	PolicyName : ${2:String(O)}
endsnippet

snippet AWS::EC2::Instance.InstanceIpv6Address "" sw

	Ipv6Address : ${1:String(R)}
endsnippet

snippet AWS::EC2::Instance.Volume "" sw

	Device : ${1:String(R)}
	VolumeId : ${2:String(R)}
endsnippet

snippet AWS::EC2::NetworkAclEntry.PortRange "" sw

	From : ${1:Integer(O)}
	To : ${2:Integer(O)}
endsnippet

snippet AWS::ElasticBeanstalk::Environment.Tier "" sw

	Name : ${1:String(O)}
	Type : ${2:String(O)}
	Version : ${3:String(O)}
endsnippet

snippet AWS::Route53::HostedZone.HostedZoneConfig "" sw

	Comment : ${1:String(O)}
endsnippet

snippet AWS::CloudFront::Distribution.Origin "" sw

	OriginCustomHeaders : [${1:AWS::CloudFront::Distribution.OriginCustomHeader(O)}]
	DomainName : ${2:String(R)}
	S3OriginConfig : ${3:AWS::CloudFront::Distribution.S3OriginConfig(O)}
	OriginPath : ${4:String(O)}
	Id : ${5:String(R)}
	CustomOriginConfig : ${6:AWS::CloudFront::Distribution.CustomOriginConfig(O)}
endsnippet

snippet AWS::Glue::Connection.ConnectionInput "" sw

	Description : ${1:String(O)}
	ConnectionType : ${2:String(R)}
	MatchCriteria : [${3:String(O)}]
	PhysicalConnectionRequirements : ${4:AWS::Glue::Connection.PhysicalConnectionRequirements(O)}
	ConnectionProperties : ${5:Json(R)}
	Name : ${6:String(O)}
endsnippet

snippet AWS::Events::Rule.InputTransformer "" sw

	InputPathsMap : [${1:String(O)}]
	InputTemplate : ${2:String(R)}
endsnippet

snippet AWS::IoT::TopicRule.FirehoseAction "" sw

	DeliveryStreamName : ${1:String(R)}
	RoleArn : ${2:String(R)}
	Separator : ${3:String(O)}
endsnippet

snippet AWS::SSM::MaintenanceWindowTask.LoggingInfo "" sw

	S3Bucket : ${1:String(R)}
	Region : ${2:String(R)}
	S3Prefix : ${3:String(O)}
endsnippet

snippet AWS::IoT::TopicRule.TopicRulePayload "" sw

	Actions : [${1:AWS::IoT::TopicRule.Action(R)}]
	AwsIotSqlVersion : ${2:String(O)}
	Description : ${3:String(O)}
	ErrorAction : ${4:AWS::IoT::TopicRule.Action(O)}
	RuleDisabled : ${5:Boolean(R)}
	Sql : ${6:String(R)}
endsnippet

snippet AWS::EC2::Instance.AssociationParameter "" sw

	Key : ${1:String(R)}
	Value : [${2:String(R)}]
endsnippet

snippet AWS::Cognito::IdentityPool.PushSync "" sw

	ApplicationArns : [${1:String(O)}]
	RoleArn : ${2:String(O)}
endsnippet

snippet AWS::S3::Bucket.InventoryConfiguration "" sw

	Destination : ${1:AWS::S3::Bucket.Destination(R)}
	Enabled : ${2:Boolean(R)}
	Id : ${3:String(R)}
	IncludedObjectVersions : ${4:String(R)}
	OptionalFields : [${5:String(O)}]
	Prefix : ${6:String(O)}
	ScheduleFrequency : ${7:String(R)}
endsnippet

snippet AWS::WorkSpaces::Workspace.WorkspaceProperties "" sw

	ComputeTypeName : ${1:String(O)}
	RootVolumeSizeGib : ${2:Integer(O)}
	RunningMode : ${3:String(O)}
	RunningModeAutoStopTimeoutInMinutes : ${4:Integer(O)}
	UserVolumeSizeGib : ${5:Integer(O)}
endsnippet

snippet AWS::ECS::TaskDefinition.VolumeFrom "" sw

	ReadOnly : ${1:Boolean(O)}
	SourceContainer : ${2:String(O)}
endsnippet

snippet AWS::ElasticLoadBalancing::LoadBalancer.ConnectionDrainingPolicy "" sw

	Enabled : ${1:Boolean(R)}
	Timeout : ${2:Integer(O)}
endsnippet

snippet AWS::Greengrass::FunctionDefinition.Environment "" sw

	Variables : ${1:Json(O)}
	Execution : ${2:AWS::Greengrass::FunctionDefinition.Execution(O)}
	ResourceAccessPolicies : [${3:AWS::Greengrass::FunctionDefinition.ResourceAccessPolicy(O)}]
	AccessSysfs : ${4:Boolean(O)}
endsnippet

snippet AWS::ECS::Service.ServiceRegistry "" sw

	ContainerName : ${1:String(O)}
	ContainerPort : ${2:Integer(O)}
	Port : ${3:Integer(O)}
	RegistryArn : ${4:String(O)}
endsnippet

snippet AWS::S3::Bucket.WebsiteConfiguration "" sw

	ErrorDocument : ${1:String(O)}
	IndexDocument : ${2:String(O)}
	RedirectAllRequestsTo : ${3:AWS::S3::Bucket.RedirectAllRequestsTo(O)}
	RoutingRules : [${4:AWS::S3::Bucket.RoutingRule(O)}]
endsnippet

snippet AWS::Cognito::IdentityPool.CognitoIdentityProvider "" sw

	ServerSideTokenCheck : ${1:Boolean(O)}
	ProviderName : ${2:String(O)}
	ClientId : ${3:String(O)}
endsnippet

snippet AWS::CloudFront::Distribution.GeoRestriction "" sw

	Locations : [${1:String(O)}]
	RestrictionType : ${2:String(R)}
endsnippet

snippet AWS::IoTAnalytics::Dataset.DeltaTime "" sw

	TimeExpression : ${1:String(R)}
	OffsetSeconds : ${2:Integer(R)}
endsnippet

snippet AWS::EC2::EC2Fleet.FleetLaunchTemplateConfigRequest "" sw

	LaunchTemplateSpecification : ${1:AWS::EC2::EC2Fleet.FleetLaunchTemplateSpecificationRequest(O)}
	Overrides : [${2:AWS::EC2::EC2Fleet.FleetLaunchTemplateOverridesRequest(O)}]
endsnippet

snippet AWS::IoTAnalytics::Dataset.ResourceConfiguration "" sw

	VolumeSizeInGB : ${1:Integer(R)}
	ComputeType : ${2:String(R)}
endsnippet

snippet AWS::DMS::Endpoint.MongoDbSettings "" sw

	AuthSource : ${1:String(O)}
	AuthMechanism : ${2:String(O)}
	Username : ${3:String(O)}
	DocsToInvestigate : ${4:String(O)}
	ServerName : ${5:String(O)}
	Port : ${6:Integer(O)}
	ExtractDocId : ${7:String(O)}
	DatabaseName : ${8:String(O)}
	AuthType : ${9:String(O)}
	Password : ${10:String(O)}
	NestingLevel : ${11:String(O)}
endsnippet

snippet AWS::ElasticBeanstalk::ConfigurationTemplate.ConfigurationOptionSetting "" sw

	Namespace : ${1:String(R)}
	OptionName : ${2:String(R)}
	ResourceName : ${3:String(O)}
	Value : ${4:String(O)}
endsnippet

snippet AWS::SSM::MaintenanceWindowTask.Target "" sw

	Values : [${1:String(O)}]
	Key : ${2:String(R)}
endsnippet

snippet AWS::Batch::JobDefinition.NodeRangeProperty "" sw

	Container : ${1:AWS::Batch::JobDefinition.ContainerProperties(O)}
	TargetNodes : ${2:String(R)}
endsnippet

snippet AWS::Cognito::UserPool.Policies "" sw

	PasswordPolicy : ${1:AWS::Cognito::UserPool.PasswordPolicy(O)}
endsnippet

snippet AWS::Events::Rule.KinesisParameters "" sw

	PartitionKeyPath : ${1:String(R)}
endsnippet

snippet AWS::WAFRegional::ByteMatchSet.FieldToMatch "" sw

	Type : ${1:String(R)}
	Data : ${2:String(O)}
endsnippet

snippet AWS::AppStream::DirectoryConfig.ServiceAccountCredentials "" sw

	AccountName : ${1:String(R)}
	AccountPassword : ${2:String(R)}
endsnippet

snippet AWS::SNS::Topic.Subscription "" sw

	Endpoint : ${1:String(R)}
	Protocol : ${2:String(R)}
endsnippet

snippet AWS::CodeDeploy::DeploymentGroup.OnPremisesTagSetListObject "" sw

	OnPremisesTagGroup : [${1:AWS::CodeDeploy::DeploymentGroup.TagFilter(O)}]
endsnippet

snippet AWS::EC2::Instance.LaunchTemplateSpecification "" sw

	LaunchTemplateId : ${1:String(O)}
	LaunchTemplateName : ${2:String(O)}
	Version : ${3:String(R)}
endsnippet

snippet AWS::AutoScaling::AutoScalingGroup.MetricsCollection "" sw

	Granularity : ${1:String(R)}
	Metrics : [${2:String(O)}]
endsnippet

snippet AWS::CodePipeline::Pipeline.ArtifactStore "" sw

	EncryptionKey : ${1:AWS::CodePipeline::Pipeline.EncryptionKey(O)}
	Location : ${2:String(R)}
	Type : ${3:String(R)}
endsnippet

snippet AWS::CodeBuild::Project.CloudWatchLogsConfig "" sw

	Status : ${1:String(R)}
	GroupName : ${2:String(O)}
	StreamName : ${3:String(O)}
endsnippet

snippet AWS::DynamoDB::Table.KeySchema "" sw

	AttributeName : ${1:String(R)}
	KeyType : ${2:String(R)}
endsnippet

snippet AWS::S3::Bucket.ReplicationConfiguration "" sw

	Role : ${1:String(R)}
	Rules : [${2:AWS::S3::Bucket.ReplicationRule(R)}]
endsnippet

snippet AWS::Greengrass::ResourceDefinitionVersion.LocalVolumeResourceData "" sw

	SourcePath : ${1:String(R)}
	DestinationPath : ${2:String(R)}
	GroupOwnerSetting : ${3:AWS::Greengrass::ResourceDefinitionVersion.GroupOwnerSetting(O)}
endsnippet

snippet AWS::AppSync::DataSource.AwsIamConfig "" sw

	SigningRegion : ${1:String(O)}
	SigningServiceName : ${2:String(O)}
endsnippet

snippet AWS::RDS::DBInstance.ProcessorFeature "" sw

	Name : ${1:String(O)}
	Value : ${2:String(O)}
endsnippet

snippet AWS::SSM::PatchBaseline.Rule "" sw

	EnableNonSecurity : ${1:Boolean(O)}
	PatchFilterGroup : ${2:AWS::SSM::PatchBaseline.PatchFilterGroup(O)}
	ApproveAfterDays : ${3:Integer(O)}
	ComplianceLevel : ${4:String(O)}
endsnippet

snippet AWS::CloudFront::Distribution.ViewerCertificate "" sw

	IamCertificateId : ${1:String(O)}
	SslSupportMethod : ${2:String(O)}
	MinimumProtocolVersion : ${3:String(O)}
	CloudFrontDefaultCertificate : ${4:Boolean(O)}
	AcmCertificateArn : ${5:String(O)}
endsnippet

snippet AWS::S3::Bucket.SseKmsEncryptedObjects "" sw

	Status : ${1:String(R)}
endsnippet

snippet AWS::EMR::Cluster.Configuration "" sw

	Classification : ${1:String(O)}
	ConfigurationProperties : [${2:String(O)}]
	Configurations : [${3:AWS::EMR::Cluster.Configuration(O)}]
endsnippet

snippet AWS::EMR::InstanceFleetConfig.InstanceTypeConfig "" sw

	BidPrice : ${1:String(O)}
	BidPriceAsPercentageOfOnDemandPrice : ${2:Double(O)}
	Configurations : [${3:AWS::EMR::InstanceFleetConfig.Configuration(O)}]
	EbsConfiguration : ${4:AWS::EMR::InstanceFleetConfig.EbsConfiguration(O)}
	InstanceType : ${5:String(R)}
	WeightedCapacity : ${6:Integer(O)}
endsnippet

snippet AWS::WAFRegional::XssMatchSet.XssMatchTuple "" sw

	TextTransformation : ${1:String(R)}
	FieldToMatch : ${2:AWS::WAFRegional::XssMatchSet.FieldToMatch(R)}
endsnippet

snippet AWS::ApplicationAutoScaling::ScalingPolicy.PredefinedMetricSpecification "" sw

	PredefinedMetricType : ${1:String(R)}
	ResourceLabel : ${2:String(O)}
endsnippet

snippet AWS::ECS::TaskDefinition.HostEntry "" sw

	Hostname : ${1:String(R)}
	IpAddress : ${2:String(R)}
endsnippet

snippet AWS::Cognito::UserPool.EmailConfiguration "" sw

	ReplyToEmailAddress : ${1:String(O)}
	SourceArn : ${2:String(O)}
endsnippet

snippet AWS::S3::Bucket.Rule "" sw

	AbortIncompleteMultipartUpload : ${1:AWS::S3::Bucket.AbortIncompleteMultipartUpload(O)}
	ExpirationDate : ${2:Timestamp(O)}
	ExpirationInDays : ${3:Integer(O)}
	Id : ${4:String(O)}
	NoncurrentVersionExpirationInDays : ${5:Integer(O)}
	NoncurrentVersionTransition : ${6:AWS::S3::Bucket.NoncurrentVersionTransition(O)}
	NoncurrentVersionTransitions : [${7:AWS::S3::Bucket.NoncurrentVersionTransition(O)}]
	Prefix : ${8:String(O)}
	Status : ${9:String(R)}
	TagFilters : [${10:AWS::S3::Bucket.TagFilter(O)}]
	Transition : ${11:AWS::S3::Bucket.Transition(O)}
	Transitions : [${12:AWS::S3::Bucket.Transition(O)}]
endsnippet

snippet AWS::DLM::LifecyclePolicy.RetainRule "" sw

	Count : ${1:Integer(R)}
endsnippet

snippet AWS::ECS::TaskDefinition.KernelCapabilities "" sw

	Add : [${1:String(O)}]
	Drop : [${2:String(O)}]
endsnippet

snippet AWS::S3::Bucket.QueueConfiguration "" sw

	Event : ${1:String(R)}
	Filter : ${2:AWS::S3::Bucket.NotificationFilter(O)}
	Queue : ${3:String(R)}
endsnippet

snippet AWS::EMR::InstanceGroupConfig.ScalingAction "" sw

	Market : ${1:String(O)}
	SimpleScalingPolicyConfiguration : ${2:AWS::EMR::InstanceGroupConfig.SimpleScalingPolicyConfiguration(R)}
endsnippet

snippet AWS::IoTAnalytics::Dataset.TriggeringDataset "" sw

	DatasetName : ${1:String(R)}
endsnippet

snippet AWS::ElasticLoadBalancing::LoadBalancer.Listeners "" sw

	InstancePort : ${1:String(R)}
	InstanceProtocol : ${2:String(O)}
	LoadBalancerPort : ${3:String(R)}
	PolicyNames : [${4:String(O)}]
	Protocol : ${5:String(R)}
	SSLCertificateId : ${6:String(O)}
endsnippet

snippet AWS::CodePipeline::Webhook.WebhookFilterRule "" sw

	JsonPath : ${1:String(R)}
	MatchEquals : ${2:String(O)}
endsnippet

snippet AWS::EMR::InstanceGroupConfig.ScalingTrigger "" sw

	CloudWatchAlarmDefinition : ${1:AWS::EMR::InstanceGroupConfig.CloudWatchAlarmDefinition(R)}
endsnippet

snippet AWS::AmazonMQ::Broker.MaintenanceWindow "" sw

	DayOfWeek : ${1:String(R)}
	TimeOfDay : ${2:String(R)}
	TimeZone : ${3:String(R)}
endsnippet

snippet AWS::S3::Bucket.TopicConfiguration "" sw

	Event : ${1:String(R)}
	Filter : ${2:AWS::S3::Bucket.NotificationFilter(O)}
	Topic : ${3:String(R)}
endsnippet

snippet AWS::CloudFront::Distribution.S3OriginConfig "" sw

	OriginAccessIdentity : ${1:String(O)}
endsnippet

snippet AWS::ElasticLoadBalancingV2::LoadBalancer.LoadBalancerAttribute "" sw

	Key : ${1:String(O)}
	Value : ${2:String(O)}
endsnippet

snippet AWS::Glue::Connection.PhysicalConnectionRequirements "" sw

	AvailabilityZone : ${1:String(O)}
	SecurityGroupIdList : [${2:String(O)}]
	SubnetId : ${3:String(O)}
endsnippet

snippet AWS::EC2::SpotFleet.TargetGroup "" sw

	Arn : ${1:String(R)}
endsnippet

snippet AWS::EC2::LaunchTemplate.ElasticGpuSpecification "" sw

	Type : ${1:String(O)}
endsnippet

snippet AWS::EC2::EC2Fleet.OnDemandOptionsRequest "" sw

	AllocationStrategy : ${1:String(O)}
endsnippet

snippet AWS::ECS::TaskDefinition.TaskDefinitionPlacementConstraint "" sw

	Expression : ${1:String(O)}
	Type : ${2:String(R)}
endsnippet

snippet AWS::SSM::Association.ParameterValues "" sw

	ParameterValues : [${1:String(R)}]
endsnippet

snippet AWS::Cognito::UserPool.LambdaConfig "" sw

	CreateAuthChallenge : ${1:String(O)}
	PreAuthentication : ${2:String(O)}
	DefineAuthChallenge : ${3:String(O)}
	PreSignUp : ${4:String(O)}
	PostAuthentication : ${5:String(O)}
	PostConfirmation : ${6:String(O)}
	CustomMessage : ${7:String(O)}
	VerifyAuthChallengeResponse : ${8:String(O)}
endsnippet

snippet AWS::SSM::PatchBaseline.PatchFilterGroup "" sw

	PatchFilters : [${1:AWS::SSM::PatchBaseline.PatchFilter(O)}]
endsnippet

snippet AWS::DLM::LifecyclePolicy.PolicyDetails "" sw

	ResourceTypes : [${1:String(O)}]
	Schedules : [${2:AWS::DLM::LifecyclePolicy.Schedule(O)}]
	TargetTags : [${3:AWS::DLM::LifecyclePolicy.Tag(O)}]
endsnippet

snippet AWS::Glue::Crawler.JdbcTarget "" sw

	ConnectionName : ${1:String(O)}
	Path : ${2:String(O)}
	Exclusions : [${3:String(O)}]
endsnippet

snippet AWS::AmazonMQ::Configuration.TagsEntry "" sw

	Value : ${1:String(R)}
	Key : ${2:String(R)}
endsnippet

snippet AWS::EC2::NetworkInterface.PrivateIpAddressSpecification "" sw

	Primary : ${1:Boolean(R)}
	PrivateIpAddress : ${2:String(R)}
endsnippet

snippet AWS::Glue::Table.TableInput "" sw

	Owner : ${1:String(O)}
	ViewOriginalText : ${2:String(O)}
	Description : ${3:String(O)}
	TableType : ${4:String(O)}
	Parameters : ${5:Json(O)}
	ViewExpandedText : ${6:String(O)}
	StorageDescriptor : ${7:AWS::Glue::Table.StorageDescriptor(O)}
	PartitionKeys : [${8:AWS::Glue::Table.Column(O)}]
	Retention : ${9:Integer(O)}
	Name : ${10:String(O)}
endsnippet

snippet AWS::CodeBuild::Project.ProjectCache "" sw

	Modes : [${1:String(O)}]
	Type : ${2:String(R)}
	Location : ${3:String(O)}
endsnippet

snippet AWS::WAF::SizeConstraintSet.FieldToMatch "" sw

	Data : ${1:String(O)}
	Type : ${2:String(R)}
endsnippet

snippet AWS::CodeBuild::Project.GitSubmodulesConfig "" sw

	FetchSubmodules : ${1:Boolean(R)}
endsnippet

snippet AWS::IoT::TopicRule.LambdaAction "" sw

	FunctionArn : ${1:String(O)}
endsnippet

snippet AWS::Greengrass::FunctionDefinition.FunctionDefinitionVersion "" sw

	DefaultConfig : ${1:AWS::Greengrass::FunctionDefinition.DefaultConfig(O)}
	Functions : [${2:AWS::Greengrass::FunctionDefinition.Function(R)}]
endsnippet

snippet AWS::IoTAnalytics::Pipeline.AddAttributes "" sw

	Next : ${1:String(O)}
	Attributes : ${2:Json(O)}
	Name : ${3:String(O)}
endsnippet

snippet AWS::Lambda::Function.TracingConfig "" sw

	Mode : ${1:String(O)}
endsnippet

snippet AWS::EMR::Cluster.ScriptBootstrapActionConfig "" sw

	Args : [${1:String(O)}]
	Path : ${2:String(R)}
endsnippet

snippet AWS::AutoScaling::LaunchConfiguration.BlockDevice "" sw

	DeleteOnTermination : ${1:Boolean(O)}
	Encrypted : ${2:Boolean(O)}
	Iops : ${3:Integer(O)}
	SnapshotId : ${4:String(O)}
	VolumeSize : ${5:Integer(O)}
	VolumeType : ${6:String(O)}
endsnippet

snippet AWS::S3::Bucket.MetricsConfiguration "" sw

	Id : ${1:String(R)}
	Prefix : ${2:String(O)}
	TagFilters : [${3:AWS::S3::Bucket.TagFilter(O)}]
endsnippet

snippet AWS::ECS::Service.DeploymentConfiguration "" sw

	MaximumPercent : ${1:Integer(O)}
	MinimumHealthyPercent : ${2:Integer(O)}
endsnippet

snippet AWS::OpsWorks::Layer.AutoScalingThresholds "" sw

	CpuThreshold : ${1:Double(O)}
	IgnoreMetricsTime : ${2:Integer(O)}
	InstanceCount : ${3:Integer(O)}
	LoadThreshold : ${4:Double(O)}
	MemoryThreshold : ${5:Double(O)}
	ThresholdsWaitTime : ${6:Integer(O)}
endsnippet

snippet AWS::Batch::JobDefinition.MountPoints "" sw

	ReadOnly : ${1:Boolean(O)}
	SourceVolume : ${2:String(O)}
	ContainerPath : ${3:String(O)}
endsnippet

snippet AWS::CodeDeploy::DeploymentGroup.DeploymentStyle "" sw

	DeploymentOption : ${1:String(O)}
	DeploymentType : ${2:String(O)}
endsnippet

snippet AWS::Cognito::UserPool.AdminCreateUserConfig "" sw

	InviteMessageTemplate : ${1:AWS::Cognito::UserPool.InviteMessageTemplate(O)}
	UnusedAccountValidityDays : ${2:Double(O)}
	AllowAdminCreateUserOnly : ${3:Boolean(O)}
endsnippet

snippet AWS::EC2::Instance.Ebs "" sw

	DeleteOnTermination : ${1:Boolean(O)}
	Encrypted : ${2:Boolean(O)}
	Iops : ${3:Integer(O)}
	SnapshotId : ${4:String(O)}
	VolumeSize : ${5:Integer(O)}
	VolumeType : ${6:String(O)}
endsnippet

snippet AWS::ApiGateway::Deployment.CanarySetting "" sw

	PercentTraffic : ${1:Double(O)}
	StageVariableOverrides : [${2:String(O)}]
	UseStageCache : ${3:Boolean(O)}
endsnippet

snippet AWS::CodeDeploy::DeploymentGroup.Alarm "" sw

	Name : ${1:String(O)}
endsnippet

snippet AWS::Cognito::UserPool.SchemaAttribute "" sw

	DeveloperOnlyAttribute : ${1:Boolean(O)}
	Mutable : ${2:Boolean(O)}
	AttributeDataType : ${3:String(O)}
	StringAttributeConstraints : ${4:AWS::Cognito::UserPool.StringAttributeConstraints(O)}
	Required : ${5:Boolean(O)}
	NumberAttributeConstraints : ${6:AWS::Cognito::UserPool.NumberAttributeConstraints(O)}
	Name : ${7:String(O)}
endsnippet

snippet AWS::IoTAnalytics::Dataset.Schedule "" sw

	ScheduleExpression : ${1:String(R)}
endsnippet

snippet AWS::ApplicationAutoScaling::ScalingPolicy.CustomizedMetricSpecification "" sw

	Dimensions : [${1:AWS::ApplicationAutoScaling::ScalingPolicy.MetricDimension(O)}]
	MetricName : ${2:String(R)}
	Namespace : ${3:String(R)}
	Statistic : ${4:String(R)}
	Unit : ${5:String(O)}
endsnippet

snippet AWS::Glue::Classifier.GrokClassifier "" sw

	CustomPatterns : ${1:String(O)}
	GrokPattern : ${2:String(R)}
	Classification : ${3:String(R)}
	Name : ${4:String(O)}
endsnippet

snippet AWS::EC2::LaunchTemplate.TagSpecification "" sw

	ResourceType : ${1:String(O)}
	Tags : [${2:AWS::EC2::LaunchTemplate.Tag(O)}]
endsnippet

snippet AWS::AppSync::DataSource.HttpConfig "" sw

	Endpoint : ${1:String(R)}
	AuthorizationConfig : ${2:AWS::AppSync::DataSource.AuthorizationConfig(O)}
endsnippet

snippet AWS::SageMaker::Model.VpcConfig "" sw

	Subnets : [${1:String(R)}]
	SecurityGroupIds : [${2:String(R)}]
endsnippet

snippet AWS::S3::Bucket.TagFilter "" sw

	Key : ${1:String(R)}
	Value : ${2:String(R)}
endsnippet

snippet AWS::IoTAnalytics::Pipeline.DeviceRegistryEnrich "" sw

	Attribute : ${1:String(O)}
	Next : ${2:String(O)}
	ThingName : ${3:String(O)}
	RoleArn : ${4:String(O)}
	Name : ${5:String(O)}
endsnippet

snippet AWS::WAF::SizeConstraintSet.SizeConstraint "" sw

	ComparisonOperator : ${1:String(R)}
	FieldToMatch : ${2:AWS::WAF::SizeConstraintSet.FieldToMatch(R)}
	Size : ${3:Integer(R)}
	TextTransformation : ${4:String(R)}
endsnippet

snippet AWS::CodeBuild::Project.FilterGroup "" sw

endsnippet

snippet AWS::GuardDuty::Filter.Condition "" sw

	Lt : ${1:Integer(O)}
	Gte : ${2:Integer(O)}
	Neq : [${3:String(O)}]
	Eq : [${4:String(O)}]
	Lte : ${5:Integer(O)}
endsnippet

snippet AWS::EC2::LaunchTemplate.Ipv6Add "" sw

	Ipv6Address : ${1:String(O)}
endsnippet

snippet AWS::OpsWorks::Instance.BlockDeviceMapping "" sw

	DeviceName : ${1:String(O)}
	Ebs : ${2:AWS::OpsWorks::Instance.EbsBlockDevice(O)}
	NoDevice : ${3:String(O)}
	VirtualName : ${4:String(O)}
endsnippet

snippet AWS::EC2::LaunchTemplate.IamInstanceProfile "" sw

	Arn : ${1:String(O)}
	Name : ${2:String(O)}
endsnippet

snippet AWS::EC2::Instance.LicenseSpecification "" sw

	LicenseConfigurationArn : ${1:String(R)}
endsnippet

snippet AWS::Cognito::UserPool.NumberAttributeConstraints "" sw

	MinValue : ${1:String(O)}
	MaxValue : ${2:String(O)}
endsnippet

snippet AWS::AutoScalingPlans::ScalingPlan.PredefinedScalingMetricSpecification "" sw

	ResourceLabel : ${1:String(O)}
	PredefinedScalingMetricType : ${2:String(R)}
endsnippet

snippet AWS::AmazonMQ::Broker.LogList "" sw

	Audit : ${1:Boolean(O)}
	General : ${2:Boolean(O)}
endsnippet

snippet AWS::CloudTrail::Trail.DataResource "" sw

	Type : ${1:String(R)}
	Values : [${2:String(O)}]
endsnippet

snippet AWS::AppStream::ImageBuilder.DomainJoinInfo "" sw

	OrganizationalUnitDistinguishedName : ${1:String(O)}
	DirectoryName : ${2:String(O)}
endsnippet

snippet AWS::IoT::TopicRule.DynamoDBv2Action "" sw

	PutItem : ${1:AWS::IoT::TopicRule.PutItemInput(O)}
	RoleArn : ${2:String(O)}
endsnippet

snippet AWS::AmazonMQ::Broker.TagsEntry "" sw

	Value : ${1:String(R)}
	Key : ${2:String(R)}
endsnippet

snippet AWS::OpsWorks::Instance.EbsBlockDevice "" sw

	DeleteOnTermination : ${1:Boolean(O)}
	Iops : ${2:Integer(O)}
	SnapshotId : ${3:String(O)}
	VolumeSize : ${4:Integer(O)}
	VolumeType : ${5:String(O)}
endsnippet

snippet AWS::ApiGateway::UsagePlan.ThrottleSettings "" sw

	BurstLimit : ${1:Integer(O)}
	RateLimit : ${2:Double(O)}
endsnippet

snippet AWS::ApiGateway::DocumentationPart.Location "" sw

	Method : ${1:String(O)}
	Name : ${2:String(O)}
	Path : ${3:String(O)}
	StatusCode : ${4:String(O)}
	Type : ${5:String(O)}
endsnippet

snippet AWS::DataPipeline::Pipeline.PipelineObject "" sw

	Fields : [${1:AWS::DataPipeline::Pipeline.Field(R)}]
	Id : ${2:String(R)}
	Name : ${3:String(R)}
endsnippet

snippet AWS::EC2::Instance.NoDevice "" sw

endsnippet

snippet AWS::IoTAnalytics::Channel.RetentionPeriod "" sw

	NumberOfDays : ${1:Integer(O)}
	Unlimited : ${2:Boolean(O)}
endsnippet

snippet AWS::Glue::Table.SerdeInfo "" sw

	Parameters : ${1:Json(O)}
	SerializationLibrary : ${2:String(O)}
	Name : ${3:String(O)}
endsnippet

snippet AWS::IAM::Role.Policy "" sw

	PolicyDocument : ${1:Json(R)}
	PolicyName : ${2:String(R)}
endsnippet

snippet AWS::AutoScaling::ScalingPolicy.StepAdjustment "" sw

	MetricIntervalLowerBound : ${1:Double(O)}
	MetricIntervalUpperBound : ${2:Double(O)}
	ScalingAdjustment : ${3:Integer(R)}
endsnippet

snippet AWS::Batch::JobDefinition.Environment "" sw

	Value : ${1:String(O)}
	Name : ${2:String(O)}
endsnippet

snippet AWS::AmazonMQ::Broker.ConfigurationId "" sw

	Revision : ${1:Integer(R)}
	Id : ${2:String(R)}
endsnippet

snippet AWS::EC2::Instance.SsmAssociation "" sw

	AssociationParameters : [${1:AWS::EC2::Instance.AssociationParameter(O)}]
	DocumentName : ${2:String(R)}
endsnippet

snippet AWS::EMR::Cluster.CloudWatchAlarmDefinition "" sw

	ComparisonOperator : ${1:String(R)}
	Dimensions : [${2:AWS::EMR::Cluster.MetricDimension(O)}]
	EvaluationPeriods : ${3:Integer(O)}
	MetricName : ${4:String(R)}
	Namespace : ${5:String(O)}
	Period : ${6:Integer(R)}
	Statistic : ${7:String(O)}
	Threshold : ${8:Double(R)}
	Unit : ${9:String(O)}
endsnippet

snippet AWS::Glue::Crawler.Schedule "" sw

	ScheduleExpression : ${1:String(O)}
endsnippet

snippet AWS::SSM::PatchBaseline.PatchSource "" sw

	Products : [${1:String(O)}]
	Configuration : ${2:String(O)}
	Name : ${3:String(O)}
endsnippet

snippet AWS::EC2::LaunchTemplate.CapacityReservationTarget "" sw

	CapacityReservationId : ${1:String(O)}
endsnippet

snippet AWS::CloudFront::StreamingDistribution.S3Origin "" sw

	DomainName : ${1:String(R)}
	OriginAccessIdentity : ${2:String(R)}
endsnippet

snippet AWS::OpsWorks::Stack.StackConfigurationManager "" sw

	Name : ${1:String(O)}
	Version : ${2:String(O)}
endsnippet

snippet AWS::CodeBuild::Project.VpcConfig "" sw

	Subnets : [${1:String(O)}]
	VpcId : ${2:String(O)}
	SecurityGroupIds : [${3:String(O)}]
endsnippet

snippet AWS::OpsWorksCM::Server.EngineAttribute "" sw

	Value : ${1:String(O)}
	Name : ${2:String(O)}
endsnippet

snippet AWS::IoT::TopicRule.ElasticsearchAction "" sw

	Endpoint : ${1:String(R)}
	Id : ${2:String(R)}
	Index : ${3:String(R)}
	RoleArn : ${4:String(R)}
	Type : ${5:String(R)}
endsnippet

snippet AWS::Greengrass::FunctionDefinition.Function "" sw

	FunctionArn : ${1:String(R)}
	FunctionConfiguration : ${2:AWS::Greengrass::FunctionDefinition.FunctionConfiguration(R)}
	Id : ${3:String(R)}
endsnippet

snippet AWS::Glue::Partition.SkewedInfo "" sw

	SkewedColumnNames : [${1:String(O)}]
	SkewedColumnValues : [${2:String(O)}]
	SkewedColumnValueLocationMaps : ${3:Json(O)}
endsnippet

snippet AWS::Cognito::UserPool.SmsConfiguration "" sw

	ExternalId : ${1:String(O)}
	SnsCallerArn : ${2:String(O)}
endsnippet

snippet AWS::ElasticBeanstalk::Application.ApplicationVersionLifecycleConfig "" sw

	MaxAgeRule : ${1:AWS::ElasticBeanstalk::Application.MaxAgeRule(O)}
	MaxCountRule : ${2:AWS::ElasticBeanstalk::Application.MaxCountRule(O)}
endsnippet

snippet AWS::Config::ConfigRule.Source "" sw

	Owner : ${1:String(R)}
	SourceDetails : [${2:AWS::Config::ConfigRule.SourceDetail(O)}]
	SourceIdentifier : ${3:String(R)}
endsnippet

snippet AWS::ApiGateway::RestApi.S3Location "" sw

	Bucket : ${1:String(O)}
	ETag : ${2:String(O)}
	Key : ${3:String(O)}
	Version : ${4:String(O)}
endsnippet

snippet AWS::DynamoDB::Table.Projection "" sw

	NonKeyAttributes : [${1:String(O)}]
	ProjectionType : ${2:String(O)}
endsnippet

snippet AWS::EC2::LaunchTemplate.NetworkInterface "" sw

	Description : ${1:String(O)}
	PrivateIpAddress : ${2:String(O)}
	PrivateIpAddresses : [${3:AWS::EC2::LaunchTemplate.PrivateIpAdd(O)}]
	SecondaryPrivateIpAddressCount : ${4:Integer(O)}
	Ipv6AddressCount : ${5:Integer(O)}
	Groups : [${6:String(O)}]
	DeviceIndex : ${7:Integer(O)}
	SubnetId : ${8:String(O)}
	Ipv6Addresses : [${9:AWS::EC2::LaunchTemplate.Ipv6Add(O)}]
	AssociatePublicIpAddress : ${10:Boolean(O)}
	NetworkInterfaceId : ${11:String(O)}
	DeleteOnTermination : ${12:Boolean(O)}
endsnippet

snippet AWS::ElasticLoadBalancingV2::Listener.Certificate "" sw

	CertificateArn : ${1:String(O)}
endsnippet

snippet AWS::AppStream::Stack.StorageConnector "" sw

	Domains : [${1:String(O)}]
	ResourceIdentifier : ${2:String(O)}
	ConnectorType : ${3:String(R)}
endsnippet

snippet AWS::ElasticLoadBalancingV2::ListenerRule.RedirectConfig "" sw

	Host : ${1:String(O)}
	Path : ${2:String(O)}
	Port : ${3:String(O)}
	Protocol : ${4:String(O)}
	Query : ${5:String(O)}
	StatusCode : ${6:String(R)}
endsnippet

snippet AWS::IoTAnalytics::Dataset.Trigger "" sw

	Schedule : ${1:AWS::IoTAnalytics::Dataset.Schedule(O)}
	TriggeringDataset : ${2:AWS::IoTAnalytics::Dataset.TriggeringDataset(O)}
endsnippet

snippet AWS::ElasticLoadBalancingV2::TargetGroup.Matcher "" sw

	HttpCode : ${1:String(R)}
endsnippet

snippet AWS::WAFRegional::XssMatchSet.FieldToMatch "" sw

	Type : ${1:String(R)}
	Data : ${2:String(O)}
endsnippet

snippet AWS::IoTAnalytics::Dataset.RetentionPeriod "" sw

	NumberOfDays : ${1:Integer(R)}
	Unlimited : ${2:Boolean(R)}
endsnippet

snippet AWS::Config::ConfigurationAggregator.AccountAggregationSource "" sw

	AllAwsRegions : ${1:Boolean(O)}
	AwsRegions : [${2:String(O)}]
	AccountIds : [${3:String(R)}]
endsnippet

snippet AWS::IoT::TopicRule.DynamoDBAction "" sw

	HashKeyField : ${1:String(R)}
	HashKeyType : ${2:String(O)}
	HashKeyValue : ${3:String(R)}
	PayloadField : ${4:String(O)}
	RangeKeyField : ${5:String(O)}
	RangeKeyType : ${6:String(O)}
	RangeKeyValue : ${7:String(O)}
	RoleArn : ${8:String(R)}
	TableName : ${9:String(R)}
endsnippet

snippet AWS::IoT1Click::Project.DeviceTemplate "" sw

	DeviceType : ${1:String(O)}
	CallbackOverrides : ${2:Json(O)}
endsnippet

snippet AWS::Greengrass::FunctionDefinition.RunAs "" sw

	Uid : ${1:Integer(O)}
	Gid : ${2:Integer(O)}
endsnippet

snippet AWS::ECS::Service.PlacementConstraint "" sw

	Expression : ${1:String(O)}
	Type : ${2:String(R)}
endsnippet

snippet AWS::ElasticLoadBalancingV2::TargetGroup.TargetDescription "" sw

	AvailabilityZone : ${1:String(O)}
	Id : ${2:String(R)}
	Port : ${3:Integer(O)}
endsnippet

snippet AWS::CodeDeploy::DeploymentConfig.MinimumHealthyHosts "" sw

	Type : ${1:String(R)}
	Value : ${2:Integer(R)}
endsnippet

snippet AWS::AutoScalingPlans::ScalingPlan.TagFilter "" sw

	Values : [${1:String(O)}]
	Key : ${2:String(R)}
endsnippet

snippet AWS::Route53::RecordSetGroup.GeoLocation "" sw

	ContinentCode : ${1:String(O)}
	CountryCode : ${2:String(O)}
	SubdivisionCode : ${3:String(O)}
endsnippet

snippet AWS::ApiGateway::RestApi.EndpointConfiguration "" sw

	Types : [${1:String(O)}]
endsnippet

snippet AWS::EC2::Instance.CreditSpecification "" sw

	CPUCredits : ${1:String(O)}
endsnippet

snippet AWS::WAFRegional::SizeConstraintSet.SizeConstraint "" sw

	ComparisonOperator : ${1:String(R)}
	Size : ${2:Integer(R)}
	TextTransformation : ${3:String(R)}
	FieldToMatch : ${4:AWS::WAFRegional::SizeConstraintSet.FieldToMatch(R)}
endsnippet

snippet AWS::EMR::InstanceGroupConfig.ScalingConstraints "" sw

	MaxCapacity : ${1:Integer(R)}
	MinCapacity : ${2:Integer(R)}
endsnippet

snippet AWS::OpsWorks::Layer.Recipes "" sw

	Configure : [${1:String(O)}]
	Deploy : [${2:String(O)}]
	Setup : [${3:String(O)}]
	Shutdown : [${4:String(O)}]
	Undeploy : [${5:String(O)}]
endsnippet

snippet AWS::Glue::Crawler.S3Target "" sw

	Path : ${1:String(O)}
	Exclusions : [${2:String(O)}]
endsnippet

snippet AWS::Greengrass::ResourceDefinitionVersion.ResourceDataContainer "" sw

	SecretsManagerSecretResourceData : ${1:AWS::Greengrass::ResourceDefinitionVersion.SecretsManagerSecretResourceData(O)}
	SageMakerMachineLearningModelResourceData : ${2:AWS::Greengrass::ResourceDefinitionVersion.SageMakerMachineLearningModelResourceData(O)}
	LocalVolumeResourceData : ${3:AWS::Greengrass::ResourceDefinitionVersion.LocalVolumeResourceData(O)}
	LocalDeviceResourceData : ${4:AWS::Greengrass::ResourceDefinitionVersion.LocalDeviceResourceData(O)}
	S3MachineLearningModelResourceData : ${5:AWS::Greengrass::ResourceDefinitionVersion.S3MachineLearningModelResourceData(O)}
endsnippet

snippet AWS::ECR::Repository.LifecyclePolicy "" sw

	LifecyclePolicyText : ${1:String(O)}
	RegistryId : ${2:String(O)}
endsnippet

snippet AWS::AppStream::Fleet.VpcConfig "" sw

	SubnetIds : [${1:String(O)}]
	SecurityGroupIds : [${2:String(O)}]
endsnippet

snippet AWS::Greengrass::DeviceDefinitionVersion.Device "" sw

	SyncShadow : ${1:Boolean(O)}
	ThingArn : ${2:String(R)}
	Id : ${3:String(R)}
	CertificateArn : ${4:String(R)}
endsnippet

snippet AWS::EC2::EC2Fleet.TagRequest "" sw

	Value : ${1:String(O)}
	Key : ${2:String(O)}
endsnippet

snippet AWS::ECS::TaskDefinition.Volume "" sw

	DockerVolumeConfiguration : ${1:AWS::ECS::TaskDefinition.DockerVolumeConfiguration(O)}
	Host : ${2:AWS::ECS::TaskDefinition.HostVolumeProperties(O)}
	Name : ${3:String(O)}
endsnippet

snippet AWS::Greengrass::FunctionDefinition.ResourceAccessPolicy "" sw

	ResourceId : ${1:String(R)}
	Permission : ${2:String(O)}
endsnippet

snippet AWS::CloudWatch::Alarm.Dimension "" sw

	Name : ${1:String(R)}
	Value : ${2:String(R)}
endsnippet

snippet AWS::EMR::InstanceGroupConfig.CloudWatchAlarmDefinition "" sw

	ComparisonOperator : ${1:String(R)}
	Dimensions : [${2:AWS::EMR::InstanceGroupConfig.MetricDimension(O)}]
	EvaluationPeriods : ${3:Integer(O)}
	MetricName : ${4:String(R)}
	Namespace : ${5:String(O)}
	Period : ${6:Integer(R)}
	Statistic : ${7:String(O)}
	Threshold : ${8:Double(R)}
	Unit : ${9:String(O)}
endsnippet

snippet AWS::S3::Bucket.Transition "" sw

	StorageClass : ${1:String(R)}
	TransitionDate : ${2:Timestamp(O)}
	TransitionInDays : ${3:Integer(O)}
endsnippet

snippet AWS::Route53::HostedZone.QueryLoggingConfig "" sw

	CloudWatchLogsLogGroupArn : ${1:String(R)}
endsnippet

snippet AWS::EC2::SpotFleet.InstanceIpv6Address "" sw

	Ipv6Address : ${1:String(R)}
endsnippet

snippet AWS::ServiceDiscovery::Service.HealthCheckCustomConfig "" sw

	FailureThreshold : ${1:Double(O)}
endsnippet

snippet AWS::EMR::Cluster.EbsConfiguration "" sw

	EbsBlockDeviceConfigs : [${1:AWS::EMR::Cluster.EbsBlockDeviceConfig(O)}]
	EbsOptimized : ${2:Boolean(O)}
endsnippet

snippet AWS::SSM::Association.S3OutputLocation "" sw

	OutputS3BucketName : ${1:String(O)}
	OutputS3KeyPrefix : ${2:String(O)}
endsnippet

snippet AWS::Greengrass::ResourceDefinitionVersion.GroupOwnerSetting "" sw

	AutoAddGroupOwner : ${1:Boolean(R)}
	GroupOwner : ${2:String(O)}
endsnippet

snippet AWS::WAFRegional::WebACL.Action "" sw

	Type : ${1:String(R)}
endsnippet

snippet AWS::S3::Bucket.DataExport "" sw

	Destination : ${1:AWS::S3::Bucket.Destination(R)}
	OutputSchemaVersion : ${2:String(R)}
endsnippet

snippet AWS::CloudFront::Distribution.CustomErrorResponse "" sw

	ResponseCode : ${1:Integer(O)}
	ErrorCachingMinTTL : ${2:Double(O)}
	ErrorCode : ${3:Integer(R)}
	ResponsePagePath : ${4:String(O)}
endsnippet

snippet AWS::Lambda::Function.Code "" sw

	S3Bucket : ${1:String(O)}
	S3Key : ${2:String(O)}
	S3ObjectVersion : ${3:String(O)}
	ZipFile : ${4:String(O)}
endsnippet

snippet AWS::EC2::EC2Fleet.TargetCapacitySpecificationRequest "" sw

	DefaultTargetCapacityType : ${1:String(O)}
	TotalTargetCapacity : ${2:Integer(R)}
	OnDemandTargetCapacity : ${3:Integer(O)}
	SpotTargetCapacity : ${4:Integer(O)}
endsnippet

snippet AWS::KinesisFirehose::DeliveryStream.Processor "" sw

	Parameters : [${1:AWS::KinesisFirehose::DeliveryStream.ProcessorParameter(R)}]
	Type : ${2:String(R)}
endsnippet

snippet AWS::ECS::TaskDefinition.HealthCheck "" sw

	Command : [${1:String(R)}]
	Interval : ${2:Integer(O)}
	Retries : ${3:Integer(O)}
	StartPeriod : ${4:Integer(O)}
	Timeout : ${5:Integer(O)}
endsnippet

snippet AWS::AutoScaling::AutoScalingGroup.InstancesDistribution "" sw

	OnDemandAllocationStrategy : ${1:String(O)}
	OnDemandBaseCapacity : ${2:Integer(O)}
	OnDemandPercentageAboveBaseCapacity : ${3:Integer(O)}
	SpotAllocationStrategy : ${4:String(O)}
	SpotInstancePools : ${5:Integer(O)}
	SpotMaxPrice : ${6:String(O)}
endsnippet

snippet AWS::EC2::SpotFleet.TargetGroupsConfig "" sw

	TargetGroups : [${1:AWS::EC2::SpotFleet.TargetGroup(R)}]
endsnippet

snippet AWS::EC2::LaunchTemplate.LicenseSpecification "" sw

	LicenseConfigurationArn : ${1:String(O)}
endsnippet

snippet AWS::ElasticLoadBalancingV2::LoadBalancer.SubnetMapping "" sw

	AllocationId : ${1:String(R)}
	SubnetId : ${2:String(R)}
endsnippet

snippet AWS::CodeDeploy::DeploymentGroup.EC2TagFilter "" sw

	Key : ${1:String(O)}
	Type : ${2:String(O)}
	Value : ${3:String(O)}
endsnippet

snippet AWS::S3::Bucket.CorsConfiguration "" sw

	CorsRules : [${1:AWS::S3::Bucket.CorsRule(R)}]
endsnippet

snippet AWS::S3::Bucket.ReplicationDestination "" sw

	AccessControlTranslation : ${1:AWS::S3::Bucket.AccessControlTranslation(O)}
	Account : ${2:String(O)}
	Bucket : ${3:String(R)}
	EncryptionConfiguration : ${4:AWS::S3::Bucket.EncryptionConfiguration(O)}
	StorageClass : ${5:String(O)}
endsnippet

snippet AWS::SageMaker::NotebookInstanceLifecycleConfig.NotebookInstanceLifecycleHook "" sw

	Content : ${1:String(O)}
endsnippet

snippet AWS::EC2::SecurityGroup.Egress "" sw

	CidrIp : ${1:String(O)}
	CidrIpv6 : ${2:String(O)}
	Description : ${3:String(O)}
	DestinationPrefixListId : ${4:String(O)}
	DestinationSecurityGroupId : ${5:String(O)}
	FromPort : ${6:Integer(O)}
	IpProtocol : ${7:String(R)}
	ToPort : ${8:Integer(O)}
endsnippet

snippet AWS::ApiGatewayV2::Stage.AccessLogSettings "" sw

	Format : ${1:String(O)}
	DestinationArn : ${2:String(O)}
endsnippet

snippet AWS::IoTAnalytics::Pipeline.Channel "" sw

	ChannelName : ${1:String(O)}
	Next : ${2:String(O)}
	Name : ${3:String(O)}
endsnippet

snippet AWS::ServiceCatalog::CloudFormationProvisionedProduct.ProvisioningParameter "" sw

	Value : ${1:String(O)}
	Key : ${2:String(O)}
endsnippet

snippet AWS::EC2::LaunchTemplate.CpuOptions "" sw

	ThreadsPerCore : ${1:Integer(O)}
	CoreCount : ${2:Integer(O)}
endsnippet

snippet AWS::IoT::TopicRule.KinesisAction "" sw

	PartitionKey : ${1:String(O)}
	RoleArn : ${2:String(R)}
	StreamName : ${3:String(R)}
endsnippet

snippet AWS::ECS::TaskDefinition.PortMapping "" sw

	ContainerPort : ${1:Integer(O)}
	HostPort : ${2:Integer(O)}
	Protocol : ${3:String(O)}
endsnippet

snippet AWS::WAFRegional::SizeConstraintSet.FieldToMatch "" sw

	Type : ${1:String(R)}
	Data : ${2:String(O)}
endsnippet

snippet AWS::EC2::Instance.ElasticInferenceAccelerator "" sw

	Type : ${1:String(R)}
endsnippet

snippet AWS::IoT::TopicRule.CloudwatchAlarmAction "" sw

	AlarmName : ${1:String(R)}
	RoleArn : ${2:String(R)}
	StateReason : ${3:String(R)}
	StateValue : ${4:String(R)}
endsnippet

snippet AWS::ECS::TaskDefinition.Ulimit "" sw

	HardLimit : ${1:Integer(R)}
	Name : ${2:String(R)}
	SoftLimit : ${3:Integer(R)}
endsnippet

snippet AWS::DynamoDB::Table.PointInTimeRecoverySpecification "" sw

	PointInTimeRecoveryEnabled : ${1:Boolean(O)}
endsnippet

snippet AWS::ApiGatewayV2::Route.ParameterConstraints "" sw

	Required : ${1:Boolean(R)}
endsnippet

snippet AWS::Lambda::Function.Environment "" sw

	Variables : [${1:String(O)}]
endsnippet

snippet AWS::OpsWorks::Layer.LifecycleEventConfiguration "" sw

	ShutdownEventConfiguration : ${1:AWS::OpsWorks::Layer.ShutdownEventConfiguration(O)}
endsnippet

snippet AWS::OpsWorks::Stack.RdsDbInstance "" sw

	DbPassword : ${1:String(R)}
	DbUser : ${2:String(R)}
	RdsDbInstanceArn : ${3:String(R)}
endsnippet

snippet AWS::EC2::SpotFleet.GroupIdentifier "" sw

	GroupId : ${1:String(R)}
endsnippet

snippet AWS::Budgets::Budget.CostTypes "" sw

	IncludeSupport : ${1:Boolean(O)}
	IncludeOtherSubscription : ${2:Boolean(O)}
	IncludeTax : ${3:Boolean(O)}
	IncludeSubscription : ${4:Boolean(O)}
	UseBlended : ${5:Boolean(O)}
	IncludeUpfront : ${6:Boolean(O)}
	IncludeDiscount : ${7:Boolean(O)}
	IncludeCredit : ${8:Boolean(O)}
	IncludeRecurring : ${9:Boolean(O)}
	UseAmortized : ${10:Boolean(O)}
	IncludeRefund : ${11:Boolean(O)}
endsnippet

snippet AWS::EMR::Cluster.ScalingRule "" sw

	Action : ${1:AWS::EMR::Cluster.ScalingAction(R)}
	Description : ${2:String(O)}
	Name : ${3:String(R)}
	Trigger : ${4:AWS::EMR::Cluster.ScalingTrigger(R)}
endsnippet

snippet AWS::CloudFront::StreamingDistribution.Logging "" sw

	Bucket : ${1:String(R)}
	Enabled : ${2:Boolean(R)}
	Prefix : ${3:String(R)}
endsnippet

snippet AWS::WAF::ByteMatchSet.FieldToMatch "" sw

	Data : ${1:String(O)}
	Type : ${2:String(R)}
endsnippet

snippet AWS::IoT::TopicRule.Action "" sw

	CloudwatchAlarm : ${1:AWS::IoT::TopicRule.CloudwatchAlarmAction(O)}
	CloudwatchMetric : ${2:AWS::IoT::TopicRule.CloudwatchMetricAction(O)}
	DynamoDB : ${3:AWS::IoT::TopicRule.DynamoDBAction(O)}
	DynamoDBv2 : ${4:AWS::IoT::TopicRule.DynamoDBv2Action(O)}
	Elasticsearch : ${5:AWS::IoT::TopicRule.ElasticsearchAction(O)}
	Firehose : ${6:AWS::IoT::TopicRule.FirehoseAction(O)}
	IotAnalytics : ${7:AWS::IoT::TopicRule.IotAnalyticsAction(O)}
	Kinesis : ${8:AWS::IoT::TopicRule.KinesisAction(O)}
	Lambda : ${9:AWS::IoT::TopicRule.LambdaAction(O)}
	Republish : ${10:AWS::IoT::TopicRule.RepublishAction(O)}
	S3 : ${11:AWS::IoT::TopicRule.S3Action(O)}
	Sns : ${12:AWS::IoT::TopicRule.SnsAction(O)}
	Sqs : ${13:AWS::IoT::TopicRule.SqsAction(O)}
	StepFunctions : ${14:AWS::IoT::TopicRule.StepFunctionsAction(O)}
endsnippet

snippet AWS::Glue::Classifier.JsonClassifier "" sw

	JsonPath : ${1:String(R)}
	Name : ${2:String(O)}
endsnippet

snippet AWS::S3::Bucket.AccelerateConfiguration "" sw

	AccelerationStatus : ${1:String(R)}
endsnippet

snippet AWS::IoTAnalytics::Pipeline.Filter "" sw

	Filter : ${1:String(O)}
	Next : ${2:String(O)}
	Name : ${3:String(O)}
endsnippet

snippet AWS::Glue::Trigger.Condition "" sw

	State : ${1:String(O)}
	LogicalOperator : ${2:String(O)}
	JobName : ${3:String(O)}
endsnippet

snippet AWS::KinesisFirehose::DeliveryStream.CopyCommand "" sw

	CopyOptions : ${1:String(O)}
	DataTableColumns : ${2:String(O)}
	DataTableName : ${3:String(R)}
endsnippet

snippet AWS::DataPipeline::Pipeline.ParameterValue "" sw

	Id : ${1:String(R)}
	StringValue : ${2:String(R)}
endsnippet

snippet AWS::CodeBuild::Project.ProjectTriggers "" sw

	FilterGroups : [${1:AWS::CodeBuild::Project.FilterGroup(O)}]
	Webhook : ${2:Boolean(O)}
endsnippet

snippet AWS::CloudFront::Distribution.Logging "" sw

	IncludeCookies : ${1:Boolean(O)}
	Bucket : ${2:String(R)}
	Prefix : ${3:String(O)}
endsnippet

snippet AWS::CloudFront::Distribution.DistributionConfig "" sw

	Logging : ${1:AWS::CloudFront::Distribution.Logging(O)}
	Comment : ${2:String(O)}
	DefaultRootObject : ${3:String(O)}
	Origins : [${4:AWS::CloudFront::Distribution.Origin(O)}]
	ViewerCertificate : ${5:AWS::CloudFront::Distribution.ViewerCertificate(O)}
	PriceClass : ${6:String(O)}
	DefaultCacheBehavior : ${7:AWS::CloudFront::Distribution.DefaultCacheBehavior(O)}
	CustomErrorResponses : [${8:AWS::CloudFront::Distribution.CustomErrorResponse(O)}]
	Enabled : ${9:Boolean(R)}
	Aliases : [${10:String(O)}]
	IPV6Enabled : ${11:Boolean(O)}
	WebACLId : ${12:String(O)}
	HttpVersion : ${13:String(O)}
	Restrictions : ${14:AWS::CloudFront::Distribution.Restrictions(O)}
	CacheBehaviors : [${15:AWS::CloudFront::Distribution.CacheBehavior(O)}]
endsnippet

snippet AWS::Cognito::IdentityPoolRoleAttachment.RulesConfigurationType "" sw

	Rules : [${1:AWS::Cognito::IdentityPoolRoleAttachment.MappingRule(R)}]
endsnippet

snippet AWS::S3::Bucket.NoncurrentVersionTransition "" sw

	StorageClass : ${1:String(R)}
	TransitionInDays : ${2:Integer(R)}
endsnippet

snippet AWS::ECS::TaskDefinition.LinuxParameters "" sw

	Capabilities : ${1:AWS::ECS::TaskDefinition.KernelCapabilities(O)}
	Devices : [${2:AWS::ECS::TaskDefinition.Device(O)}]
	InitProcessEnabled : ${3:Boolean(O)}
	SharedMemorySize : ${4:Integer(O)}
	Tmpfs : [${5:AWS::ECS::TaskDefinition.Tmpfs(O)}]
endsnippet

snippet AWS::Glue::Job.ExecutionProperty "" sw

	MaxConcurrentRuns : ${1:Double(O)}
endsnippet

snippet AWS::EMR::Cluster.KeyValue "" sw

	Key : ${1:String(O)}
	Value : ${2:String(O)}
endsnippet

snippet AWS::EC2::SpotFleet.LaunchTemplateOverrides "" sw

	AvailabilityZone : ${1:String(O)}
	InstanceType : ${2:String(O)}
	SpotPrice : ${3:String(O)}
	SubnetId : ${4:String(O)}
	WeightedCapacity : ${5:Double(O)}
endsnippet

snippet AWS::CloudWatch::Alarm.MetricDataQuery "" sw

	Expression : ${1:String(O)}
	Id : ${2:String(R)}
	Label : ${3:String(O)}
	MetricStat : ${4:AWS::CloudWatch::Alarm.MetricStat(O)}
	ReturnData : ${5:Boolean(O)}
endsnippet

snippet AWS::AppStream::Stack.UserSetting "" sw

	Action : ${1:String(R)}
	Permission : ${2:String(R)}
endsnippet

snippet AWS::AmazonMQ::ConfigurationAssociation.ConfigurationId "" sw

	Revision : ${1:Integer(R)}
	Id : ${2:String(R)}
endsnippet

snippet AWS::Elasticsearch::Domain.SnapshotOptions "" sw

	AutomatedSnapshotStartHour : ${1:Integer(O)}
endsnippet

snippet AWS::ApiGateway::Stage.AccessLogSetting "" sw

	DestinationArn : ${1:String(O)}
	Format : ${2:String(O)}
endsnippet

snippet AWS::ServiceDiscovery::Service.HealthCheckConfig "" sw

	Type : ${1:String(R)}
	ResourcePath : ${2:String(O)}
	FailureThreshold : ${3:Double(O)}
endsnippet

snippet AWS::Greengrass::SubscriptionDefinition.SubscriptionDefinitionVersion "" sw

	Subscriptions : [${1:AWS::Greengrass::SubscriptionDefinition.Subscription(R)}]
endsnippet

snippet AWS::Cognito::UserPool.DeviceConfiguration "" sw

	DeviceOnlyRememberedOnUserPrompt : ${1:Boolean(O)}
	ChallengeRequiredOnNewDevice : ${2:Boolean(O)}
endsnippet

snippet AWS::OpsWorks::Layer.LoadBasedAutoScaling "" sw

	DownScaling : ${1:AWS::OpsWorks::Layer.AutoScalingThresholds(O)}
	Enable : ${2:Boolean(O)}
	UpScaling : ${3:AWS::OpsWorks::Layer.AutoScalingThresholds(O)}
endsnippet

snippet AWS::Kinesis::Stream.StreamEncryption "" sw

	EncryptionType : ${1:String(R)}
	KeyId : ${2:String(R)}
endsnippet

snippet AWS::ApplicationAutoScaling::ScalingPolicy.TargetTrackingScalingPolicyConfiguration "" sw

	CustomizedMetricSpecification : ${1:AWS::ApplicationAutoScaling::ScalingPolicy.CustomizedMetricSpecification(O)}
	DisableScaleIn : ${2:Boolean(O)}
	PredefinedMetricSpecification : ${3:AWS::ApplicationAutoScaling::ScalingPolicy.PredefinedMetricSpecification(O)}
	ScaleInCooldown : ${4:Integer(O)}
	ScaleOutCooldown : ${5:Integer(O)}
	TargetValue : ${6:Double(R)}
endsnippet

snippet AWS::Batch::JobDefinition.Ulimit "" sw

	SoftLimit : ${1:Integer(R)}
	HardLimit : ${2:Integer(R)}
	Name : ${3:String(R)}
endsnippet

snippet AWS::Batch::JobDefinition.VolumesHost "" sw

	SourcePath : ${1:String(O)}
endsnippet

snippet AWS::KinesisFirehose::DeliveryStream.S3DestinationConfiguration "" sw

	BucketARN : ${1:String(R)}
	BufferingHints : ${2:AWS::KinesisFirehose::DeliveryStream.BufferingHints(R)}
	CloudWatchLoggingOptions : ${3:AWS::KinesisFirehose::DeliveryStream.CloudWatchLoggingOptions(O)}
	CompressionFormat : ${4:String(R)}
	EncryptionConfiguration : ${5:AWS::KinesisFirehose::DeliveryStream.EncryptionConfiguration(O)}
	Prefix : ${6:String(O)}
	RoleARN : ${7:String(R)}
endsnippet

snippet AWS::CloudFront::StreamingDistribution.StreamingDistributionConfig "" sw

	Logging : ${1:AWS::CloudFront::StreamingDistribution.Logging(O)}
	Comment : ${2:String(R)}
	PriceClass : ${3:String(O)}
	S3Origin : ${4:AWS::CloudFront::StreamingDistribution.S3Origin(R)}
	Enabled : ${5:Boolean(R)}
	Aliases : [${6:String(O)}]
	TrustedSigners : ${7:AWS::CloudFront::StreamingDistribution.TrustedSigners(R)}
endsnippet

snippet AWS::Glue::Trigger.Predicate "" sw

	Logical : ${1:String(O)}
	Conditions : [${2:AWS::Glue::Trigger.Condition(O)}]
endsnippet

snippet AWS::IAM::Group.Policy "" sw

	PolicyDocument : ${1:Json(R)}
	PolicyName : ${2:String(R)}
endsnippet

snippet AWS::EMR::Cluster.InstanceTypeConfig "" sw

	BidPrice : ${1:String(O)}
	BidPriceAsPercentageOfOnDemandPrice : ${2:Double(O)}
	Configurations : [${3:AWS::EMR::Cluster.Configuration(O)}]
	EbsConfiguration : ${4:AWS::EMR::Cluster.EbsConfiguration(O)}
	InstanceType : ${5:String(R)}
	WeightedCapacity : ${6:Integer(O)}
endsnippet

snippet AWS::SecretsManager::Secret.GenerateSecretString "" sw

	ExcludeUppercase : ${1:Boolean(O)}
	RequireEachIncludedType : ${2:Boolean(O)}
	IncludeSpace : ${3:Boolean(O)}
	ExcludeCharacters : ${4:String(O)}
	GenerateStringKey : ${5:String(O)}
	PasswordLength : ${6:Integer(O)}
	ExcludePunctuation : ${7:Boolean(O)}
	ExcludeLowercase : ${8:Boolean(O)}
	SecretStringTemplate : ${9:String(O)}
	ExcludeNumbers : ${10:Boolean(O)}
endsnippet

snippet AWS::AutoScaling::AutoScalingGroup.LaunchTemplate "" sw

	LaunchTemplateSpecification : ${1:AWS::AutoScaling::AutoScalingGroup.LaunchTemplateSpecification(R)}
	Overrides : [${2:AWS::AutoScaling::AutoScalingGroup.LaunchTemplateOverrides(O)}]
endsnippet

snippet AWS::SageMaker::Model.ContainerDefinition "" sw

	ContainerHostname : ${1:String(O)}
	Environment : ${2:Json(O)}
	ModelDataUrl : ${3:String(O)}
	Image : ${4:String(R)}
endsnippet

snippet AWS::IoTAnalytics::Dataset.Action "" sw

	ActionName : ${1:String(R)}
	ContainerAction : ${2:AWS::IoTAnalytics::Dataset.ContainerAction(O)}
	QueryAction : ${3:AWS::IoTAnalytics::Dataset.QueryAction(O)}
endsnippet

snippet AWS::EC2::LaunchTemplate.Ebs "" sw

	SnapshotId : ${1:String(O)}
	VolumeType : ${2:String(O)}
	KmsKeyId : ${3:String(O)}
	Encrypted : ${4:Boolean(O)}
	Iops : ${5:Integer(O)}
	VolumeSize : ${6:Integer(O)}
	DeleteOnTermination : ${7:Boolean(O)}
endsnippet

snippet AWS::Glue::Table.Order "" sw

	Column : ${1:String(R)}
	SortOrder : ${2:Integer(R)}
endsnippet

snippet AWS::Batch::JobQueue.ComputeEnvironmentOrder "" sw

	ComputeEnvironment : ${1:String(R)}
	Order : ${2:Integer(R)}
endsnippet

snippet AWS::Route53::HealthCheck.HealthCheckTag "" sw

	Key : ${1:String(R)}
	Value : ${2:String(R)}
endsnippet

snippet AWS::KinesisFirehose::DeliveryStream.ElasticsearchRetryOptions "" sw

	DurationInSeconds : ${1:Integer(R)}
endsnippet

snippet AWS::SSM::MaintenanceWindowTask.MaintenanceWindowStepFunctionsParameters "" sw

	Input : ${1:String(O)}
	Name : ${2:String(O)}
endsnippet

snippet AWS::CodeBuild::Project.EnvironmentVariable "" sw

	Type : ${1:String(O)}
	Value : ${2:String(R)}
	Name : ${3:String(R)}
endsnippet

snippet AWS::IoT1Click::Project.PlacementTemplate "" sw

	DeviceTemplates : ${1:Json(O)}
	DefaultAttributes : ${2:Json(O)}
endsnippet

snippet AWS::DynamoDB::Table.SSESpecification "" sw

	SSEEnabled : ${1:Boolean(R)}
endsnippet

snippet AWS::Route53::RecordSetGroup.AliasTarget "" sw

	DNSName : ${1:String(R)}
	EvaluateTargetHealth : ${2:Boolean(O)}
	HostedZoneId : ${3:String(R)}
endsnippet

snippet AWS::Lambda::Alias.AliasRoutingConfiguration "" sw

	AdditionalVersionWeights : [${1:AWS::Lambda::Alias.VersionWeight(R)}]
endsnippet

snippet AWS::EC2::EC2Fleet.FleetLaunchTemplateOverridesRequest "" sw

	WeightedCapacity : ${1:Double(O)}
	Priority : ${2:Double(O)}
	AvailabilityZone : ${3:String(O)}
	SubnetId : ${4:String(O)}
	InstanceType : ${5:String(O)}
	MaxPrice : ${6:String(O)}
endsnippet

snippet AWS::Cognito::UserPool.InviteMessageTemplate "" sw

	EmailMessage : ${1:String(O)}
	SMSMessage : ${2:String(O)}
	EmailSubject : ${3:String(O)}
endsnippet

snippet AWS::EMR::Cluster.MetricDimension "" sw

	Key : ${1:String(R)}
	Value : ${2:String(R)}
endsnippet

snippet AWS::S3::Bucket.AbortIncompleteMultipartUpload "" sw

	DaysAfterInitiation : ${1:Integer(R)}
endsnippet

snippet AWS::ElasticBeanstalk::Application.MaxCountRule "" sw

	DeleteSourceFromS3 : ${1:Boolean(O)}
	Enabled : ${2:Boolean(O)}
	MaxCount : ${3:Integer(O)}
endsnippet

snippet AWS::AutoScaling::AutoScalingGroup.TagProperty "" sw

	Key : ${1:String(R)}
	PropagateAtLaunch : ${2:Boolean(R)}
	Value : ${3:String(R)}
endsnippet

snippet AWS::Greengrass::ConnectorDefinition.Connector "" sw

	ConnectorArn : ${1:String(R)}
	Parameters : ${2:Json(O)}
	Id : ${3:String(R)}
endsnippet

snippet AWS::S3::Bucket.FilterRule "" sw

	Name : ${1:String(R)}
	Value : ${2:String(R)}
endsnippet

snippet AWS::CodePipeline::Pipeline.ActionTypeId "" sw

	Category : ${1:String(R)}
	Owner : ${2:String(R)}
	Provider : ${3:String(R)}
	Version : ${4:String(R)}
endsnippet

snippet AWS::IoTAnalytics::Dataset.ContainerAction "" sw

	Variables : [${1:AWS::IoTAnalytics::Dataset.Variable(O)}]
	ExecutionRoleArn : ${2:String(R)}
	Image : ${3:String(R)}
	ResourceConfiguration : ${4:AWS::IoTAnalytics::Dataset.ResourceConfiguration(R)}
endsnippet

snippet AWS::CodePipeline::Pipeline.OutputArtifact "" sw

	Name : ${1:String(R)}
endsnippet

snippet AWS::Route53::HostedZone.VPC "" sw

	VPCId : ${1:String(R)}
	VPCRegion : ${2:String(R)}
endsnippet

snippet AWS::Greengrass::FunctionDefinitionVersion.ResourceAccessPolicy "" sw

	ResourceId : ${1:String(R)}
	Permission : ${2:String(O)}
endsnippet

snippet Tag "" sw

	Key : ${1:String(R)}
	Value : ${2:String(R)}
endsnippet

snippet AWS::ECS::Service.AwsVpcConfiguration "" sw

	AssignPublicIp : ${1:String(O)}
	SecurityGroups : [${2:String(O)}]
	Subnets : [${3:String(R)}]
endsnippet

snippet AWS::Glue::Partition.Column "" sw

	Comment : ${1:String(O)}
	Type : ${2:String(O)}
	Name : ${3:String(R)}
endsnippet

snippet AWS::Greengrass::ResourceDefinitionVersion.SecretsManagerSecretResourceData "" sw

	ARN : ${1:String(R)}
	AdditionalStagingLabelsToDownload : [${2:String(O)}]
endsnippet

snippet AWS::IoT::Thing.AttributePayload "" sw

	Attributes : [${1:String(O)}]
endsnippet

snippet AWS::Cognito::IdentityPoolRoleAttachment.RoleMapping "" sw

	Type : ${1:String(R)}
	AmbiguousRoleResolution : ${2:String(O)}
	RulesConfiguration : ${3:AWS::Cognito::IdentityPoolRoleAttachment.RulesConfigurationType(O)}
endsnippet

snippet AWS::Events::Rule.EcsParameters "" sw

	TaskCount : ${1:Integer(O)}
	TaskDefinitionArn : ${2:String(R)}
endsnippet

snippet AWS::CodeBuild::Project.S3LogsConfig "" sw

	Status : ${1:String(R)}
	EncryptionDisabled : ${2:Boolean(O)}
	Location : ${3:String(O)}
endsnippet

snippet AWS::Budgets::Budget.TimePeriod "" sw

	Start : ${1:String(O)}
	End : ${2:String(O)}
endsnippet

snippet AWS::CodeDeploy::DeploymentGroup.OnPremisesTagSet "" sw

	OnPremisesTagSetList : [${1:AWS::CodeDeploy::DeploymentGroup.OnPremisesTagSetListObject(O)}]
endsnippet

snippet AWS::Route53::HealthCheck.AlarmIdentifier "" sw

	Name : ${1:String(R)}
	Region : ${2:String(R)}
endsnippet

snippet AWS::ApiGateway::UsagePlan.QuotaSettings "" sw

	Limit : ${1:Integer(O)}
	Offset : ${2:Integer(O)}
	Period : ${3:String(O)}
endsnippet

snippet AWS::Greengrass::LoggerDefinition.LoggerDefinitionVersion "" sw

	Loggers : [${1:AWS::Greengrass::LoggerDefinition.Logger(R)}]
endsnippet

snippet AWS::Greengrass::ResourceDefinitionVersion.LocalDeviceResourceData "" sw

	SourcePath : ${1:String(R)}
	GroupOwnerSetting : ${2:AWS::Greengrass::ResourceDefinitionVersion.GroupOwnerSetting(O)}
endsnippet

snippet AWS::DataPipeline::Pipeline.Field "" sw

	Key : ${1:String(R)}
	RefValue : ${2:String(O)}
	StringValue : ${3:String(O)}
endsnippet

snippet AWS::EC2::Instance.BlockDeviceMapping "" sw

	DeviceName : ${1:String(R)}
	Ebs : ${2:AWS::EC2::Instance.Ebs(O)}
	NoDevice : ${3:AWS::EC2::Instance.NoDevice(O)}
	VirtualName : ${4:String(O)}
endsnippet

snippet AWS::IoT::TopicRule.IotAnalyticsAction "" sw

	ChannelName : ${1:String(R)}
	RoleArn : ${2:String(R)}
endsnippet

snippet AWS::CloudFront::Distribution.OriginCustomHeader "" sw

	HeaderValue : ${1:String(R)}
	HeaderName : ${2:String(R)}
endsnippet

snippet AWS::AppSync::GraphQLApi.UserPoolConfig "" sw

	AppIdClientRegex : ${1:String(O)}
	UserPoolId : ${2:String(O)}
	AwsRegion : ${3:String(O)}
	DefaultAction : ${4:String(O)}
endsnippet

snippet AWS::GameLift::Build.S3Location "" sw

	Bucket : ${1:String(R)}
	Key : ${2:String(R)}
	RoleArn : ${3:String(R)}
endsnippet

snippet AWS::KinesisFirehose::DeliveryStream.KMSEncryptionConfig "" sw

	AWSKMSKeyARN : ${1:String(R)}
endsnippet

snippet AWS::EMR::Cluster.VolumeSpecification "" sw

	Iops : ${1:Integer(O)}
	SizeInGB : ${2:Integer(R)}
	VolumeType : ${3:String(R)}
endsnippet

snippet AWS::CodePipeline::CustomActionType.ConfigurationProperties "" sw

	Description : ${1:String(O)}
	Key : ${2:Boolean(R)}
	Name : ${3:String(R)}
	Queryable : ${4:Boolean(O)}
	Required : ${5:Boolean(R)}
	Secret : ${6:Boolean(R)}
	Type : ${7:String(O)}
endsnippet

snippet AWS::IoT::TopicRule.CloudwatchMetricAction "" sw

	MetricName : ${1:String(R)}
	MetricNamespace : ${2:String(R)}
	MetricTimestamp : ${3:String(O)}
	MetricUnit : ${4:String(R)}
	MetricValue : ${5:String(R)}
	RoleArn : ${6:String(R)}
endsnippet

snippet AWS::EC2::SpotFleet.SpotFleetMonitoring "" sw

	Enabled : ${1:Boolean(O)}
endsnippet

snippet AWS::Greengrass::SubscriptionDefinitionVersion.Subscription "" sw

	Target : ${1:String(R)}
	Id : ${2:String(R)}
	Source : ${3:String(R)}
	Subject : ${4:String(R)}
endsnippet

snippet AWS::EC2::SpotFleet.BlockDeviceMapping "" sw

	DeviceName : ${1:String(R)}
	Ebs : ${2:AWS::EC2::SpotFleet.EbsBlockDevice(O)}
	NoDevice : ${3:String(O)}
	VirtualName : ${4:String(O)}
endsnippet

snippet AWS::WAFRegional::SqlInjectionMatchSet.FieldToMatch "" sw

	Type : ${1:String(R)}
	Data : ${2:String(O)}
endsnippet

snippet AWS::CodePipeline::Pipeline.EncryptionKey "" sw

	Id : ${1:String(R)}
	Type : ${2:String(R)}
endsnippet

snippet AWS::AppSync::DataSource.DynamoDBConfig "" sw

	TableName : ${1:String(R)}
	AwsRegion : ${2:String(R)}
	UseCallerCredentials : ${3:Boolean(O)}
endsnippet

snippet AWS::CodeDeploy::DeploymentGroup.AutoRollbackConfiguration "" sw

	Enabled : ${1:Boolean(O)}
	Events : [${2:String(O)}]
endsnippet

snippet AWS::EC2::LaunchTemplate.HibernationOptions "" sw

	Configured : ${1:Boolean(O)}
endsnippet

snippet AWS::S3::Bucket.PublicAccessBlockConfiguration "" sw

	BlockPublicAcls : ${1:Boolean(O)}
	BlockPublicPolicy : ${2:Boolean(O)}
	IgnorePublicAcls : ${3:Boolean(O)}
	RestrictPublicBuckets : ${4:Boolean(O)}
endsnippet

snippet AWS::CloudWatch::Alarm.Metric "" sw

	Dimensions : [${1:AWS::CloudWatch::Alarm.Dimension(O)}]
	MetricName : ${2:String(O)}
	Namespace : ${3:String(O)}
endsnippet

snippet AWS::EMR::InstanceFleetConfig.InstanceFleetProvisioningSpecifications "" sw

	SpotSpecification : ${1:AWS::EMR::InstanceFleetConfig.SpotProvisioningSpecification(R)}
endsnippet

snippet AWS::EMR::InstanceGroupConfig.VolumeSpecification "" sw

	Iops : ${1:Integer(O)}
	SizeInGB : ${2:Integer(R)}
	VolumeType : ${3:String(R)}
endsnippet

snippet AWS::AutoScalingPlans::ScalingPlan.PredefinedLoadMetricSpecification "" sw

	PredefinedLoadMetricType : ${1:String(R)}
	ResourceLabel : ${2:String(O)}
endsnippet

snippet AWS::ElasticLoadBalancing::LoadBalancer.Policies "" sw

	Attributes : [${1:Json(R)}]
	InstancePorts : [${2:String(O)}]
	LoadBalancerPorts : [${3:String(O)}]
	PolicyName : ${4:String(R)}
	PolicyType : ${5:String(R)}
endsnippet

snippet AWS::ApiGatewayV2::Stage.RouteSettings "" sw

	LoggingLevel : ${1:String(O)}
	DataTraceEnabled : ${2:Boolean(O)}
	ThrottlingBurstLimit : ${3:Integer(O)}
	DetailedMetricsEnabled : ${4:Boolean(O)}
	ThrottlingRateLimit : ${5:Double(O)}
endsnippet

snippet AWS::OpsWorks::Stack.ElasticIp "" sw

	Ip : ${1:String(R)}
	Name : ${2:String(O)}
endsnippet

snippet AWS::RDS::OptionGroup.OptionSetting "" sw

	Name : ${1:String(O)}
	Value : ${2:String(O)}
endsnippet

snippet AWS::WAFRegional::SqlInjectionMatchSet.SqlInjectionMatchTuple "" sw

	TextTransformation : ${1:String(R)}
	FieldToMatch : ${2:AWS::WAFRegional::SqlInjectionMatchSet.FieldToMatch(R)}
endsnippet

snippet AWS::EMR::Cluster.AutoScalingPolicy "" sw

	Constraints : ${1:AWS::EMR::Cluster.ScalingConstraints(R)}
	Rules : [${2:AWS::EMR::Cluster.ScalingRule(R)}]
endsnippet

snippet AWS::DynamoDB::Table.StreamSpecification "" sw

	StreamViewType : ${1:String(R)}
endsnippet

snippet AWS::CodeDeploy::DeploymentGroup.Deployment "" sw

	Description : ${1:String(O)}
	IgnoreApplicationStopFailures : ${2:Boolean(O)}
	Revision : ${3:AWS::CodeDeploy::DeploymentGroup.RevisionLocation(R)}
endsnippet

snippet AWS::KinesisFirehose::DeliveryStream.ExtendedS3DestinationConfiguration "" sw

	BucketARN : ${1:String(R)}
	BufferingHints : ${2:AWS::KinesisFirehose::DeliveryStream.BufferingHints(R)}
	CloudWatchLoggingOptions : ${3:AWS::KinesisFirehose::DeliveryStream.CloudWatchLoggingOptions(O)}
	CompressionFormat : ${4:String(R)}
	EncryptionConfiguration : ${5:AWS::KinesisFirehose::DeliveryStream.EncryptionConfiguration(O)}
	Prefix : ${6:String(R)}
	ProcessingConfiguration : ${7:AWS::KinesisFirehose::DeliveryStream.ProcessingConfiguration(O)}
	RoleARN : ${8:String(R)}
	S3BackupConfiguration : ${9:AWS::KinesisFirehose::DeliveryStream.S3DestinationConfiguration(O)}
	S3BackupMode : ${10:String(O)}
endsnippet

snippet AWS::Cognito::IdentityPoolRoleAttachment.MappingRule "" sw

	MatchType : ${1:String(R)}
	Value : ${2:String(R)}
	Claim : ${3:String(R)}
	RoleARN : ${4:String(R)}
endsnippet

snippet AWS::CodeBuild::Project.Source "" sw

	Type : ${1:String(R)}
	ReportBuildStatus : ${2:Boolean(O)}
	Auth : ${3:AWS::CodeBuild::Project.SourceAuth(O)}
	SourceIdentifier : ${4:String(O)}
	BuildSpec : ${5:String(O)}
	GitCloneDepth : ${6:Integer(O)}
	GitSubmodulesConfig : ${7:AWS::CodeBuild::Project.GitSubmodulesConfig(O)}
	InsecureSsl : ${8:Boolean(O)}
	Location : ${9:String(O)}
endsnippet

snippet AWS::EC2::Instance.PrivateIpAddressSpecification "" sw

	Primary : ${1:Boolean(R)}
	PrivateIpAddress : ${2:String(R)}
endsnippet

snippet AWS::Cognito::IdentityPool.CognitoStreams "" sw

	StreamingStatus : ${1:String(O)}
	StreamName : ${2:String(O)}
	RoleArn : ${3:String(O)}
endsnippet

snippet AWS::EC2::EC2Fleet.TagSpecification "" sw

	ResourceType : ${1:String(O)}
	Tags : [${2:AWS::EC2::EC2Fleet.TagRequest(O)}]
endsnippet

snippet AWS::AppSync::DataSource.ElasticsearchConfig "" sw

	AwsRegion : ${1:String(R)}
	Endpoint : ${2:String(R)}
endsnippet

snippet AWS::ECS::TaskDefinition.HostVolumeProperties "" sw

	SourcePath : ${1:String(O)}
endsnippet

snippet AWS::IAM::User.Policy "" sw

	PolicyDocument : ${1:Json(R)}
	PolicyName : ${2:String(R)}
endsnippet

snippet AWS::Glue::Partition.PartitionInput "" sw

	Parameters : ${1:Json(O)}
	StorageDescriptor : ${2:AWS::Glue::Partition.StorageDescriptor(O)}
	Values : [${3:String(R)}]
endsnippet

snippet AWS::KinesisFirehose::DeliveryStream.RedshiftDestinationConfiguration "" sw

	CloudWatchLoggingOptions : ${1:AWS::KinesisFirehose::DeliveryStream.CloudWatchLoggingOptions(O)}
	ClusterJDBCURL : ${2:String(R)}
	CopyCommand : ${3:AWS::KinesisFirehose::DeliveryStream.CopyCommand(R)}
	Password : ${4:String(R)}
	ProcessingConfiguration : ${5:AWS::KinesisFirehose::DeliveryStream.ProcessingConfiguration(O)}
	RoleARN : ${6:String(R)}
	S3Configuration : ${7:AWS::KinesisFirehose::DeliveryStream.S3DestinationConfiguration(R)}
	Username : ${8:String(R)}
endsnippet

snippet AWS::Elasticsearch::Domain.EBSOptions "" sw

	EBSEnabled : ${1:Boolean(O)}
	Iops : ${2:Integer(O)}
	VolumeSize : ${3:Integer(O)}
	VolumeType : ${4:String(O)}
endsnippet

snippet AWS::ECS::Service.NetworkConfiguration "" sw

	AwsvpcConfiguration : ${1:AWS::ECS::Service.AwsVpcConfiguration(O)}
endsnippet

snippet AWS::EMR::InstanceFleetConfig.EbsBlockDeviceConfig "" sw

	VolumeSpecification : ${1:AWS::EMR::InstanceFleetConfig.VolumeSpecification(R)}
	VolumesPerInstance : ${2:Integer(O)}
endsnippet

snippet AWS::EC2::LaunchTemplate.LaunchTemplateElasticInferenceAccelerator "" sw

	Type : ${1:String(O)}
endsnippet

snippet AWS::OpsWorks::Instance.TimeBasedAutoScaling "" sw

	Friday : [${1:String(O)}]
	Monday : [${2:String(O)}]
	Saturday : [${3:String(O)}]
	Sunday : [${4:String(O)}]
	Thursday : [${5:String(O)}]
	Tuesday : [${6:String(O)}]
	Wednesday : [${7:String(O)}]
endsnippet

snippet AWS::Config::ConfigRule.SourceDetail "" sw

	EventSource : ${1:String(R)}
	MaximumExecutionFrequency : ${2:String(O)}
	MessageType : ${3:String(R)}
endsnippet

snippet AWS::EC2::EC2Fleet.SpotOptionsRequest "" sw

	AllocationStrategy : ${1:String(O)}
	InstanceInterruptionBehavior : ${2:String(O)}
	InstancePoolsToUseCount : ${3:Integer(O)}
endsnippet

snippet AWS::DMS::Endpoint.ElasticsearchSettings "" sw

	EndpointUri : ${1:String(O)}
	FullLoadErrorPercentage : ${2:Integer(O)}
	ErrorRetryDuration : ${3:Integer(O)}
	ServiceAccessRoleArn : ${4:String(O)}
endsnippet

snippet AWS::ElasticLoadBalancing::LoadBalancer.AppCookieStickinessPolicy "" sw

	CookieName : ${1:String(R)}
	PolicyName : ${2:String(R)}
endsnippet

snippet AWS::EMR::Cluster.InstanceFleetProvisioningSpecifications "" sw

	SpotSpecification : ${1:AWS::EMR::Cluster.SpotProvisioningSpecification(R)}
endsnippet

snippet AWS::IoTAnalytics::Datastore.RetentionPeriod "" sw

	NumberOfDays : ${1:Integer(O)}
	Unlimited : ${2:Boolean(O)}
endsnippet

snippet AWS::DAX::Cluster.SSESpecification "" sw

	SSEEnabled : ${1:Boolean(O)}
endsnippet

snippet AWS::ElastiCache::ReplicationGroup.NodeGroupConfiguration "" sw

	NodeGroupId : ${1:String(O)}
	PrimaryAvailabilityZone : ${2:String(O)}
	ReplicaAvailabilityZones : [${3:String(O)}]
	ReplicaCount : ${4:Integer(O)}
	Slots : ${5:String(O)}
endsnippet

snippet AWS::Glue::Table.Column "" sw

	Comment : ${1:String(O)}
	Type : ${2:String(O)}
	Name : ${3:String(R)}
endsnippet

snippet AWS::EMR::Cluster.HadoopJarStepConfig "" sw

	Args : [${1:String(O)}]
	Jar : ${2:String(R)}
	MainClass : ${3:String(O)}
	StepProperties : [${4:AWS::EMR::Cluster.KeyValue(O)}]
endsnippet

snippet AWS::Greengrass::ConnectorDefinitionVersion.Connector "" sw

	ConnectorArn : ${1:String(R)}
	Parameters : ${2:Json(O)}
	Id : ${3:String(R)}
endsnippet

snippet AWS::RDS::OptionGroup.OptionConfiguration "" sw

	DBSecurityGroupMemberships : [${1:String(O)}]
	OptionName : ${2:String(R)}
	OptionSettings : [${3:AWS::RDS::OptionGroup.OptionSetting(O)}]
	OptionVersion : ${4:String(O)}
	Port : ${5:Integer(O)}
	VpcSecurityGroupMemberships : [${6:String(O)}]
endsnippet

snippet AWS::DMS::Endpoint.DynamoDbSettings "" sw

	ServiceAccessRoleArn : ${1:String(O)}
endsnippet

snippet AWS::SSM::MaintenanceWindowTask.MaintenanceWindowRunCommandParameters "" sw

	TimeoutSeconds : ${1:Integer(O)}
	Comment : ${2:String(O)}
	OutputS3KeyPrefix : ${3:String(O)}
	Parameters : ${4:Json(O)}
	DocumentHashType : ${5:String(O)}
	ServiceRoleArn : ${6:String(O)}
	NotificationConfig : ${7:AWS::SSM::MaintenanceWindowTask.NotificationConfig(O)}
	OutputS3BucketName : ${8:String(O)}
	DocumentHash : ${9:String(O)}
endsnippet

snippet AWS::Greengrass::Group.GroupVersion "" sw

	LoggerDefinitionVersionArn : ${1:String(O)}
	DeviceDefinitionVersionArn : ${2:String(O)}
	FunctionDefinitionVersionArn : ${3:String(O)}
	CoreDefinitionVersionArn : ${4:String(O)}
	ResourceDefinitionVersionArn : ${5:String(O)}
	ConnectorDefinitionVersionArn : ${6:String(O)}
	SubscriptionDefinitionVersionArn : ${7:String(O)}
endsnippet

snippet AWS::OpsWorks::App.Source "" sw

	Password : ${1:String(O)}
	Revision : ${2:String(O)}
	SshKey : ${3:String(O)}
	Type : ${4:String(O)}
	Url : ${5:String(O)}
	Username : ${6:String(O)}
endsnippet

snippet AWS::Lambda::Alias.VersionWeight "" sw

	FunctionVersion : ${1:String(R)}
	FunctionWeight : ${2:Double(R)}
endsnippet

snippet AWS::AutoScalingPlans::ScalingPlan.CustomizedLoadMetricSpecification "" sw

	MetricName : ${1:String(R)}
	Statistic : ${2:String(R)}
	Dimensions : [${3:AWS::AutoScalingPlans::ScalingPlan.MetricDimension(O)}]
	Unit : ${4:String(O)}
	Namespace : ${5:String(R)}
endsnippet

snippet AWS::Elasticsearch::Domain.EncryptionAtRestOptions "" sw

	Enabled : ${1:Boolean(O)}
	KmsKeyId : ${2:String(O)}
endsnippet

snippet AWS::ElasticBeanstalk::Application.MaxAgeRule "" sw

	DeleteSourceFromS3 : ${1:Boolean(O)}
	Enabled : ${2:Boolean(O)}
	MaxAgeInDays : ${3:Integer(O)}
endsnippet

snippet AWS::ECS::TaskDefinition.Tmpfs "" sw

	ContainerPath : ${1:String(O)}
	MountOptions : [${2:String(O)}]
	Size : ${3:Integer(O)}
endsnippet

snippet AWS::EMR::InstanceGroupConfig.AutoScalingPolicy "" sw

	Constraints : ${1:AWS::EMR::InstanceGroupConfig.ScalingConstraints(R)}
	Rules : [${2:AWS::EMR::InstanceGroupConfig.ScalingRule(R)}]
endsnippet

snippet AWS::EMR::InstanceGroupConfig.EbsConfiguration "" sw

	EbsBlockDeviceConfigs : [${1:AWS::EMR::InstanceGroupConfig.EbsBlockDeviceConfig(O)}]
	EbsOptimized : ${2:Boolean(O)}
endsnippet

snippet AWS::ApiGateway::Deployment.AccessLogSetting "" sw

	DestinationArn : ${1:String(O)}
	Format : ${2:String(O)}
endsnippet

snippet AWS::CodeBuild::Project.WebhookFilter "" sw

	Pattern : ${1:String(R)}
	Type : ${2:String(R)}
	ExcludeMatchedPattern : ${3:Boolean(O)}
endsnippet

snippet AWS::CodePipeline::Webhook.WebhookAuthConfiguration "" sw

	AllowedIPRange : ${1:String(O)}
	SecretToken : ${2:String(O)}
endsnippet

snippet AWS::EFS::FileSystem.ElasticFileSystemTag "" sw

	Key : ${1:String(R)}
	Value : ${2:String(R)}
endsnippet

snippet AWS::Budgets::Budget.Spend "" sw

	Amount : ${1:Double(R)}
	Unit : ${2:String(R)}
endsnippet

snippet AWS::EMR::Cluster.ScalingTrigger "" sw

	CloudWatchAlarmDefinition : ${1:AWS::EMR::Cluster.CloudWatchAlarmDefinition(R)}
endsnippet

snippet AWS::Cognito::UserPool.StringAttributeConstraints "" sw

	MinLength : ${1:String(O)}
	MaxLength : ${2:String(O)}
endsnippet

snippet AWS::Greengrass::FunctionDefinitionVersion.Environment "" sw

	Variables : ${1:Json(O)}
	Execution : ${2:AWS::Greengrass::FunctionDefinitionVersion.Execution(O)}
	ResourceAccessPolicies : [${3:AWS::Greengrass::FunctionDefinitionVersion.ResourceAccessPolicy(O)}]
	AccessSysfs : ${4:Boolean(O)}
endsnippet

snippet AWS::Glue::Crawler.SchemaChangePolicy "" sw

	UpdateBehavior : ${1:String(O)}
	DeleteBehavior : ${2:String(O)}
endsnippet

snippet AWS::ECS::TaskDefinition.RepositoryCredentials "" sw

	CredentialsParameter : ${1:String(O)}
endsnippet

snippet AWS::CodeDeploy::DeploymentGroup.EC2TagSetListObject "" sw

	Ec2TagGroup : [${1:AWS::CodeDeploy::DeploymentGroup.EC2TagFilter(O)}]
endsnippet

snippet AWS::ApplicationAutoScaling::ScalableTarget.ScalableTargetAction "" sw

	MaxCapacity : ${1:Integer(O)}
	MinCapacity : ${2:Integer(O)}
endsnippet

# }}}
